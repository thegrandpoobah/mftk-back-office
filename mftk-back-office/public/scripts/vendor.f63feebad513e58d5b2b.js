/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		2:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + ".scripts/app." + {"0":"2998f9381993245e10bf","1":"e8eac563ffa1d4a9d898"}[chunkId] + ".js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	__webpack_require__(62);
	__webpack_require__(28);
	__webpack_require__(5);
	__webpack_require__(25);
	__webpack_require__(63);
	__webpack_require__(1);
	module.exports = __webpack_require__(64);


/***/ },
/* 1 */
/***/ function(module, exports) {

	;(function(window){
	/*! modernizr 3.3.1 (Custom Build) | MIT *
	 * http://modernizr.com/download/?-mq !*/
	!function(e,n,t){function o(e,n){return typeof e===n}function a(){var e,n,t,a,i,s,r;for(var d in l)if(l.hasOwnProperty(d)){if(e=[],n=l[d],n.name&&(e.push(n.name.toLowerCase()),n.options&&n.options.aliases&&n.options.aliases.length))for(t=0;t<n.options.aliases.length;t++)e.push(n.options.aliases[t].toLowerCase());for(a=o(n.fn,"function")?n.fn():n.fn,i=0;i<e.length;i++)s=e[i],r=s.split("."),1===r.length?Modernizr[r[0]]=a:(!Modernizr[r[0]]||Modernizr[r[0]]instanceof Boolean||(Modernizr[r[0]]=new Boolean(Modernizr[r[0]])),Modernizr[r[0]][r[1]]=a),f.push((a?"":"no-")+r.join("-"))}}function i(){return"function"!=typeof n.createElement?n.createElement(arguments[0]):c?n.createElementNS.call(n,"http://www.w3.org/2000/svg",arguments[0]):n.createElement.apply(n,arguments)}function s(){var e=n.body;return e||(e=i(c?"svg":"body"),e.fake=!0),e}function r(e,t,o,a){var r,l,d,f,c="modernizr",p=i("div"),h=s();if(parseInt(o,10))for(;o--;)d=i("div"),d.id=a?a[o]:c+(o+1),p.appendChild(d);return r=i("style"),r.type="text/css",r.id="s"+c,(h.fake?h:p).appendChild(r),h.appendChild(p),r.styleSheet?r.styleSheet.cssText=e:r.appendChild(n.createTextNode(e)),p.id=c,h.fake&&(h.style.background="",h.style.overflow="hidden",f=u.style.overflow,u.style.overflow="hidden",u.appendChild(h)),l=t(p,e),h.fake?(h.parentNode.removeChild(h),u.style.overflow=f,u.offsetHeight):p.parentNode.removeChild(p),!!l}var l=[],d={_version:"3.3.1",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,n){var t=this;setTimeout(function(){n(t[e])},0)},addTest:function(e,n,t){l.push({name:e,fn:n,options:t})},addAsyncTest:function(e){l.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=d,Modernizr=new Modernizr;var f=[],u=n.documentElement,c="svg"===u.nodeName.toLowerCase(),p=function(){var n=e.matchMedia||e.msMatchMedia;return n?function(e){var t=n(e);return t&&t.matches||!1}:function(n){var t=!1;return r("@media "+n+" { #modernizr { position: absolute; } }",function(n){t="absolute"==(e.getComputedStyle?e.getComputedStyle(n,null):n.currentStyle).position}),t}}();d.mq=p,a(),delete d.addTest,delete d.addAsyncTest;for(var h=0;h<Modernizr._q.length;h++)Modernizr._q[h]();e.Modernizr=Modernizr}(window,document);
	module.exports = window.Modernizr;
	})(window);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(3);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jQuery"] = __webpack_require__(4);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.1.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-09-22T22:30Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};



		function DOMEval( code, doc ) {
			doc = doc || document;

			var script = doc.createElement( "script" );

			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.1.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&

				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter( qualifier, elements );
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Support: Android 4.0 only
				// Strict mode functions invoked without .call/.apply get global-object context
				resolve.call( undefined, value );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.call( undefined, value );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;



	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE <=9 only
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i,
			val = 0;

		// If we already have the right measurement, avoid augmentation
		if ( extra === ( isBorderBox ? "border" : "content" ) ) {
			i = 4;

		// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var val,
			valueIsBorderBox = true,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE <=11 only
		// Running getBoundingClientRect on a disconnected node
		// in IE throws an error.
		if ( elem.getClientRects().length ) {
			val = elem.getBoundingClientRect()[ name ];
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function raf() {
		if ( timerId ) {
			window.requestAnimationFrame( raf );
			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		// Go to the end state if fx are off or if document is hidden
		if ( jQuery.fx.off || document.hidden ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.requestAnimationFrame ?
				window.requestAnimationFrame( raf ) :
				window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		if ( window.cancelAnimationFrame ) {
			window.cancelAnimationFrame( timerId );
		} else {
			window.clearInterval( timerId );
		}

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnothtmlwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( jQuery.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win, rect, doc,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			// Make sure element is not hidden (display: none)
			if ( rect.width || rect.height ) {
				doc = elem.ownerDocument;
				win = getWindow( doc );
				docElem = doc.documentElement;

				return {
					top: rect.top + win.pageYOffset - docElem.clientTop,
					left: rect.left + win.pageXOffset - docElem.clientLeft
				};
			}

			// Return zeros for disconnected and hidden elements (gh-2310)
			return rect;
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	jQuery.parseJSON = JSON.parse;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}





	return jQuery;
	} );


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["Handlebars"] = __webpack_require__(6);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// Create a simple path alias to allow browserify to resolve
	// the runtime on a supported path.
	module.exports = __webpack_require__(7)['default'];


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _handlebarsBase = __webpack_require__(8);

	var base = _interopRequireWildcard(_handlebarsBase);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _handlebarsSafeString = __webpack_require__(22);

	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

	var _handlebarsException = __webpack_require__(10);

	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

	var _handlebarsUtils = __webpack_require__(9);

	var Utils = _interopRequireWildcard(_handlebarsUtils);

	var _handlebarsRuntime = __webpack_require__(23);

	var runtime = _interopRequireWildcard(_handlebarsRuntime);

	var _handlebarsNoConflict = __webpack_require__(24);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();

	  Utils.extend(hb, base);
	  hb.SafeString = _handlebarsSafeString2['default'];
	  hb.Exception = _handlebarsException2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;

	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OEJBQXNCLG1CQUFtQjs7SUFBN0IsSUFBSTs7Ozs7b0NBSU8sMEJBQTBCOzs7O21DQUMzQix3QkFBd0I7Ozs7K0JBQ3ZCLG9CQUFvQjs7SUFBL0IsS0FBSzs7aUNBQ1Esc0JBQXNCOztJQUFuQyxPQUFPOztvQ0FFSSwwQkFBMEI7Ozs7O0FBR2pELFNBQVMsTUFBTSxHQUFHO0FBQ2hCLE1BQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7O0FBRTFDLE9BQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQyxVQUFVLG9DQUFhLENBQUM7QUFDM0IsSUFBRSxDQUFDLFNBQVMsbUNBQVksQ0FBQztBQUN6QixJQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDOztBQUU3QyxJQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNoQixJQUFFLENBQUMsUUFBUSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQzNCLFdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDbkMsQ0FBQzs7QUFFRixTQUFPLEVBQUUsQ0FBQztDQUNYOztBQUVELElBQUksSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUVyQixrQ0FBVyxJQUFJLENBQUMsQ0FBQzs7QUFFakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7cUJBRVIsSUFBSSIsImZpbGUiOiJoYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iXX0=


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utils = __webpack_require__(9);

	var _exception = __webpack_require__(10);

	var _exception2 = _interopRequireDefault(_exception);

	var _helpers = __webpack_require__(11);

	var _decorators = __webpack_require__(19);

	var _logger = __webpack_require__(21);

	var _logger2 = _interopRequireDefault(_logger);

	var VERSION = '4.0.5';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 7;

	exports.COMPILER_REVISION = COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1',
	  7: '>= 4.0.0'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials, decorators) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};
	  this.decorators = decorators || {};

	  _helpers.registerDefaultHelpers(this);
	  _decorators.registerDefaultDecorators(this);
	}

	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,

	  logger: _logger2['default'],
	  log: _logger2['default'].log,

	  registerHelper: function registerHelper(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple helpers');
	      }
	      _utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },

	  registerPartial: function registerPartial(name, partial) {
	    if (_utils.toString.call(name) === objectType) {
	      _utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  },

	  registerDecorator: function registerDecorator(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple decorators');
	      }
	      _utils.extend(this.decorators, name);
	    } else {
	      this.decorators[name] = fn;
	    }
	  },
	  unregisterDecorator: function unregisterDecorator(name) {
	    delete this.decorators[name];
	  }
	};

	var log = _logger2['default'].log;

	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cUJBQTRDLFNBQVM7O3lCQUMvQixhQUFhOzs7O3VCQUNFLFdBQVc7OzBCQUNSLGNBQWM7O3NCQUNuQyxVQUFVOzs7O0FBRXRCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQzs7QUFDeEIsSUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7OztBQUU1QixJQUFNLGdCQUFnQixHQUFHO0FBQzlCLEdBQUMsRUFBRSxhQUFhO0FBQ2hCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxVQUFVO0FBQ2IsR0FBQyxFQUFFLGtCQUFrQjtBQUNyQixHQUFDLEVBQUUsaUJBQWlCO0FBQ3BCLEdBQUMsRUFBRSxVQUFVO0NBQ2QsQ0FBQzs7O0FBRUYsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUM7O0FBRTlCLFNBQVMscUJBQXFCLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7QUFDbkUsTUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQzdCLE1BQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxJQUFJLEVBQUUsQ0FBQztBQUMvQixNQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7O0FBRW5DLGtDQUF1QixJQUFJLENBQUMsQ0FBQztBQUM3Qix3Q0FBMEIsSUFBSSxDQUFDLENBQUM7Q0FDakM7O0FBRUQscUJBQXFCLENBQUMsU0FBUyxHQUFHO0FBQ2hDLGFBQVcsRUFBRSxxQkFBcUI7O0FBRWxDLFFBQU0scUJBQVE7QUFDZCxLQUFHLEVBQUUsb0JBQU8sR0FBRzs7QUFFZixnQkFBYyxFQUFFLHdCQUFTLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDakMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFVBQUksRUFBRSxFQUFFO0FBQUUsY0FBTSwyQkFBYyx5Q0FBeUMsQ0FBQyxDQUFDO09BQUU7QUFDM0Usb0JBQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1QixNQUFNO0FBQ0wsVUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDekI7R0FDRjtBQUNELGtCQUFnQixFQUFFLDBCQUFTLElBQUksRUFBRTtBQUMvQixXQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDM0I7O0FBRUQsaUJBQWUsRUFBRSx5QkFBUyxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQ3ZDLFFBQUksZ0JBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUN0QyxvQkFBTyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzdCLE1BQU07QUFDTCxVQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsRUFBRTtBQUNsQyxjQUFNLHlFQUEwRCxJQUFJLG9CQUFpQixDQUFDO09BQ3ZGO0FBQ0QsVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7S0FDL0I7R0FDRjtBQUNELG1CQUFpQixFQUFFLDJCQUFTLElBQUksRUFBRTtBQUNoQyxXQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDNUI7O0FBRUQsbUJBQWlCLEVBQUUsMkJBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNwQyxRQUFJLGdCQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDdEMsVUFBSSxFQUFFLEVBQUU7QUFBRSxjQUFNLDJCQUFjLDRDQUE0QyxDQUFDLENBQUM7T0FBRTtBQUM5RSxvQkFBTyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQy9CLE1BQU07QUFDTCxVQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUM1QjtHQUNGO0FBQ0QscUJBQW1CLEVBQUUsNkJBQVMsSUFBSSxFQUFFO0FBQ2xDLFdBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUM5QjtDQUNGLENBQUM7O0FBRUssSUFBSSxHQUFHLEdBQUcsb0JBQU8sR0FBRyxDQUFDOzs7UUFFcEIsV0FBVztRQUFFLE1BQU0iLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmd9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdEhlbHBlcnN9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnN9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4wLjUnO1xuZXhwb3J0IGNvbnN0IENPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0IGNvbnN0IFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAnXG59O1xuXG5jb25zdCBvYmplY3RUeXBlID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcbiAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcbiAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG4gIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XG59XG5cbkhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGViYXJzRW52aXJvbm1lbnQsXG5cbiAgbG9nZ2VyOiBsb2dnZXIsXG4gIGxvZzogbG9nZ2VyLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgaGVscGVycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oYEF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIiR7bmFtZX1cIiBhcyB1bmRlZmluZWRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBsb2cgPSBsb2dnZXIubG9nO1xuXG5leHBvcnQge2NyZWF0ZUZyYW1lLCBsb2dnZXJ9O1xuIl19


/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;
	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;',
	  '=': '&#x3D;'
	};

	var badChars = /[&<>"'`=]/g,
	    possible = /[&<>"'`=]/;

	function escapeChar(chr) {
	  return escape[chr];
	}

	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }

	  return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	exports.isFunction = isFunction;

	/* eslint-enable func-style */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};

	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }

	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }

	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}

	function createFrame(object) {
	  var frame = extend({}, object);
	  frame._parent = object;
	  return frame;
	}

	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}

	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFNLE1BQU0sR0FBRztBQUNiLEtBQUcsRUFBRSxPQUFPO0FBQ1osS0FBRyxFQUFFLE1BQU07QUFDWCxLQUFHLEVBQUUsTUFBTTtBQUNYLEtBQUcsRUFBRSxRQUFRO0FBQ2IsS0FBRyxFQUFFLFFBQVE7QUFDYixLQUFHLEVBQUUsUUFBUTtBQUNiLEtBQUcsRUFBRSxRQUFRO0NBQ2QsQ0FBQzs7QUFFRixJQUFNLFFBQVEsR0FBRyxZQUFZO0lBQ3ZCLFFBQVEsR0FBRyxXQUFXLENBQUM7O0FBRTdCLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUN2QixTQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNwQjs7QUFFTSxTQUFTLE1BQU0sQ0FBQyxHQUFHLG9CQUFtQjtBQUMzQyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6QyxTQUFLLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUM1QixVQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDM0QsV0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUM5QjtLQUNGO0dBQ0Y7O0FBRUQsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7O0FBS2hELElBQUksVUFBVSxHQUFHLG9CQUFTLEtBQUssRUFBRTtBQUMvQixTQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztDQUNwQyxDQUFDOzs7QUFHRixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQixVQUlNLFVBQVUsR0FKaEIsVUFBVSxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQzNCLFdBQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssbUJBQW1CLENBQUM7R0FDcEYsQ0FBQztDQUNIO1FBQ08sVUFBVSxHQUFWLFVBQVU7Ozs7O0FBSVgsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sSUFBSSxVQUFTLEtBQUssRUFBRTtBQUN0RCxTQUFPLEFBQUMsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsR0FBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGdCQUFnQixHQUFHLEtBQUssQ0FBQztDQUNqRyxDQUFDOzs7OztBQUdLLFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDcEMsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoRCxRQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDdEIsYUFBTyxDQUFDLENBQUM7S0FDVjtHQUNGO0FBQ0QsU0FBTyxDQUFDLENBQUMsQ0FBQztDQUNYOztBQUdNLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ3ZDLE1BQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFOztBQUU5QixRQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzNCLGFBQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3hCLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3pCLGFBQU8sRUFBRSxDQUFDO0tBQ1gsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2xCLGFBQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQztLQUNwQjs7Ozs7QUFLRCxVQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztHQUN0Qjs7QUFFRCxNQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUFFLFdBQU8sTUFBTSxDQUFDO0dBQUU7QUFDOUMsU0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztDQUM3Qzs7QUFFTSxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDN0IsTUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFdBQU8sSUFBSSxDQUFDO0dBQ2IsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvQyxXQUFPLElBQUksQ0FBQztHQUNiLE1BQU07QUFDTCxXQUFPLEtBQUssQ0FBQztHQUNkO0NBQ0Y7O0FBRU0sU0FBUyxXQUFXLENBQUMsTUFBTSxFQUFFO0FBQ2xDLE1BQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsT0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDdkIsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFTSxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ3ZDLFFBQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRU0sU0FBUyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO0FBQ2pELFNBQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUEsR0FBSSxFQUFFLENBQUM7Q0FDcEQiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gICAgICBwb3NzaWJsZSA9IC9bJjw+XCInYD1dLztcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcihjaHIpIHtcbiAgcmV0dXJuIGVzY2FwZVtjaHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iai8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydCB7aXNGdW5jdGlvbn07XG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcbn07XG5cbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkgeyByZXR1cm4gc3RyaW5nOyB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICBsZXQgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG4gIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xufVxuIl19


/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      column = undefined;
	  if (loc) {
	    line = loc.start.line;
	    column = loc.start.column;

	    message += ' - ' + line + ':' + column;
	  }

	  var tmp = Error.prototype.constructor.call(this, message);

	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }

	  /* istanbul ignore else */
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }

	  try {
	    if (loc) {
	      this.lineNumber = line;

	      // Work around issue under safari where we can't directly set the column value
	      /* istanbul ignore next */
	      if (Object.defineProperty) {
	        Object.defineProperty(this, 'column', { value: column });
	      } else {
	        this.column = column;
	      }
	    }
	  } catch (nop) {
	    /* Ignore if the browser is very particular */
	  }
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsSUFBTSxVQUFVLEdBQUcsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQzs7QUFFbkcsU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNoQyxNQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUc7TUFDdEIsSUFBSSxZQUFBO01BQ0osTUFBTSxZQUFBLENBQUM7QUFDWCxNQUFJLEdBQUcsRUFBRTtBQUNQLFFBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN0QixVQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7O0FBRTFCLFdBQU8sSUFBSSxLQUFLLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7R0FDeEM7O0FBRUQsTUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQzs7O0FBRzFELE9BQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO0FBQ2hELFFBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7R0FDOUM7OztBQUdELE1BQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFO0FBQzNCLFNBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7R0FDMUM7O0FBRUQsTUFBSTtBQUNGLFFBQUksR0FBRyxFQUFFO0FBQ1AsVUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7Ozs7QUFJdkIsVUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFO0FBQ3pCLGNBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO09BQ3hELE1BQU07QUFDTCxZQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztPQUN0QjtLQUNGO0dBQ0YsQ0FBQyxPQUFPLEdBQUcsRUFBRTs7R0FFYjtDQUNGOztBQUVELFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQzs7cUJBRW5CLFNBQVMiLCJmaWxlIjoiZXhjZXB0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBlcnJvclByb3BzID0gWydkZXNjcmlwdGlvbicsICdmaWxlTmFtZScsICdsaW5lTnVtYmVyJywgJ21lc3NhZ2UnLCAnbmFtZScsICdudW1iZXInLCAnc3RhY2snXTtcblxuZnVuY3Rpb24gRXhjZXB0aW9uKG1lc3NhZ2UsIG5vZGUpIHtcbiAgbGV0IGxvYyA9IG5vZGUgJiYgbm9kZS5sb2MsXG4gICAgICBsaW5lLFxuICAgICAgY29sdW1uO1xuICBpZiAobG9jKSB7XG4gICAgbGluZSA9IGxvYy5zdGFydC5saW5lO1xuICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XG5cbiAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcbiAgfVxuXG4gIGxldCB0bXAgPSBFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICAvLyBVbmZvcnR1bmF0ZWx5IGVycm9ycyBhcmUgbm90IGVudW1lcmFibGUgaW4gQ2hyb21lIChhdCBsZWFzdCksIHNvIGBmb3IgcHJvcCBpbiB0bXBgIGRvZXNuJ3Qgd29yay5cbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZXJyb3JQcm9wcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAobG9jKSB7XG4gICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lO1xuXG4gICAgICAvLyBXb3JrIGFyb3VuZCBpc3N1ZSB1bmRlciBzYWZhcmkgd2hlcmUgd2UgY2FuJ3QgZGlyZWN0bHkgc2V0IHRoZSBjb2x1bW4gdmFsdWVcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29sdW1uJywge3ZhbHVlOiBjb2x1bW59KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAobm9wKSB7XG4gICAgLyogSWdub3JlIGlmIHRoZSBicm93c2VyIGlzIHZlcnkgcGFydGljdWxhciAqL1xuICB9XG59XG5cbkV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcblxuZXhwb3J0IGRlZmF1bHQgRXhjZXB0aW9uO1xuIl19


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _helpersBlockHelperMissing = __webpack_require__(12);

	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

	var _helpersEach = __webpack_require__(13);

	var _helpersEach2 = _interopRequireDefault(_helpersEach);

	var _helpersHelperMissing = __webpack_require__(14);

	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

	var _helpersIf = __webpack_require__(15);

	var _helpersIf2 = _interopRequireDefault(_helpersIf);

	var _helpersLog = __webpack_require__(16);

	var _helpersLog2 = _interopRequireDefault(_helpersLog);

	var _helpersLookup = __webpack_require__(17);

	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

	var _helpersWith = __webpack_require__(18);

	var _helpersWith2 = _interopRequireDefault(_helpersWith);

	function registerDefaultHelpers(instance) {
	  _helpersBlockHelperMissing2['default'](instance);
	  _helpersEach2['default'](instance);
	  _helpersHelperMissing2['default'](instance);
	  _helpersIf2['default'](instance);
	  _helpersLog2['default'](instance);
	  _helpersLookup2['default'](instance);
	  _helpersWith2['default'](instance);
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7eUNBQXVDLGdDQUFnQzs7OzsyQkFDOUMsZ0JBQWdCOzs7O29DQUNQLDBCQUEwQjs7Ozt5QkFDckMsY0FBYzs7OzswQkFDYixlQUFlOzs7OzZCQUNaLGtCQUFrQjs7OzsyQkFDcEIsZ0JBQWdCOzs7O0FBRWxDLFNBQVMsc0JBQXNCLENBQUMsUUFBUSxFQUFFO0FBQy9DLHlDQUEyQixRQUFRLENBQUMsQ0FBQztBQUNyQywyQkFBYSxRQUFRLENBQUMsQ0FBQztBQUN2QixvQ0FBc0IsUUFBUSxDQUFDLENBQUM7QUFDaEMseUJBQVcsUUFBUSxDQUFDLENBQUM7QUFDckIsMEJBQVksUUFBUSxDQUFDLENBQUM7QUFDdEIsNkJBQWUsUUFBUSxDQUFDLENBQUM7QUFDekIsMkJBQWEsUUFBUSxDQUFDLENBQUM7Q0FDeEIiLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZWdpc3RlckJsb2NrSGVscGVyTWlzc2luZyBmcm9tICcuL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcnO1xuaW1wb3J0IHJlZ2lzdGVyRWFjaCBmcm9tICcuL2hlbHBlcnMvZWFjaCc7XG5pbXBvcnQgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJJZiBmcm9tICcuL2hlbHBlcnMvaWYnO1xuaW1wb3J0IHJlZ2lzdGVyTG9nIGZyb20gJy4vaGVscGVycy9sb2cnO1xuaW1wb3J0IHJlZ2lzdGVyTG9va3VwIGZyb20gJy4vaGVscGVycy9sb29rdXAnO1xuaW1wb3J0IHJlZ2lzdGVyV2l0aCBmcm9tICcuL2hlbHBlcnMvd2l0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XG4gIHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJFYWNoKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJJZihpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyTG9nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb29rdXAoaW5zdGFuY2UpO1xuICByZWdpc3RlcldpdGgoaW5zdGFuY2UpO1xufVxuIl19


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(9);

	exports['default'] = function (instance) {
	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;

	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (_utils.isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }

	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }

	      return fn(context, options);
	    }
	  });
	};

	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBc0QsVUFBVTs7cUJBRWpELFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3ZFLFFBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPO1FBQ3pCLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVwQixRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsYUFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakIsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtBQUMvQyxhQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QixNQUFNLElBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUMzQixVQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLFlBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNmLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCOztBQUVELGVBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2hELE1BQU07QUFDTCxlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN0QjtLQUNGLE1BQU07QUFDTCxVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLElBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdFLGVBQU8sR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztPQUN4Qjs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0I7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJibG9jay1oZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utils = __webpack_require__(9);

	var _exception = __webpack_require__(10);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _exception2['default']('Must pass iterator to #each');
	    }

	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;

	    if (options.data && options.ids) {
	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }

	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    if (options.data) {
	      data = _utils.createFrame(options.data);
	    }

	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;

	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }

	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }

	    if (context && typeof context === 'object') {
	      if (_utils.isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          if (i in context) {
	            execIteration(i, i, i === context.length - 1);
	          }
	        }
	      } else {
	        var priorKey = undefined;

	        for (var key in context) {
	          if (context.hasOwnProperty(key)) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey !== undefined) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          }
	        }
	        if (priorKey !== undefined) {
	          execIteration(priorKey, i - 1, true);
	        }
	      }
	    }

	    if (i === 0) {
	      ret = inverse(this);
	    }

	    return ret;
	  });
	};

	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQUErRSxVQUFVOzt5QkFDbkUsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksQ0FBQyxPQUFPLEVBQUU7QUFDWixZQUFNLDJCQUFjLDZCQUE2QixDQUFDLENBQUM7S0FDcEQ7O0FBRUQsUUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFDZixPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU87UUFDekIsQ0FBQyxHQUFHLENBQUM7UUFDTCxHQUFHLEdBQUcsRUFBRTtRQUNSLElBQUksWUFBQTtRQUNKLFdBQVcsWUFBQSxDQUFDOztBQUVoQixRQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixpQkFBVyxHQUFHLHlCQUFrQixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ2pGOztBQUVELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFBRSxhQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOztBQUUxRCxRQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDaEIsVUFBSSxHQUFHLG1CQUFZLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNsQzs7QUFFRCxhQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUN6QyxVQUFJLElBQUksRUFBRTtBQUNSLFlBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2pCLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUN6QixZQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7O0FBRW5CLFlBQUksV0FBVyxFQUFFO0FBQ2YsY0FBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQ3hDO09BQ0Y7O0FBRUQsU0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzdCLFlBQUksRUFBRSxJQUFJO0FBQ1YsbUJBQVcsRUFBRSxtQkFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDL0UsQ0FBQyxDQUFDO0tBQ0o7O0FBRUQsUUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzFDLFVBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNwQixhQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxjQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDaEIseUJBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQy9DO1NBQ0Y7T0FDRixNQUFNO0FBQ0wsWUFBSSxRQUFRLFlBQUEsQ0FBQzs7QUFFYixhQUFLLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtBQUN2QixjQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Ozs7QUFJL0IsZ0JBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQiwyQkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDaEM7QUFDRCxvQkFBUSxHQUFHLEdBQUcsQ0FBQztBQUNmLGFBQUMsRUFBRSxDQUFDO1dBQ0w7U0FDRjtBQUNELFlBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQix1QkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3RDO09BQ0Y7S0FDRjs7QUFFRCxRQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDWCxTQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCOztBQUVELFdBQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiZWFjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNBcnJheSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICAgIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICByZXQgPSAnJyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dFBhdGg7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICBjb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7IGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7IH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmtleSA9IGZpZWxkO1xuICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcbiAgICAgICAgZGF0YS5sYXN0ID0gISFsYXN0O1xuXG4gICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbZmllbGRdLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcbiAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAgIC8vIGFuIGl0ZXJtZWRpYXRlIGtleXMgYXJyYXkuXG4gICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmlvcktleSA9IGtleTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiJdfQ==


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _exception = __webpack_require__(10);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} construct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });
	};

	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt5QkFBc0IsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsaUNBQWdDO0FBQ3ZFLFFBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7O0FBRTFCLGFBQU8sU0FBUyxDQUFDO0tBQ2xCLE1BQU07O0FBRUwsWUFBTSwyQkFBYyxtQkFBbUIsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDdkY7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJoZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbigvKiBbYXJncywgXW9wdGlvbnMgKi8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH0pO1xufVxuIl19


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(9);

	exports['default'] = function (instance) {
	  instance.registerHelper('if', function (conditional, options) {
	    if (_utils.isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }

	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });

	  instance.registerHelper('unless', function (conditional, options) {
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });
	};

	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBa0MsVUFBVTs7cUJBRTdCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVMsV0FBVyxFQUFFLE9BQU8sRUFBRTtBQUMzRCxRQUFJLGtCQUFXLFdBQVcsQ0FBQyxFQUFFO0FBQUUsaUJBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQUU7Ozs7O0FBS3RFLFFBQUksQUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxJQUFLLGVBQVEsV0FBVyxDQUFDLEVBQUU7QUFDdkUsYUFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7R0FDRixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxXQUFXLEVBQUUsT0FBTyxFQUFFO0FBQy9ELFdBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztHQUN2SCxDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJpZi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNFbXB0eSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaWYnLCBmdW5jdGlvbihjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkgeyBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7IH1cblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG4gICAgaWYgKCghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCkgfHwgaXNFbXB0eShjb25kaXRpb25hbCkpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnNbJ2lmJ10uY2FsbCh0aGlzLCBjb25kaXRpb25hbCwge2ZuOiBvcHRpb25zLmludmVyc2UsIGludmVyc2U6IG9wdGlvbnMuZm4sIGhhc2g6IG9wdGlvbnMuaGFzaH0pO1xuICB9KTtcbn1cbiJdfQ==


/***/ },
/* 16 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('log', function () /* message, options */{
	    var args = [undefined],
	        options = arguments[arguments.length - 1];
	    for (var i = 0; i < arguments.length - 1; i++) {
	      args.push(arguments[i]);
	    }

	    var level = 1;
	    if (options.hash.level != null) {
	      level = options.hash.level;
	    } else if (options.data && options.data.level != null) {
	      level = options.data.level;
	    }
	    args[0] = level;

	    instance.log.apply(instance, args);
	  });
	};

	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsa0NBQWlDO0FBQzlELFFBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ2xCLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM5QyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0MsVUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7QUFFRCxRQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtBQUM5QixXQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDNUIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JELFdBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUM1QjtBQUNELFFBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRWhCLFlBQVEsQ0FBQyxHQUFHLE1BQUEsQ0FBWixRQUFRLEVBQVMsSUFBSSxDQUFDLENBQUM7R0FDeEIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIGxldCBsZXZlbCA9IDE7XG4gICAgaWYgKG9wdGlvbnMuaGFzaC5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuaGFzaC5sZXZlbDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGEubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmRhdGEubGV2ZWw7XG4gICAgfVxuICAgIGFyZ3NbMF0gPSBsZXZlbDtcblxuICAgIGluc3RhbmNlLmxvZyguLi4gYXJncyk7XG4gIH0pO1xufVxuIl19


/***/ },
/* 17 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('lookup', function (obj, field) {
	    return obj && obj[field];
	  });
	};

	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQ3JELFdBQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJsb29rdXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24ob2JqLCBmaWVsZCkge1xuICAgIHJldHVybiBvYmogJiYgb2JqW2ZpZWxkXTtcbiAgfSk7XG59XG4iXX0=


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(9);

	exports['default'] = function (instance) {
	  instance.registerHelper('with', function (context, options) {
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    var fn = options.fn;

	    if (!_utils.isEmpty(context)) {
	      var data = options.data;
	      if (options.data && options.ids) {
	        data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
	      }

	      return fn(context, {
	        data: data,
	        blockParams: _utils.blockParams([context], [data && data.contextPath])
	      });
	    } else {
	      return options.inverse(this);
	    }
	  });
	};

	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUErRSxVQUFVOztxQkFFMUUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFBRSxhQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOztBQUUxRCxRQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVwQixRQUFJLENBQUMsZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNyQixVQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFVBQUksT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO0FBQy9CLFlBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ2hGOztBQUVELGFBQU8sRUFBRSxDQUFDLE9BQU8sRUFBRTtBQUNqQixZQUFJLEVBQUUsSUFBSTtBQUNWLG1CQUFXLEVBQUUsbUJBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7T0FDaEUsQ0FBQyxDQUFDO0tBQ0osTUFBTTtBQUNMLGFBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QjtHQUNGLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6IndpdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _decoratorsInline = __webpack_require__(20);

	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

	function registerDefaultDecorators(instance) {
	  _decoratorsInline2['default'](instance);
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0NBQTJCLHFCQUFxQjs7OztBQUV6QyxTQUFTLHlCQUF5QixDQUFDLFFBQVEsRUFBRTtBQUNsRCxnQ0FBZSxRQUFRLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJkZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG5cbiJdfQ==


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(9);

	exports['default'] = function (instance) {
	  instance.registerDecorator('inline', function (fn, props, container, options) {
	    var ret = fn;
	    if (!props.partials) {
	      props.partials = {};
	      ret = function (context, options) {
	        // Create a new partials stack frame prior to exec.
	        var original = container.partials;
	        container.partials = _utils.extend({}, original, props.partials);
	        var ret = fn(context, options);
	        container.partials = original;
	        return ret;
	      };
	    }

	    props.partials[options.args[0]] = options.fn;

	    return ret;
	  });
	};

	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQXFCLFVBQVU7O3FCQUVoQixVQUFTLFFBQVEsRUFBRTtBQUNoQyxVQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQzNFLFFBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25CLFdBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFNBQUcsR0FBRyxVQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUU7O0FBRS9CLFlBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbEMsaUJBQVMsQ0FBQyxRQUFRLEdBQUcsY0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRCxZQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLGlCQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QixlQUFPLEdBQUcsQ0FBQztPQUNaLENBQUM7S0FDSDs7QUFFRCxTQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUU3QyxXQUFPLEdBQUcsQ0FBQztHQUNaLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlubGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGxldCByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFydGlhbHMgc3RhY2sgZnJhbWUgcHJpb3IgdG8gZXhlYy5cbiAgICAgICAgbGV0IG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBleHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG4gICAgICAgIGxldCByZXQgPSBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iXX0=


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(9);

	var logger = {
	  methodMap: ['debug', 'info', 'warn', 'error'],
	  level: 'info',

	  // Maps a given level value to the `methodMap` indexes above.
	  lookupLevel: function lookupLevel(level) {
	    if (typeof level === 'string') {
	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
	      if (levelMap >= 0) {
	        level = levelMap;
	      } else {
	        level = parseInt(level, 10);
	      }
	    }

	    return level;
	  },

	  // Can be overridden in the host environment
	  log: function log(level) {
	    level = logger.lookupLevel(level);

	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
	      var method = logger.methodMap[level];
	      if (!console[method]) {
	        // eslint-disable-line no-console
	        method = 'log';
	      }

	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        message[_key - 1] = arguments[_key];
	      }

	      console[method].apply(console, message); // eslint-disable-line no-console
	    }
	  }
	};

	exports['default'] = logger;
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFzQixTQUFTOztBQUUvQixJQUFJLE1BQU0sR0FBRztBQUNYLFdBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztBQUM3QyxPQUFLLEVBQUUsTUFBTTs7O0FBR2IsYUFBVyxFQUFFLHFCQUFTLEtBQUssRUFBRTtBQUMzQixRQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUM3QixVQUFJLFFBQVEsR0FBRyxlQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDOUQsVUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ2pCLGFBQUssR0FBRyxRQUFRLENBQUM7T0FDbEIsTUFBTTtBQUNMLGFBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO09BQzdCO0tBQ0Y7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZDs7O0FBR0QsS0FBRyxFQUFFLGFBQVMsS0FBSyxFQUFjO0FBQy9CLFNBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVsQyxRQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7QUFDL0UsVUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxVQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFOztBQUNwQixjQUFNLEdBQUcsS0FBSyxDQUFDO09BQ2hCOzt3Q0FQbUIsT0FBTztBQUFQLGVBQU87OztBQVEzQixhQUFPLENBQUMsTUFBTSxPQUFDLENBQWYsT0FBTyxFQUFZLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0dBQ0Y7Q0FDRixDQUFDOztxQkFFYSxNQUFNIiwiZmlsZSI6ImxvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aW5kZXhPZn0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7ICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIG1ldGhvZCA9ICdsb2cnO1xuICAgICAgfVxuICAgICAgY29uc29sZVttZXRob2RdKC4uLm1lc3NhZ2UpOyAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbiJdfQ==


/***/ },
/* 22 */
/***/ function(module, exports) {

	// Build out our basic SafeString type
	'use strict';

	exports.__esModule = true;
	function SafeString(string) {
	  this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Q0FDdEI7O0FBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBVztBQUN2RSxTQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ3pCLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoic2FmZS1zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiJdfQ==


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _utils = __webpack_require__(9);

	var Utils = _interopRequireWildcard(_utils);

	var _exception = __webpack_require__(10);

	var _exception2 = _interopRequireDefault(_exception);

	var _base = __webpack_require__(8);

	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _base.COMPILER_REVISION;

	  if (compilerRevision !== currentRevision) {
	    if (compilerRevision < currentRevision) {
	      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
	          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
	      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	    } else {
	      // Use the embedded version info since the runtime doesn't know about this revision yet
	      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	    }
	  }
	}

	function template(templateSpec, env) {
	  /* istanbul ignore next */
	  if (!env) {
	    throw new _exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }

	  templateSpec.main.decorator = templateSpec.main_d;

	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as psuedo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);

	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	      if (options.ids) {
	        options.ids[0] = true;
	      }
	    }

	    partial = env.VM.resolvePartial.call(this, partial, context, options);
	    var result = env.VM.invokePartial.call(this, partial, context, options);

	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, options);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }

	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }

	  // Just add water
	  var container = {
	    strict: function strict(obj, name) {
	      if (!(name in obj)) {
	        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },

	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,

	    fn: function fn(i) {
	      var ret = templateSpec[i];
	      ret.decorator = templateSpec[i + '_d'];
	      return ret;
	    },

	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },

	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    merge: function merge(param, common) {
	      var obj = param || common;

	      if (param && common && param !== common) {
	        obj = Utils.extend({}, common, param);
	      }

	      return obj;
	    },

	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };

	  function ret(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var data = options.data;

	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      if (options.depths) {
	        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
	      } else {
	        depths = [context];
	      }
	    }

	    function main(context /*, options*/) {
	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
	    }
	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
	    return main(context, options);
	  }
	  ret.isTop = true;

	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = container.merge(options.helpers, env.helpers);

	      if (templateSpec.usePartial) {
	        container.partials = container.merge(options.partials, env.partials);
	      }
	      if (templateSpec.usePartial || templateSpec.useDecorators) {
	        container.decorators = container.merge(options.decorators, env.decorators);
	      }
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	      container.decorators = options.decorators;
	    }
	  };

	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _exception2['default']('must pass parent depths');
	    }

	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var currentDepths = depths;
	    if (depths && context != depths[0]) {
	      currentDepths = [context].concat(depths);
	    }

	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
	  }

	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}

	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    if (options.name === '@partial-block') {
	      var data = options.data;
	      while (data['partial-block'] === noop) {
	        data = data._parent;
	      }
	      partial = data['partial-block'];
	      data['partial-block'] = noop;
	    } else {
	      partial = options.partials[options.name];
	    }
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}

	function invokePartial(partial, context, options) {
	  options.partial = true;
	  if (options.ids) {
	    options.data.contextPath = options.ids[0] || options.data.contextPath;
	  }

	  var partialBlock = undefined;
	  if (options.fn && options.fn !== noop) {
	    options.data = _base.createFrame(options.data);
	    partialBlock = options.data['partial-block'] = options.fn;

	    if (partialBlock.partials) {
	      options.partials = Utils.extend({}, options.partials, partialBlock.partials);
	    }
	  }

	  if (partial === undefined && partialBlock) {
	    partial = partialBlock;
	  }

	  if (partial === undefined) {
	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}

	function noop() {
	  return '';
	}

	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _base.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}

	function executeDecorators(fn, prog, container, depths, data, blockParams) {
	  if (fn.decorator) {
	    var props = {};
	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
	    Utils.extend(prog, props);
	  }
	  return prog;
	}
	//# sourceMappingURL=data:application/json;base64,


/***/ },
/* 24 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	    return Handlebars;
	  };
	};

	module.exports = exports['default'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O3FCQUNlLFVBQVMsVUFBVSxFQUFFOztBQUVsQyxNQUFJLElBQUksR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLEdBQUcsTUFBTSxHQUFHLE1BQU07TUFDdEQsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7O0FBRWxDLFlBQVUsQ0FBQyxVQUFVLEdBQUcsWUFBVztBQUNqQyxRQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO0FBQ2xDLFVBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO0tBQy9CO0FBQ0QsV0FBTyxVQUFVLENBQUM7R0FDbkIsQ0FBQztDQUNIIiwiZmlsZSI6Im5vLWNvbmZsaWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIHdpbmRvdyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oSGFuZGxlYmFycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBsZXQgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxuICAgICAgJEhhbmRsZWJhcnMgPSByb290LkhhbmRsZWJhcnM7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcbiAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xuICAgIH1cbiAgICByZXR1cm4gSGFuZGxlYmFycztcbiAgfTtcbn1cbiJdfQ==

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(26)(__webpack_require__(27))

/***/ },
/* 26 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(src) {
		if (typeof execScript !== "undefined")
			execScript(src);
		else
			eval.call(null, src);
	}


/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = "/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n\n(function(root, factory)\n{\n    var umdEnabled = true;\n    if (root && typeof(root.umd) != \"undefined\") {\n        umdEnabled = root.umd;\n    }\n\n    if (umdEnabled && typeof exports === 'object')\n    {\n        // common js\n        module.exports = factory(require('jquery'), require('handlebars'), require('bootstrap'));\n    }\n    else if (umdEnabled && typeof define === 'function' && define.amd)\n    {\n        // amd\n        define(\"alpaca\", [\"jquery\",\"handlebars\",\"bootstrap\"], factory);\n    }\n    else\n    {\n        // global\n        root[\"Alpaca\"] = factory(root[\"jQuery\"], root[\"Handlebars\"], root[\"Bootstrap\"]);\n    }\n\n}(this, function ($, Handlebars, Bootstrap) {\n\n    //jQuery = $;\n\n    \n        this[\"HandlebarsPrecompiled\"] = this[\"HandlebarsPrecompiled\"] || {};\nthis[\"HandlebarsPrecompiled\"][\"web-display\"] = this[\"HandlebarsPrecompiled\"][\"web-display\"] || {};\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"container-array-item\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n        \";\n  stack1 = ((helper = (helper = helpers.itemField || (depth0 != null ? depth0.itemField : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.itemField) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"container-array\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"\\n            \";\n  stack1 = ((helper = (helper = helpers.item || (depth0 != null ? depth0.item : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"item\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.item) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"container-object-item\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n        \";\n  stack1 = ((helper = (helper = helpers.itemField || (depth0 != null ? depth0.itemField : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.itemField) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"container-object\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"\\n            \";\n  stack1 = ((helper = (helper = helpers.item || (depth0 != null ? depth0.item : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"item\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.item) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"container-table-item\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <tr>\\n        \"\n    + ((stack1 = (helpers.itemField || (depth0 && depth0.itemField) || helpers.helperMissing).call(depth0 != null ? depth0 : {},\"td\",{\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </tr>\\n\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"container-table\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"                    <th>\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.value : depth0)) != null ? stack1.title : stack1), depth0))\n    + \"</th>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"\\n                \"\n    + ((stack1 = (helpers.item || (depth0 && depth0.item) || helpers.helperMissing).call(depth0 != null ? depth0 : {},\"tr\",{\"name\":\"item\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n        \";\n  stack1 = ((helper = (helper = helpers.arrayToolbar || (depth0 != null ? depth0.arrayToolbar : depth0)) != null ? helper : alias2),(options={\"name\":\"arrayToolbar\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.arrayToolbar) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n        <table>\\n\\n            <!-- table headers -->\\n            <thead>\\n                <tr>\\n\"\n    + ((stack1 = (helpers.eachProperty || (depth0 && depth0.eachProperty) || alias2).call(alias1,((stack1 = ((stack1 = (depth0 != null ? depth0.schema : depth0)) != null ? stack1.items : stack1)) != null ? stack1.properties : stack1),{\"name\":\"eachProperty\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                </tr>\\n            </thead>\\n\\n            <!-- table body -->\\n            <tbody>\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            </tbody>\\n\\n        </table>\\n\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"container-tablerow-item\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <td>\\n        \";\n  stack1 = ((helper = (helper = helpers.itemField || (depth0 != null ? depth0.itemField : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.itemField) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n    </td>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"container-tablerow\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"            \";\n  stack1 = ((helper = (helper = helpers.item || (depth0 != null ? depth0.item : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"item\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.item) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-merge-up\\\">\\n\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"container\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <legend class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" alpaca-container-label\\\">\"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</legend>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1), depth0));\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <p class=\\\"alpaca-helper \"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n            <i class=\\\"alpaca-icon-helper\\\"></i>\\n            \"\n    + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : \"\")\n    + \"\\n        </p>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1), depth0));\n},\"8\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        \";\n  stack1 = ((helper = (helper = helpers.container || (depth0 != null ? depth0.container : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"container\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.container) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-any\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\"\n    + ((stack1 = (helpers.str || (depth0 && depth0.str) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.data : depth0),{\"name\":\"str\",\"hash\":{},\"data\":data})) != null ? stack1 : \"\")\n    + \"</div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-checkbox\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\"\n    + ((stack1 = (helpers.str || (depth0 && depth0.str) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.data : depth0),{\"name\":\"str\",\"hash\":{},\"data\":data})) != null ? stack1 : \"\")\n    + \"</div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-hidden\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-image\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-image-display\\\">\\n        <img id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"-image\\\" src=\\\"\"\n    + alias4(((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"data\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-password\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\"\n    + ((stack1 = (helpers.disguise || (depth0 && depth0.disguise) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.data : depth0),\"&bull;\",{\"name\":\"disguise\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"</div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-radio\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.value : depth0),(depths[1] != null ? depths[1].data : depths[1]),{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(2, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return \"                \"\n    + ((stack1 = ((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"text\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.selectOptions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"    </div>\\n\\n</script>\\n\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-select\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n        \"\n    + container.escapeExpression(((helper = (helper = helpers.displayableText || (depth0 != null ? depth0.displayableText : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"displayableText\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\n    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-text\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\"\n    + ((stack1 = ((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"data\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-textarea\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <p>\\n        \"\n    + ((stack1 = ((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"data\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\n    </p>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control-url\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"target=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.anchorTarget : stack1), depth0))\n    + \"\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.anchorTitle : stack1), depth0));\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return container.escapeExpression(((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"data\",\"hash\":{},\"data\":data}) : helper)));\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"            \"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.anchorTitle : stack1), depth0))\n    + \"\\n\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"            \"\n    + container.escapeExpression(((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"data\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-control-url-anchor-wrapper\\\">\\n        <a href=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"data\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.anchorTarget : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" title=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.anchorTitle : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.program(5, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.anchorTitle : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.program(9, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"        </a>\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"control\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"        <label class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" alpaca-control-label\\\" for=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</label>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1), depth0));\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <p class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n            <i class=\\\"info-sign\\\"></i>\\n            \"\n    + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : \"\")\n    + \"\\n        </p>\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1), depth0));\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        \";\n  stack1 = ((helper = (helper = helpers.control || (depth0 != null ? depth0.control : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"control\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.control) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-display\"][\"form\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.buttons : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"            <button data-key=\\\"\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || alias2).call(alias1,(depth0 != null ? depth0.type : depth0),\"submit\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || alias2).call(alias1,(depth0 != null ? depth0.type : depth0),\"reset\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" class=\\\"alpaca-form-button alpaca-form-button-\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \" \"\n    + alias4(((helper = (helper = helpers.styles || (depth0 != null ? depth0.styles : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"styles\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.value : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.attributes : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(11, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\"\n    + ((stack1 = ((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</button>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    return \"type=\\\"submit\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    return \"type=\\\"reset\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \" \"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <form role=\\\"form\\\">\\n\\n        \";\n  stack1 = ((helper = (helper = helpers.formItems || (depth0 != null ? depth0.formItems : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"formItems\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.formItems) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n        <div class=\\\"alpaca-form-buttons-container\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.buttons : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"        </div>\\n\\n    </form>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"] = this[\"HandlebarsPrecompiled\"][\"web-edit\"] || {};\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-array-actionbar\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=container.escapeExpression, alias2=depth0 != null ? depth0 : {};\n\n  return \"        <button class=\\\"alpaca-array-actionbar-action \"\n    + alias1(container.lambda(((stack1 = ((stack1 = (depths[1] != null ? depths[1].view : depths[1])) != null ? stack1.styles : stack1)) != null ? stack1.smallButton : stack1), depth0))\n    + \"\\\" data-alpaca-array-actionbar-action=\\\"\"\n    + alias1(((helper = (helper = helpers.action || (depth0 != null ? depth0.action : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias2,{\"name\":\"action\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias2,(depth0 != null ? depth0.iconClass : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            \"\n    + ((stack1 = helpers[\"if\"].call(alias2,(depth0 != null ? depth0.label : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        </button>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    return \"            <i class=\\\"\"\n    + container.escapeExpression(container.lambda((depth0 != null ? depth0.iconClass : depth0), depth0))\n    + \"\\\"></i>\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return ((stack1 = ((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\");\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-array-actionbar alpaca-array-actionbar-\"\n    + alias4(((helper = (helper = helpers.actionbarStyle || (depth0 != null ? depth0.actionbarStyle : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"actionbarStyle\",\"hash\":{},\"data\":data}) : helper)))\n    + \" btn-group\\\" data-alpaca-array-actionbar-parent-field-id=\\\"\"\n    + alias4(((helper = (helper = helpers.parentFieldId || (depth0 != null ? depth0.parentFieldId : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"parentFieldId\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" data-alpaca-array-actionbar-field-id=\\\"\"\n    + alias4(((helper = (helper = helpers.fieldId || (depth0 != null ? depth0.fieldId : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"fieldId\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" data-alpaca-array-actionbar-item-index=\\\"\"\n    + alias4(((helper = (helper = helpers.itemIndex || (depth0 != null ? depth0.itemIndex : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"itemIndex\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.actions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"    </div>\\n\\n</script>\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-array-item\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=helpers.blockHelperMissing, buffer = \n  \"        <div class=\\\"pull-left\\\">\\n            \";\n  stack1 = ((helper = (helper = helpers.arrayActionbar || (depth0 != null ? depth0.arrayActionbar : depth0)) != null ? helper : alias2),(options={\"name\":\"arrayActionbar\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));\n  if (!helpers.arrayActionbar) { stack1 = alias4.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  buffer += \"\\n        </div>\\n        <div class=\\\"pull-right\\\">\\n            \";\n  stack1 = ((helper = (helper = helpers.itemField || (depth0 != null ? depth0.itemField : depth0)) != null ? helper : alias2),(options={\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));\n  if (!helpers.itemField) { stack1 = alias4.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n        </div>\\n        <div class=\\\"clear\\\"></div>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.actionbarStyle : depth0),\"right\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.program(7, data, 0),\"data\":data})) != null ? stack1 : \"\");\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=helpers.blockHelperMissing, buffer = \n  \"            <div class=\\\"pull-left\\\">\\n                \";\n  stack1 = ((helper = (helper = helpers.itemField || (depth0 != null ? depth0.itemField : depth0)) != null ? helper : alias2),(options={\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));\n  if (!helpers.itemField) { stack1 = alias4.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  buffer += \"\\n            </div>\\n            <div class=\\\"pull-right\\\">\\n                \";\n  stack1 = ((helper = (helper = helpers.arrayActionbar || (depth0 != null ? depth0.arrayActionbar : depth0)) != null ? helper : alias2),(options={\"name\":\"arrayActionbar\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));\n  if (!helpers.arrayActionbar) { stack1 = alias4.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n            </div>\\n            <div class=\\\"alpaca-clear\\\"></div>\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, buffer = \n  \"            <div>\\n\\n\"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || alias2).call(alias1,(depth0 != null ? depth0.actionbarStyle : depth0),\"top\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n                \";\n  stack1 = ((helper = (helper = helpers.itemField || (depth0 != null ? depth0.itemField : depth0)) != null ? helper : alias2),(options={\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.itemField) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || alias2).call(alias1,(depth0 != null ? depth0.actionbarStyle : depth0),\"bottom\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n            </div>\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"                \";\n  stack1 = ((helper = (helper = helpers.arrayActionbar || (depth0 != null ? depth0.arrayActionbar : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"arrayActionbar\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.arrayActionbar) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.actionbarStyle : depth0),\"left\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.program(4, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-array-toolbar\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \" btn-group\";\n},\"3\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing;\n\n  return \"\\n\"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || alias2).call(alias1,(depths[1] != null ? depths[1].toolbarStyle : depths[1]),\"link\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(4, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || alias2).call(alias1,(depths[1] != null ? depths[1].toolbarStyle : depths[1]),\"button\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(6, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"                <a href=\\\"#\\\" class=\\\"alpaca-array-toolbar-action\\\" data-alpaca-array-toolbar-action=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.action || (depth0 != null ? depth0.action : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"action\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\"\n    + ((stack1 = ((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</a>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=container.escapeExpression, alias2=depth0 != null ? depth0 : {};\n\n  return \"                <button class=\\\"alpaca-array-toolbar-action \"\n    + alias1(container.lambda(((stack1 = ((stack1 = (depths[1] != null ? depths[1].view : depths[1])) != null ? stack1.styles : stack1)) != null ? stack1.smallButton : stack1), depth0))\n    + \"\\\" data-alpaca-array-toolbar-action=\\\"\"\n    + alias1(((helper = (helper = helpers.action || (depth0 != null ? depth0.action : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias2,{\"name\":\"action\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias2,(depth0 != null ? depth0.iconClass : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                    \"\n    + ((stack1 = helpers[\"if\"].call(alias2,(depth0 != null ? depth0.label : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(9, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n                </button>\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"                    <i class=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.iconClass || (depth0 != null ? depth0.iconClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"iconClass\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"></i>\\n\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return ((stack1 = ((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\");\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-array-toolbar\\\" data-alpaca-array-toolbar-field-id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || alias2).call(alias1,(depth0 != null ? depth0.toolbarStyle : depth0),\"button\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\\n\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.actions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(3, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-array\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"\\n            \";\n  stack1 = ((helper = (helper = helpers.item || (depth0 != null ? depth0.item : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"item\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.item) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n        \";\n  stack1 = ((helper = (helper = helpers.arrayToolbar || (depth0 != null ? depth0.arrayToolbar : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"arrayToolbar\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.arrayToolbar) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-object-item\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n        \";\n  stack1 = ((helper = (helper = helpers.itemField || (depth0 != null ? depth0.itemField : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.itemField) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-object\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"\\n            \";\n  stack1 = ((helper = (helper = helpers.item || (depth0 != null ? depth0.item : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"item\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.item) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-table-item\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <tr>\\n        \"\n    + ((stack1 = (helpers.itemField || (depth0 && depth0.itemField) || helpers.helperMissing).call(depth0 != null ? depth0 : {},\"td\",{\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </tr>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-table\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"                    <!-- hidden column storing sort order -->\\n                    <th class=\\\"alpaca-table-reorder-index-header\\\"></th>\\n                    <!-- draggable -->\\n                    <th class=\\\"alpaca-table-reorder-draggable-header\\\"></th>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"                    <th data-header-id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.hidden : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\"\n    + ((stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"title\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</th>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    return \"class=\\\"alpaca-table-column-hidden\\\"\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    return \"                        <th>Actions</th>\\n\";\n},\"10\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"\\n                \"\n    + ((stack1 = (helpers.item || (depth0 && depth0.item) || helpers.helperMissing).call(depth0 != null ? depth0 : {},\"tr\",{\"name\":\"item\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n        \";\n  stack1 = ((helper = (helper = helpers.arrayToolbar || (depth0 != null ? depth0.arrayToolbar : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"arrayToolbar\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.arrayToolbar) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n        <table>\\n\\n            <!-- table headers -->\\n            <thead>\\n                <tr>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.dragRows : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.headers : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.showActionsColumn : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                </tr>\\n            </thead>\\n\\n            <!-- table body -->\\n            <tbody>\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(10, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            </tbody>\\n\\n        </table>\\n\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-tablerow-item\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <td>\\n        \";\n  stack1 = ((helper = (helper = helpers.itemField || (depth0 != null ? depth0.itemField : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"itemField\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.itemField) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n    </td>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container-tablerow\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\\n            <!-- hidden sort order column -->\\n            <div class=\\\"alpaca-table-reorder-index-cell\\\"></div>\\n\\n            <!-- reorder draggable -->\\n            <div class=\\\"alpaca-table-reorder-draggable-cell\\\">\\n                <i class=\\\"glyphicon glyphicon-menu-hamburger\\\"></i>\\n            </div>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.hidden : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.program(6, data, 0),\"data\":data})) != null ? stack1 : \"\");\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"                \";\n  stack1 = ((helper = (helper = helpers.item || (depth0 != null ? depth0.item : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"item\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.item) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, buffer = \n  \"            <div class=\\\"alpaca-merge-up\\\">\\n                \";\n  stack1 = ((helper = (helper = helpers.arrayActionbar || (depth0 != null ? depth0.arrayActionbar : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"arrayActionbar\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},options) : helper));\n  if (!helpers.arrayActionbar) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n            </div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-merge-up\\\">\\n\\n        <!-- drag cell -->\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.dragRows : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        <!-- actions cell -->\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.showActionsColumn : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"container\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <legend class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" alpaca-container-label\\\">\"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</legend>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1), depth0));\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <p class=\\\"alpaca-helper \"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n            <i class=\\\"alpaca-icon-helper\\\"></i>\\n            \"\n    + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : \"\")\n    + \"\\n        </p>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1), depth0));\n},\"8\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        \";\n  stack1 = ((helper = (helper = helpers.container || (depth0 != null ? depth0.container : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"container\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.container) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-any\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"data-\"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <input type=\\\"text\\\" id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" size=\\\"40\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-checkbox\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return \"\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.checkboxOptions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(2, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\";\n},\"2\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"\\n            <div>\\n\\n                <label>\\n\\n                    <input type=\\\"checkbox\\\" data-checkbox-index=\\\"\"\n    + alias4(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"index\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" data-checkbox-value=\\\"\"\n    + alias4(((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depths[1] != null ? depths[1].options : depths[1])) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depths[1] != null ? depths[1].options : depths[1])) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n                    \"\n    + ((stack1 = ((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"text\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\n\\n                </label>\\n            </div>\\n\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"data-\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias4(((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"\\n        <div>\\n\\n            <label>\\n\\n                <input type=\\\"checkbox\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n                \"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.rightLabel : stack1), depth0)) != null ? stack1 : \"\")\n    + \"\\n            </label>\\n\\n        </div>\\n\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.multiple : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.program(9, data, 0, blockParams, depths),\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n</script>\\n\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-ckeditor\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <textarea id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" cols=\\\"80\\\" rows=\\\"10\\\">\\n    </textarea>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-editor\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" class=\\\"control-field-editor-el\\\"></div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-file\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"size=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"data-\"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <input type=\\\"file\\\" id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-hidden\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"data-\"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <input type=\\\"hidden\\\" id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-image\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"placeholder=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1), depth0))\n    + \"\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"size=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"data-\"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <input type=\\\"text\\\" id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n    <div class=\\\"alpaca-image-display\\\">\\n        <h5>Preview</h5>\\n        <img id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"-image\\\" src=\\\"\"\n    + alias4(((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"data\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-optiontree\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"placeholder=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1), depth0))\n    + \"\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"size=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"data-\"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"optiontree\\\"></div>\\n\\n    <input type=\\\"\"\n    + alias4(((helper = (helper = helpers.inputType || (depth0 != null ? depth0.inputType : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"inputType\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.attributes : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(11, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-password\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"placeholder=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1), depth0))\n    + \"\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"size=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"data-\"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <input type=\\\"password\\\" id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-radio\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"    <div class=\\\"radio\\\">\\n        <label>\\n            <input type=\\\"radio\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" value=\\\"\\\"/>\"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.noneLabel : stack1), depth0)) != null ? stack1 : \"\")\n    + \"\\n        </label>\\n    </div>\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"6\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=container.escapeExpression, alias3=helpers.helperMissing, alias4=\"function\";\n\n  return \"    <div class=\\\"radio\\\">\\n        <label>\\n            <input type=\\\"radio\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depths[1] != null ? depths[1].options : depths[1])) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" name=\\\"\"\n    + alias2(container.lambda((depths[1] != null ? depths[1].name : depths[1]), depth0))\n    + \"\\\" value=\\\"\"\n    + alias2(((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.selected : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\"\n    + ((stack1 = ((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"text\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\n        </label>\\n    </div>\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    return \"checked=\\\"checked\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.hideNone : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.program(3, data, 0, blockParams, depths),\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.selectOptions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(6, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n</script>\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-select\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"multiple=\\\"multiple\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"size=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.hideNone : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(10, data, 0),\"inverse\":container.program(12, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.selectOptions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(14, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\";\n},\"10\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"12\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <option value=\\\"\\\">\"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.noneLabel : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</option>\\n\";\n},\"14\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"        <option value=\\\"\"\n    + ((stack1 = ((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.selected : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(15, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\"\n    + container.escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"text\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</option>\\n\";\n},\"15\":function(container,depth0,helpers,partials,data) {\n    return \"selected=\\\"selected\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <select id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.multiple : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.multiple : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.program(9, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </select>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-text\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"placeholder=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1), depth0))\n    + \"\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"size=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"data-\"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <input type=\\\"\"\n    + alias4(((helper = (helper = helpers.inputType || (depth0 != null ? depth0.inputType : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"inputType\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.attributes : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(11, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-textarea\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"placeholder=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1), depth0))\n    + \"\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"rows=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.rows : stack1), depth0))\n    + \"\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"cols=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.cols : stack1), depth0))\n    + \"\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"data-\"\n    + container.escapeExpression(((helper = (helper = helpers.fieldId || (depth0 != null ? depth0.fieldId : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"fieldId\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + ((stack1 = ((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <textarea id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.rows : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.cols : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(11, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control-url\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"placeholder=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1), depth0))\n    + \"\\\"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"size=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"data-\"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <input type=\\\"text\\\" id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"control\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"        <label class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" alpaca-control-label\\\" for=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</label>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1), depth0));\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <p class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n            <i class=\\\"info-sign\\\"></i>\\n            \"\n    + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : \"\")\n    + \"\\n        </p>\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1), depth0));\n},\"10\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.buttons : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(11, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"11\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"            <div class=\\\"alpaca-control-buttons-container\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.buttons : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(12, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            </div>\\n\";\n},\"12\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"                <button data-key=\\\"\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" type=\\\"\"\n    + alias4(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"type\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" class=\\\"alpaca-control-button alpaca-control-button-\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \" \"\n    + alias4(((helper = (helper = helpers.styles || (depth0 != null ? depth0.styles : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"styles\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.value : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(13, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\"\n    + ((stack1 = ((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</button>\\n\";\n},\"13\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias4(((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        \";\n  stack1 = ((helper = (helper = helpers.control || (depth0 != null ? depth0.control : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"control\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.control) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.renderButtons : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(10, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"form\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.buttons : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"                    <button data-key=\\\"\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" type=\\\"\"\n    + alias4(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"type\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.id : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" class=\\\"alpaca-form-button alpaca-form-button-\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \" \"\n    + alias4(((helper = (helper = helpers.styles || (depth0 != null ? depth0.styles : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"styles\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.value : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.attributes : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\"\n    + ((stack1 = ((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</button>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \" \"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <form role=\\\"form\\\">\\n\\n        \";\n  stack1 = ((helper = (helper = helpers.formItems || (depth0 != null ? depth0.formItems : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"formItems\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.formItems) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n        <div class=\\\"alpaca-form-buttons-container\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.buttons : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"        </div>\\n\\n    </form>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"message\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-message alpaca-message-\"\n    + ((stack1 = ((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\\">\\n        \"\n    + ((stack1 = ((helper = (helper = helpers.message || (depth0 != null ? depth0.message : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"message\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"web-edit\"][\"wizard\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <div class=\\\"alpaca-wizard-nav\\\">\\n            <nav class=\\\"navbar navbar-default\\\" role=\\\"navigation\\\">\\n                <div class=\\\"container-fluid alpaca-wizard-back\\\">\\n                    <ul class=\\\"nav navbar-nav\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.steps : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                    </ul>\\n                </div>\\n            </nav>\\n        </div>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"                        <li data-alpaca-wizard-step-index=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"index\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n                            <div class=\\\"holder\\\">\\n                                <div class=\\\"title\\\">\"\n    + ((stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"title\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</div>\\n                                <div class=\\\"description\\\">\"\n    + ((stack1 = ((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"description\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</div>\\n                            </div>\\n                            <div class=\\\"chevron\\\"></div>\\n                        </li>\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"        <div class=\\\"alpaca-wizard-progress-bar\\\">\\n            <div class=\\\"progress\\\">\\n                <div class=\\\"progress-bar\\\" role=\\\"progressbar\\\" aria-valuenow=\\\"0\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" style=\\\"width: 60%;\\\">\\n                </div>\\n            </div>\\n        </div>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return \"            <h3>\"\n    + ((stack1 = ((helper = (helper = helpers.wizardTitle || (depth0 != null ? depth0.wizardTitle : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"wizardTitle\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</h3>\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return \"            <h4>\"\n    + ((stack1 = ((helper = (helper = helpers.wizardDescription || (depth0 != null ? depth0.wizardDescription : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"wizardDescription\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</h4>\\n\";\n},\"10\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.align : depth0),\"left\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(11, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"11\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"                        <button type=\\\"\"\n    + alias4(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"type\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.id : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(12, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" class=\\\"\"\n    + alias4(container.lambda(((stack1 = ((stack1 = (depths[1] != null ? depths[1].view : depths[1])) != null ? stack1.styles : stack1)) != null ? stack1.button : stack1), depth0))\n    + \"\\\" data-alpaca-wizard-button-key=\\\"\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.attributes : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(14, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\"\n    + ((stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"title\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</button>\\n\";\n},\"12\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"14\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \" \"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"16\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.align : depth0),\"right\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(11, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-wizard\\\">\\n\\n        <!-- nav bar -->\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.showSteps : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        <!-- wizard progress bar -->\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.showProgressBar : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.wizardTitle : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.wizardDescription : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        <!-- wizard steps -->\\n        <div class=\\\"alpaca-wizard-steps\\\">\\n\\n        </div>\\n\\n        <!-- wizard buttons -->\\n        <div class=\\\"alpaca-wizard-buttons\\\">\\n\\n            <div class=\\\"pull-left\\\">\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.buttons : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(10, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            </div>\\n\\n            <div class=\\\"pull-right\\\">\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.buttons : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(16, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            </div>\\n\\n            <div style=\\\"clear:both\\\"></div>\\n\\n        </div>\\n\\n    </div>\\n\\n</script>\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-display\"] = this[\"HandlebarsPrecompiled\"][\"bootstrap-display\"] || {};\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-display\"][\"container\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"        <legend class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"alpaca-container-label\\\">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.collapsible : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n            \"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1), depth0)) != null ? stack1 : \"\")\n    + \"\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.collapsible : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        </legend>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1), depth0))\n    + \" \";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"            <span data-toggle=\\\"collapse\\\">\\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    return \"            </span>\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <p class=\\\"alpaca-helper help-block \"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(10, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n            <i class=\\\"alpaca-icon-16 glyphicon glyphicon-info-sign\\\"></i>\\n            \"\n    + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : \"\")\n    + \"\\n        </p>\\n\";\n},\"10\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1), depth0));\n},\"12\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        \";\n  stack1 = ((helper = (helper = helpers.container || (depth0 != null ? depth0.container : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"container\",\"hash\":{},\"fn\":container.program(12, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.container) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-display\"][\"control-radio\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.value : depth0),(depths[1] != null ? depths[1].data : depths[1]),{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(2, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return \"                \"\n    + ((stack1 = ((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"text\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.selectOptions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"    </div>\\n\\n</script>\\n\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-display\"][\"control-select\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n        \"\n    + container.escapeExpression(((helper = (helper = helpers.displayableText || (depth0 != null ? depth0.displayableText : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"displayableText\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\n    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-display\"][\"control-upload-partial-download\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=container.lambda, alias2=container.escapeExpression;\n\n  return \"        <td></td>\\n        <td class=\\\"name\\\">\\n            <span>\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"</span>\\n        </td>\\n        <td class=\\\"size\\\">\\n            <span>\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"</span>\\n        </td>\\n        <td class=\\\"error\\\" colspan=\\\"2\\\">\\n            Error:\\n            \"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.error : stack1), depth0))\n    + \"\\n        </td>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=container.lambda, alias2=container.escapeExpression;\n\n  return \"        <td class=\\\"preview\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.thumbnailUrl : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"        </td>\\n        <td class=\\\"name\\\">\\n            <a href=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.url : stack1), depth0))\n    + \"\\\" title=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"\\\" data-gallery=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.thumbnailUrl : stack1), depth0))\n    + \"gallery\\\" download=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"\\\">\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"</a>\\n        </td>\\n        <td class=\\\"size\\\"><span>\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"</span></td>\\n        <td colspan=\\\"2\\\"></td>\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=container.lambda, alias2=container.escapeExpression;\n\n  return \"            <a href=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.url : stack1), depth0))\n    + \"\\\" title=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"\\\" data-gallery=\\\"gallery\\\" download=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"\\\">\\n                <img src=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.thumbnailUrl : stack1), depth0))\n    + \"\\\">\\n            </a>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.buttons : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"7\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.isDelete : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0, blockParams, depths),\"inverse\":container.program(10, data, 0, blockParams, depths),\"data\":data})) != null ? stack1 : \"\");\n},\"8\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"                        <button class=\\\"delete btn btn-danger\\\" data-file-index=\\\"\"\n    + alias1(container.lambda((depths[1] != null ? depths[1].fileIndex : depths[1]), depth0))\n    + \"\\\" data-button-key=\\\"\"\n    + alias1(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n                            <i class=\\\"glyphicon glyphicon-trash glyphicon-white\\\"></i>\\n                        </button>\\n\";\n},\"10\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"                        <button class=\\\"\"\n    + alias4(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \" btn \"\n    + alias4(((helper = (helper = helpers.buttonClass || (depth0 != null ? depth0.buttonClass : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"buttonClass\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" data-file-index=\\\"\"\n    + alias4(container.lambda((depths[1] != null ? depths[1].fileIndex : depths[1]), depth0))\n    + \"\\\" data-button-key=\\\"\"\n    + alias4(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.iconClass : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(11, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.label : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(13, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                        </button>\\n\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"                                <i class=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.iconClass || (depth0 != null ? depth0.iconClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"iconClass\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"></i>\\n\";\n},\"13\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"                                \"\n    + container.escapeExpression(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <tr class=\\\"template-download\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.error : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.program(3, data, 0, blockParams, depths),\"data\":data})) != null ? stack1 : \"\")\n    + \"        <td>\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.buttons : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"        </td>\\n    </tr>\\n\\n</script>\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-display\"][\"control-upload-partial-upload\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"        <td class=\\\"preview\\\">\\n            <span class=\\\"fade\\\"></span>\\n        </td>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"        <td></td>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <td class=\\\"error\\\" colspan=\\\"2\\\"><span class=\\\"label label-important\\\">Error</span> \"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.error : stack1), depth0))\n    + \"</td>\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.valid : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.program(15, data, 0),\"data\":data})) != null ? stack1 : \"\");\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(alias1,(data && data.index),0,{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            <td class=\\\"start\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.autoUpload : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(11, data, 0),\"inverse\":container.program(13, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"            </td>\\n\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    return \"                <td>\\n                    <div class=\\\"progress progress-success progress-striped active\\\" role=\\\"progressbar\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" aria-valuenow=\\\"0\\\">\\n                        <div class=\\\"progress-bar\\\" style=\\\"width:0%;\\\"></div>\\n                    </div>\\n                </td>\\n\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"13\":function(container,depth0,helpers,partials,data) {\n    return \"                <button class=\\\"btn btn-primary\\\"> \\\\\\n                    <i class=\\\"glyphicon glyphicon-upload glyphicon-white\\\"></i>\\n                    <span>Start</span>\\n                </button>\\n\";\n},\"15\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"            <td></td>\\n            <td class=\\\"cancel\\\">\\n\"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(data && data.index),0,{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(16, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            </td>\\n\";\n},\"16\":function(container,depth0,helpers,partials,data) {\n    return \"                <button class=\\\"btn btn-warning\\\">\\n                    <i class=\\\"glyphicon glyphicon-ban-circle glyphicon-white\\\"></i>\\n                    <span>Cancel</span>\\n                </button>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {}, alias2=container.lambda, alias3=container.escapeExpression;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <tr class=\\\"template-upload\\\">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.showUploadPreview : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.program(3, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        <td class=\\\"name\\\"><span>\"\n    + alias3(alias2(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"</span></td>\\n        <td class=\\\"size\\\"><span>\"\n    + alias3(alias2(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"</span></td>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.error : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.program(7, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"        <td></td>\\n    </tr>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-display\"][\"control-upload\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return container.escapeExpression(((helper = (helper = helpers.cssClasses || (depth0 != null ? depth0.cssClasses : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"cssClasses\",\"hash\":{},\"data\":data}) : helper)));\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"                        <thead>\\n                            <tr>\\n\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.showUploadPreview : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.program(6, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"                                <td>Name</td>\\n                                <td>Size</td>\\n                                <td colspan=\\\"2\\\"></td><!-- error or start or progress indicator -->\\n                                <td>Actions</td>\\n                            </tr>\\n                        </thead>\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"                                    <td>Thumbnail</td>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    return \"                                    <td></td>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=container.escapeExpression, alias3=helpers.helperMissing, alias4=\"function\";\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-fileupload-container \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.cssClasses : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n        <div class=\\\"container-fluid\\\">\\n            <div class=\\\"row alpaca-fileupload-chooserow\\\">\\n                <div class=\\\"col-md-12\\\">\\n                    <div class=\\\"btn-group\\\">\\n                        <span class=\\\"\"\n    + alias2(container.lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.view : depth0)) != null ? stack1.styles : stack1)) != null ? stack1.button : stack1), depth0))\n    + \" fileinput-button\\\">\\n                            <i class=\\\"glyphicon glyphicon-upload\\\"></i>\\n                            <span class=\\\"fileupload-add-button\\\">\"\n    + alias2(((helper = (helper = helpers.chooseButtonLabel || (depth0 != null ? depth0.chooseButtonLabel : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"chooseButtonLabel\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</span>\\n                            <input class=\\\"alpaca-fileupload-input\\\" type=\\\"file\\\" name=\\\"\"\n    + alias2(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"_files\\\">\\n                            <input class=\\\"alpaca-fileupload-input-hidden\\\" type=\\\"hidden\\\" name=\\\"\"\n    + alias2(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"_files_hidden\\\">\\n                        </span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row alpaca-fileupload-well\\\">\\n                <div class=\\\"col-md-12 fileupload-active-zone\\\">\\n                    <table class=\\\"table table-striped\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.showHeaders : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                        <tbody class=\\\"files\\\">\\n                        </tbody>\\n                    </table>\\n                    <p align=\\\"center\\\" class=\\\"dropzone-message\\\">\"\n    + alias2(((helper = (helper = helpers.dropZoneMessage || (depth0 != null ? depth0.dropZoneMessage : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"dropZoneMessage\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</p>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-12\\\">\\n                    <div id=\\\"progress\\\" class=\\\"progress\\\">\\n                        <div class=\\\"progress-bar progress-bar-success\\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-display\"][\"control\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"        <label class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" control-label alpaca-control-label\\\" for=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</label>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1), depth0));\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <p class=\\\"help-block \"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n            <i class=\\\"glyphicon glyphicon-info-sign\\\"></i>\\n            \"\n    + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : \"\")\n    + \"\\n        </p>\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1), depth0));\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"form-group\\\">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        \";\n  stack1 = ((helper = (helper = helpers.control || (depth0 != null ? depth0.control : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"control\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.control) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-display\"][\"message\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"help-block\\\">\\n        <i class=\\\"glyphicon glyphicon-exclamation-sign\\\"></i>&nbsp;\"\n    + ((stack1 = ((helper = (helper = helpers.message || (depth0 != null ? depth0.message : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"message\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"] = this[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"] || {};\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"][\"container-grid\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \" btn-group\";\n},\"3\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing;\n\n  return \"\\n\"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || alias2).call(alias1,((stack1 = (depths[1] != null ? depths[1].options : depths[1])) != null ? stack1.toolbarStyle : stack1),\"link\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(4, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || alias2).call(alias1,((stack1 = (depths[1] != null ? depths[1].options : depths[1])) != null ? stack1.toolbarStyle : stack1),\"button\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(6, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var alias1=container.lambda, alias2=container.escapeExpression;\n\n  return \"                <a href=\\\"#\\\" class=\\\"alpaca-array-toolbar-action\\\" data-array-toolbar-action=\\\"\"\n    + alias2(alias1((depth0 != null ? depth0.action : depth0), depth0))\n    + \"\\\">\"\n    + alias2(alias1((depth0 != null ? depth0.label : depth0), depth0))\n    + \"</a>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=container.escapeExpression, alias2=depth0 != null ? depth0 : {};\n\n  return \"                <button class=\\\"alpaca-array-toolbar-action \"\n    + alias1(container.lambda(((stack1 = ((stack1 = (depths[1] != null ? depths[1].view : depths[1])) != null ? stack1.styles : stack1)) != null ? stack1.button : stack1), depth0))\n    + \"\\\" data-array-toolbar-action=\\\"\"\n    + alias1(((helper = (helper = helpers.action || (depth0 != null ? depth0.action : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias2,{\"name\":\"action\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias2,(depth0 != null ? depth0.iconClass : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                    \"\n    + ((stack1 = helpers[\"if\"].call(alias2,(depth0 != null ? depth0.label : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(9, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n                </button>\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"                    <i class=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.iconClass || (depth0 != null ? depth0.iconClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"iconClass\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"></i>\\n\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return ((stack1 = ((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\");\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n        <div class=\\\"alpaca-array-toolbar\\\" \"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.toolbarStyle : stack1),\"button\",{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\\n\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.arrayToolbarActions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(3, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        </div>\\n\\n        <div class=\\\"alpaca-container-grid-holder\\\"></div>\\n\\n    </div>\\n\\n</script>\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"][\"container-table\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"                    <!-- hidden column storing sort order -->\\n                    <th class=\\\"alpaca-table-reorder-index-header\\\"></th>\\n                    <!-- draggable -->\\n                    <th class=\\\"alpaca-table-reorder-draggable-header\\\"></th>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"                    <th data-header-id=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.hidden : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\"\n    + ((stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"title\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</th>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    return \"class=\\\"alpaca-table-column-hidden\\\"\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    return \"                        <th>Actions</th>\\n\";\n},\"10\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"\\n                \"\n    + ((stack1 = (helpers.item || (depth0 && depth0.item) || helpers.helperMissing).call(depth0 != null ? depth0 : {},\"tr\",{\"name\":\"item\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"table-responsive\\\">\\n\\n        \";\n  stack1 = ((helper = (helper = helpers.arrayToolbar || (depth0 != null ? depth0.arrayToolbar : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"arrayToolbar\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.arrayToolbar) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n        <table>\\n\\n            <!-- table headers -->\\n            <thead>\\n                <tr>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.dragRows : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.headers : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.showActionsColumn : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                </tr>\\n            </thead>\\n\\n            <!-- table body -->\\n            <tbody>\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.items : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(10, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            </tbody>\\n\\n        </table>\\n\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"][\"container\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"        <legend class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"alpaca-container-label\\\">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.collapsible : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n            \"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1), depth0)) != null ? stack1 : \"\")\n    + \"\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.collapsible : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        </legend>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1), depth0))\n    + \" \";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"            <span data-toggle=\\\"collapse\\\">\\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    return \"            </span>\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <p class=\\\"alpaca-helper help-block \"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(10, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n            <i class=\\\"alpaca-icon-16 glyphicon glyphicon-info-sign\\\"></i>\\n            \"\n    + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : \"\")\n    + \"\\n        </p>\\n\";\n},\"10\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1), depth0));\n},\"12\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        \";\n  stack1 = ((helper = (helper = helpers.container || (depth0 != null ? depth0.container : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"container\",\"hash\":{},\"fn\":container.program(12, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.container) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n    </div>\\n\\n</script>\\n\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"][\"control-colorpicker\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"    <div class=\\\"input-group\\\">\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"placeholder=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1), depth0))\n    + \"\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"size=\\\"\"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    return \"readonly=\\\"readonly\\\"\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"name=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"data-\"\n    + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"13\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=container.escapeExpression;\n\n  return alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias1(container.lambda(depth0, depth0))\n    + \"\\\"\";\n},\"15\":function(container,depth0,helpers,partials,data) {\n    return \"        <span class=\\\"input-group-addon\\\"><i></i></span>\\n        </div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.component : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        <input type=\\\"\"\n    + alias4(((helper = (helper = helpers.inputType || (depth0 != null ? depth0.inputType : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"inputType\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" id=\\\"\"\n    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.placeholder : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.size : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.readonly : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.name : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.data : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(11, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.attributes : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(13, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"/>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.component : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(15, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"][\"control-upload-partial-download\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=container.lambda, alias2=container.escapeExpression;\n\n  return \"        <td></td>\\n        <td class=\\\"name\\\">\\n            <span>\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"</span>\\n        </td>\\n        <td class=\\\"size\\\">\\n            <span>\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"</span>\\n        </td>\\n        <td class=\\\"error\\\" colspan=\\\"2\\\">\\n            Error:\\n            \"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.error : stack1), depth0))\n    + \"\\n        </td>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=container.lambda, alias2=container.escapeExpression;\n\n  return \"        <td class=\\\"preview\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.thumbnailUrl : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"        </td>\\n        <td class=\\\"name\\\">\\n            <a href=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.url : stack1), depth0))\n    + \"\\\" title=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"\\\" data-gallery=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.thumbnailUrl : stack1), depth0))\n    + \"gallery\\\" download=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"\\\">\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"</a>\\n        </td>\\n        <td class=\\\"size\\\"><span>\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"</span></td>\\n        <td colspan=\\\"2\\\"></td>\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=container.lambda, alias2=container.escapeExpression;\n\n  return \"            <a href=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.url : stack1), depth0))\n    + \"\\\" title=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"\\\" data-gallery=\\\"gallery\\\" download=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"\\\">\\n                <img src=\\\"\"\n    + alias2(alias1(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.thumbnailUrl : stack1), depth0))\n    + \"\\\">\\n            </a>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.buttons : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"7\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.isDelete : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0, blockParams, depths),\"inverse\":container.program(10, data, 0, blockParams, depths),\"data\":data})) != null ? stack1 : \"\");\n},\"8\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var helper, alias1=container.escapeExpression;\n\n  return \"                        <button class=\\\"delete btn btn-danger\\\" data-file-index=\\\"\"\n    + alias1(container.lambda((depths[1] != null ? depths[1].fileIndex : depths[1]), depth0))\n    + \"\\\" data-button-key=\\\"\"\n    + alias1(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n                            <i class=\\\"glyphicon glyphicon-trash glyphicon-white\\\"></i>\\n                        </button>\\n\";\n},\"10\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"                        <button class=\\\"\"\n    + alias4(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \" btn \"\n    + alias4(((helper = (helper = helpers.buttonClass || (depth0 != null ? depth0.buttonClass : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"buttonClass\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" data-file-index=\\\"\"\n    + alias4(container.lambda((depths[1] != null ? depths[1].fileIndex : depths[1]), depth0))\n    + \"\\\" data-button-key=\\\"\"\n    + alias4(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.iconClass : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(11, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.label : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(13, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                        </button>\\n\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"                                <i class=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.iconClass || (depth0 != null ? depth0.iconClass : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"iconClass\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"></i>\\n\";\n},\"13\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"                                \"\n    + container.escapeExpression(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams,depths) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <tr class=\\\"template-download\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.error : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0, blockParams, depths),\"inverse\":container.program(3, data, 0, blockParams, depths),\"data\":data})) != null ? stack1 : \"\")\n    + \"        <td>\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.buttons : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0, blockParams, depths),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"        </td>\\n    </tr>\\n\\n</script>\";\n},\"useData\":true,\"useDepths\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"][\"control-upload-partial-upload\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"        <td class=\\\"preview\\\">\\n            <span class=\\\"fade\\\"></span>\\n        </td>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"        <td></td>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <td class=\\\"error\\\" colspan=\\\"2\\\"><span class=\\\"label label-important\\\">Error</span> \"\n    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.error : stack1), depth0))\n    + \"</td>\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.valid : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.program(15, data, 0),\"data\":data})) != null ? stack1 : \"\");\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(alias1,(data && data.index),0,{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(9, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            <td class=\\\"start\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.autoUpload : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(11, data, 0),\"inverse\":container.program(13, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"            </td>\\n\";\n},\"9\":function(container,depth0,helpers,partials,data) {\n    return \"                <td>\\n                    <div class=\\\"progress progress-success progress-striped active\\\" role=\\\"progressbar\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" aria-valuenow=\\\"0\\\">\\n                        <div class=\\\"progress-bar\\\" style=\\\"width:0%;\\\"></div>\\n                    </div>\\n                </td>\\n\";\n},\"11\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"13\":function(container,depth0,helpers,partials,data) {\n    return \"                <button class=\\\"btn btn-primary\\\"> \\\\\\n                    <i class=\\\"glyphicon glyphicon-upload glyphicon-white\\\"></i>\\n                    <span>Start</span>\\n                </button>\\n\";\n},\"15\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"            <td></td>\\n            <td class=\\\"cancel\\\">\\n\"\n    + ((stack1 = (helpers.compare || (depth0 && depth0.compare) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(data && data.index),0,{\"name\":\"compare\",\"hash\":{},\"fn\":container.program(16, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            </td>\\n\";\n},\"16\":function(container,depth0,helpers,partials,data) {\n    return \"                <button class=\\\"btn btn-warning\\\">\\n                    <i class=\\\"glyphicon glyphicon-ban-circle glyphicon-white\\\"></i>\\n                    <span>Cancel</span>\\n                </button>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {}, alias2=container.lambda, alias3=container.escapeExpression;\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <tr class=\\\"template-upload\\\">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.showUploadPreview : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.program(3, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        <td class=\\\"name\\\"><span>\"\n    + alias3(alias2(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.name : stack1), depth0))\n    + \"</span></td>\\n        <td class=\\\"size\\\"><span>\"\n    + alias3(alias2(((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.size : stack1), depth0))\n    + \"</span></td>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.file : depth0)) != null ? stack1.error : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.program(7, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"        <td></td>\\n    </tr>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"][\"control-upload\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return container.escapeExpression(((helper = (helper = helpers.cssClasses || (depth0 != null ? depth0.cssClasses : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"cssClasses\",\"hash\":{},\"data\":data}) : helper)));\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"                        <thead>\\n                            <tr>\\n\"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.showUploadPreview : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.program(6, data, 0),\"data\":data})) != null ? stack1 : \"\")\n    + \"                                <td>Name</td>\\n                                <td>Size</td>\\n                                <td colspan=\\\"2\\\"></td><!-- error or start or progress indicator -->\\n                                <td>Actions</td>\\n                            </tr>\\n                        </thead>\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"                                    <td>Thumbnail</td>\\n\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    return \"                                    <td></td>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=container.escapeExpression, alias3=helpers.helperMissing, alias4=\"function\";\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"alpaca-fileupload-container \"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.cssClasses : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n        <div class=\\\"container-fluid\\\">\\n            <div class=\\\"row alpaca-fileupload-chooserow\\\">\\n                <div class=\\\"col-md-12\\\">\\n                    <div class=\\\"btn-group\\\">\\n                        <span class=\\\"\"\n    + alias2(container.lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.view : depth0)) != null ? stack1.styles : stack1)) != null ? stack1.button : stack1), depth0))\n    + \" fileinput-button\\\">\\n                            <i class=\\\"glyphicon glyphicon-upload\\\"></i>\\n                            <span class=\\\"fileupload-add-button\\\">\"\n    + alias2(((helper = (helper = helpers.chooseButtonLabel || (depth0 != null ? depth0.chooseButtonLabel : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"chooseButtonLabel\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</span>\\n                            <input class=\\\"alpaca-fileupload-input\\\" type=\\\"file\\\" name=\\\"\"\n    + alias2(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"_files\\\">\\n                            <input class=\\\"alpaca-fileupload-input-hidden\\\" type=\\\"hidden\\\" name=\\\"\"\n    + alias2(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"name\",\"hash\":{},\"data\":data}) : helper)))\n    + \"_files_hidden\\\">\\n                        </span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row alpaca-fileupload-well\\\">\\n                <div class=\\\"col-md-12 fileupload-active-zone\\\">\\n                    <table class=\\\"table table-striped\\\">\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.showHeaders : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"                        <tbody class=\\\"files\\\">\\n                        </tbody>\\n                    </table>\\n                    <p align=\\\"center\\\" class=\\\"dropzone-message\\\">\"\n    + alias2(((helper = (helper = helpers.dropZoneMessage || (depth0 != null ? depth0.dropZoneMessage : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"dropZoneMessage\",\"hash\":{},\"data\":data}) : helper)))\n    + \"</p>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-12\\\">\\n                    <div id=\\\"progress\\\" class=\\\"progress\\\">\\n                        <div class=\\\"progress-bar progress-bar-success\\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"][\"control\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"        <label class=\\\"\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \" control-label alpaca-control-label\\\" for=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\"\n    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</label>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.labelClass : stack1), depth0));\n},\"4\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"        <p class=\\\"help-block \"\n    + ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\\">\\n            <i class=\\\"glyphicon glyphicon-info-sign\\\"></i>\\n            \"\n    + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : \"\")\n    + \"\\n        </p>\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helperClass : stack1), depth0));\n},\"10\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.buttons : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(11, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"11\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"            <div class=\\\"alpaca-control-buttons-container\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.buttons : stack1),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(12, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"            </div>\\n\";\n},\"12\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return \"                <button data-key=\\\"\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" type=\\\"\"\n    + alias4(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"type\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" class=\\\"alpaca-control-button alpaca-control-button-\"\n    + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \" \"\n    + alias4(((helper = (helper = helpers.styles || (depth0 != null ? depth0.styles : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"styles\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.value : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(13, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \">\"\n    + ((stack1 = ((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</button>\\n\";\n},\"13\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\", alias4=container.escapeExpression;\n\n  return alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"=\\\"\"\n    + alias4(((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" \";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, buffer = \n  \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"form-group\\\">\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.label : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n        \";\n  stack1 = ((helper = (helper = helpers.control || (depth0 != null ? depth0.control : depth0)) != null ? helper : helpers.helperMissing),(options={\"name\":\"control\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data}),(typeof helper === \"function\" ? helper.call(alias1,options) : helper));\n  if (!helpers.control) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.helpers : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,((stack1 = (depth0 != null ? depth0.options : depth0)) != null ? stack1.renderButtons : stack1),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(10, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\nthis[\"HandlebarsPrecompiled\"][\"bootstrap-edit\"][\"message\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"<script type=\\\"text/x-handlebars-template\\\">\\n\\n    <div class=\\\"help-block alpaca-message alpaca-message-\"\n    + ((stack1 = ((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\\">\\n        <i class=\\\"glyphicon glyphicon-exclamation-sign\\\"></i>&nbsp;\"\n    + ((stack1 = ((helper = (helper = helpers.message || (depth0 != null ? depth0.message : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"message\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\n    </div>\\n\\n</script>\";\n},\"useData\":true});\n/**\n * Using fork:\n * https://github.com/kcmoot/Base.js-Fork/blob/master/build/base.js\n */\n(function (root, factory) {\n    /*\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], function () {\n            return (root.returnExportsGlobal = factory());\n        });\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n    */\n        root['Base'] = factory();\n    /*\n    }\n    */\n}(this, function () {\n\n    /**\n     *   Base.js, version 1.1a\n     *   Copyright 2006-2010, Dean Edwards\n     *   License: http://www.opensource.org/licenses/mit-license.php\n     *\n     *   Modified by the Nerdery for improved performance and various bugfixes\n     */\n\n    /**\n     * Function type\n     *\n     * @type String\n     * @ignore\n     * @final\n     */\n    var TYPE_FUNCTION = 'function';\n\n    /**\n     * Object type\n     *\n     * @type String\n     * @ignore\n     * @final\n     */\n    var TYPE_OBJECT = 'object';\n\n    /**\n     * String type\n     *\n     * @type String\n     * @ignore\n     * @final\n     */\n    var TYPE_STRING = 'string';\n\n    /**\n     * Flag to determine if we are currently creating a clean prototype of a class\n     *\n     * @type Boolean\n     * @private\n     * @ignore\n     */\n    var _prototyping = false;\n\n    /**\n     * Method to extend manually - do not do automatically\n     *\n     * @type Array\n     * @private\n     * @ignore\n     */\n    var _hiddenMethods = ['constructor', 'toString', 'valueOf'];\n\n    /**\n     * Lenth of hidden methods array\n     *\n     * @type Number\n     * @private\n     * @ignore\n     */\n    var _hiddenMethodsLength = _hiddenMethods.length;\n\n    /**\n     * Regex to find any calls to a parent method\n     *\n     * @type RegExp\n     * @private\n     * @ignore\n     */\n    var _superMethodRegex = /\\bbase\\b/;\n\n    /**\n     * Blank function\n     *\n     * @type Function\n     * @private\n     * @ignore\n     */\n    var _blankFunction = function() {};\n\n    /**\n     * Prototype default values. When extending methods, if both sources have these values, do not copy them.\n     *\n     * @type Object\n     * @private\n     * @ignore\n     */\n    var _prototypeDefaults = { toSource: null, base: _blankFunction };\n\n    /**\n     * BaseLib class\n     *\n     * A library to create a more traditional OOP interface for developers to work with\n     *\n     * @class Lib.Base.Base\n     *\n     * @constructor\n     */\n    var Base = function() {};\n\n    /**\n     * Subclass a class\n     *\n     * @method extend\n     * @param {Object} [instanceMethods] Instance members/methods\n     * @param {Object} [staticMethods] Static members/methods\n     * @return {Function}\n     * @static\n     */\n    Base.extend = function(instanceMethods, staticMethods) { // subclass\n        var extend = Base.prototype.extend;\n\n        // build the prototype\n        _prototyping = true;\n\n        var proto = new this();\n        extend.call(proto, instanceMethods);\n\n        // call this method from any other method to invoke that method's ancestor\n        proto.base = _prototypeDefaults.base;\n\n        _prototyping = false;\n\n        // create the wrapper for the constructor function\n        var constructor = proto.constructor;\n        var klass = proto.constructor = function() {\n            if (!_prototyping) {\n                // instantiation\n                if (this && (this._constructing || this.constructor === klass)) {\n                    this._constructing = true;\n                    constructor.apply(this, arguments);\n                    this._constructing = false;\n\n                    // casting\n                } else if (arguments.length) {\n                    Base.cast.apply(klass, arguments);\n                }\n            }\n        };\n        // build the class interface\n        extend.call(klass, this);\n        klass.ancestor = this;\n        klass.prototype = proto;\n\n        /**\n         * Return original method\n         *\n         * @method valueOf\n         * @param {String} [type]\n         * @return Function\n         * @static\n         */\n        klass.valueOf = function(type) {\n            return (type === TYPE_OBJECT) ? klass : constructor.valueOf();\n        };\n        extend.call(klass, staticMethods);\n\n        // if static init method exists, call it\n        if (typeof klass.init === TYPE_FUNCTION) {\n            klass.init();\n        }\n\n        return klass;\n    };\n\n    /**\n     * @method extend\n     * @param {String|Object} source\n     * @param {Function} [value]\n     * @chainable\n     */\n    Base.prototype.extend = function(source, value) {\n        // extending with a name/value pair\n        if (typeof source === TYPE_STRING && arguments.length > 1) {\n            var ancestor = this[source];\n            if (\n                ancestor &&\n                    // overriding a method?\n                (typeof value === TYPE_FUNCTION) &&\n                    // the valueOf() comparison is to avoid circular references\n                (!ancestor.valueOf || ancestor.valueOf() !== value.valueOf()) &&\n                _superMethodRegex.test(value)\n            ) {\n                // get the underlying method\n                var method = value.valueOf();\n\n                // override\n                value = function() {\n                    var returnValue;\n                    var previous = this.base || _prototypeDefaults.base;\n                    this.base = ancestor;\n                    if (arguments.length === 0) {\n                        returnValue = method.call(this);\n                    } else {\n                        returnValue = method.apply(this, arguments);\n                    }\n                    this.base = previous;\n                    return returnValue;\n                };\n\n                // point to the underlying method\n                value.valueOf = function(type) {\n                    return (type === TYPE_OBJECT) ? value : method;\n                };\n                value.toString = Base.toString;\n            }\n            this[source] = value;\n\n            // extending with an object literal\n        } else if (source) {\n            var extend = Base.prototype.extend;\n\n            // if this object has a customised extend method then use it\n            if (!_prototyping && typeof this !== TYPE_FUNCTION) {\n                extend = this.extend || extend;\n            }\n\n            // do hidden methods separately\n            // if we are prototyping then include the constructor\n            var i = _prototyping ? 0 : 1;\n            var key;\n            for (; i < _hiddenMethodsLength; i++) {\n                key = _hiddenMethods[i];\n                if (source[key] !== _prototypeDefaults[key]) {\n                    extend.call(this, key, source[key]);\n                }\n            }\n\n            // copy each of the source object's properties to this object\n            for (key in source) {\n                if (!_prototypeDefaults[key]) {\n                    extend.call(this, key, source[key]);\n                }\n            }\n        }\n\n        return this;\n    };\n\n    // initialise\n    Base = Base.extend({\n\n        /**\n         * Default static base method\n         *\n         * @method base\n         * @ignore\n         */\n        base: _prototypeDefaults.base\n\n    }, {\n\n        /**\n         * Parent object/class\n         *\n         * @property ancestor\n         * @type Object\n         * @static\n         * @ignore\n         */\n        ancestor: Object,\n\n        /**\n         * Base.js version\n         *\n         * @property version\n         * @type String\n         * @static\n         * @ignore\n         */\n        version: '1.1',\n\n        /**\n         * Extend current class into another object or class.\n         *\n         * If an object with no prototype is passed, only prototype methods\n         * will be cast EXCEPT for the constructor.\n         *\n         * If an a class (with constructor) is passed, both static and\n         * prototype methods will be cast EXCEPT for the constructor.\n         *\n         * @method cast\n         * @param {Object|Function} class* Classes or objects to cast\n         * @chainable\n         * @static\n         */\n        cast: function() {\n            var i = 0;\n            var length = arguments.length;\n            var extend;\n            var caster;\n\n            for (; i < length; i++) {\n                caster = arguments[i];\n                extend = caster.extend || Base.prototype.extend;\n\n                // cast prototype and static methods\n                if (typeof caster === TYPE_FUNCTION) {\n                    extend = caster.prototype.extend || Base.prototype.extend;\n                    extend.call(caster.prototype, this.prototype);\n                    extend.call(caster, this);\n                    caster.ancestor = this;\n\n                    // cast only prototype methods\n                } else {\n                    extend.call(caster, this.prototype);\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Implement a class into the current class.\n         *\n         * All prototype and static properties will be extended into\n         * `this` EXCEPT for the constructor.\n         *\n         * @method implement\n         * @param {Object|Function} class* Classes or objects to cast\n         * @chainable\n         * @static\n         */\n        implement: function() {\n            for (var i = 0; i < arguments.length; i++) {\n                this.cast.call(arguments[i], this);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get string value of class\n         *\n         * @method toString\n         * @return String\n         * @static\n         */\n        toString: function() {\n            return this.valueOf() + '';\n        }\n\n    });\n\n    return Base;\n\n\n}));\n/*jshint -W004 */ // duplicate variables\n/*jshint -W083 */ // inline functions are used safely\n/**\n * Alpaca forms engine for jQuery\n */\n(function($) {\n\n    /**\n     * Renders an Alpaca field instance that is bound to a DOM element.\n     *\n     * The basic syntax is:\n     *\n     * <code>\n     *     <pre>\n     *         Alpaca(el, config);\n     *     </pre>\n     * </code>\n     *\n     * The full syntax is:\n     *\n     * <code>\n     *     <pre>\n     *         Alpaca(el, {\n     *              \"data\" : {Any} field data (optional),\n     *              \"schema\": {Object} field schema (optional),\n     *              \"options\" : {Object} field options (optional),\n     *              \"view\": {Object|String} field view (object or id reference) (optional),\n     *              \"render\": {Function} callback function for replacing default rendering method (optional),\n     *              \"postRender\": {Function} callback function for post-rendering  (optional),\n     *              \"error\": {Function} callback function for error handling  (optional),\n     *              \"connector\": {Alpaca.Connector} connector for retrieving or storing data, schema, options, view and templates. (optional)\n     *         });\n     *     </pre>\n     * </code>\n     *\n     * @returns {*}\n     */\n    var Alpaca = function()\n    {\n        var args = Alpaca.makeArray(arguments);\n        if (args.length === 0) {\n            // illegal\n            return Alpaca.throwDefaultError(\"You must supply at least one argument.  This argument can either be a DOM element against which Alpaca will generate a form or it can be a function name.  See http://www.alpacajs.org for more details.\");\n        }\n\n        // element is the first argument (either a string or a DOM element)\n        var el = args[0];\n        if (el && Alpaca.isString(el)) {\n            el = $(\"#\" + el);\n        }\n\n        // other arguments we may want to figure out\n        var data = null;\n        var schema = null;\n        var options = null;\n        var view = null;\n        var callback = null;\n        var renderedCallback = null;\n        var errorCallback = null;\n        var connector = null;\n        var notTopLevel = false;\n        var initialSettings = {};\n\n        // if these options are provided, then data, schema, options and source are loaded via connector\n        var dataSource = null;\n        var schemaSource = null;\n        var optionsSource = null;\n        var viewSource = null;\n\n        /**\n         * Finds the Alpaca field instance bound to the dom element.\n         *\n         * First considers the immediate dom element and then looks 1 level deep to children and then up to parent.\n         *\n         * @returns {*}\n         */\n        var findExistingAlpacaBinding = function(domElement, skipPivot)\n        {\n            var existing = null;\n\n            // look at \"data-alpaca-field-id\"\n            var alpacaFieldId = $(domElement).attr(\"data-alpaca-field-id\");\n            if (alpacaFieldId)\n            {\n                var alpacaField = Alpaca.fieldInstances[alpacaFieldId];\n                if (alpacaField)\n                {\n                    existing = alpacaField;\n                }\n            }\n\n            // if not found, look at \"data-alpaca-form-id\"\n            if (!existing)\n            {\n                var formId = $(domElement).attr(\"data-alpaca-form-id\");\n                if (formId)\n                {\n                    var subElements = $(domElement).find(\":first\");\n                    if (subElements.length > 0)\n                    {\n                        var subFieldId = $(subElements[0]).attr(\"data-alpaca-field-id\");\n                        if (subFieldId)\n                        {\n                            var subField = Alpaca.fieldInstances[subFieldId];\n                            if (subField)\n                            {\n                                existing = subField;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // if not found, check for children 0th element\n            if (!existing && !skipPivot)\n            {\n                var childDomElements = $(el).find(\":first\");\n                if (childDomElements.length > 0)\n                {\n                    var childField = findExistingAlpacaBinding(childDomElements[0], true);\n                    if (childField)\n                    {\n                        existing = childField;\n                    }\n                }\n            }\n\n            // if not found, check parent\n            if (!existing && !skipPivot)\n            {\n                var parentEl = $(el).parent();\n                if (parentEl)\n                {\n                    var parentField = findExistingAlpacaBinding(parentEl, true);\n                    if (parentField)\n                    {\n                        existing = parentField;\n                    }\n                }\n            }\n\n            return existing;\n        };\n\n        var specialFunctionNames = [\"get\", \"exists\", \"destroy\"];\n        var isSpecialFunction = (args.length > 1 && Alpaca.isString(args[1]) && (specialFunctionNames.indexOf(args[1]) > -1));\n\n        var existing = findExistingAlpacaBinding(el);\n        if (existing || isSpecialFunction)\n        {\n            if (isSpecialFunction)\n            {\n                // second argument must be a special function name\n                var specialFunctionName = args[1];\n                if (\"get\" === specialFunctionName) {\n                    return existing;\n                }\n                else if (\"exists\" === specialFunctionName) {\n                    return (existing ? true : false);\n                }\n                else if (\"destroy\" === specialFunctionName) {\n                    if (existing) {\n                        existing.destroy();\n                    }\n                    return;\n                }\n\n                return Alpaca.throwDefaultError(\"Unknown special function: \" + specialFunctionName);\n            }\n\n            return existing;\n        }\n        else\n        {\n            var config = null;\n\n            // just a dom element, no other args?\n            if (args.length === 1)\n            {\n                // grab the data inside of the element and use that for config\n                var jsonString = $(el).text();\n\n                config = JSON.parse(jsonString);\n                $(el).html(\"\");\n            }\n            else\n            {\n                if (Alpaca.isObject(args[1]))\n                {\n                    config = args[1];\n                }\n                else if (Alpaca.isFunction(args[1]))\n                {\n                    config = args[1]();\n                }\n                else\n                {\n                    config = {\n                        \"data\": args[1]\n                    };\n                }\n            }\n\n            if (!config)\n            {\n                return Alpaca.throwDefaultError(\"Unable to determine Alpaca configuration\");\n            }\n\n            data = config.data;\n            schema = config.schema;\n            options = config.options;\n            view = config.view;\n            callback = config.render;\n            if (config.callback) {\n                callback = config.callback;\n            }\n            renderedCallback = config.postRender;\n            errorCallback = config.error;\n            connector = config.connector;\n\n            // sources\n            dataSource = config.dataSource;\n            schemaSource = config.schemaSource;\n            optionsSource = config.optionsSource;\n            viewSource = config.viewSource;\n\n            // other\n            if (config.ui) {\n                initialSettings[\"ui\"] = config.ui;\n            }\n            if (config.type) {\n                initialSettings[\"type\"] = config.type;\n            }\n            if (!Alpaca.isEmpty(config.notTopLevel)) {\n                notTopLevel = config.notTopLevel;\n            }\n        }\n\n        // if no error callback is provided, we fall back to a browser alert\n        if (Alpaca.isEmpty(errorCallback)) {\n            errorCallback = Alpaca.defaultErrorCallback;\n        }\n\n        // instantiate the connector (if not already instantiated)\n        // if config is passed in (as object), we instantiate\n        if (!connector || !connector.connect)\n        {\n            var connectorId = \"default\";\n            var connectorConfig = {};\n            if (Alpaca.isString(connector)) {\n                connectorId = connector;\n            }\n            else if (Alpaca.isObject(connector) && connector.id) {\n                connectorId = connector.id;\n                if (connector.config) {\n                    connectorConfig = connector.config;\n                }\n            }\n\n            var ConnectorClass = Alpaca.getConnectorClass(connectorId);\n            if (!ConnectorClass) {\n                ConnectorClass = Alpaca.getConnectorClass(\"default\");\n            }\n            connector = new ConnectorClass(connectorId, connectorConfig);\n        }\n\n        // For second or deeper level of fields, default loader should be the one to do loadAll\n        // since schema, data, options and view should have already been loaded.\n        // Unless we want to load individual fields (other than the templates) using the provided\n        // loader, this should be good enough. The benefit is saving time on loader format checking.\n\n        var loadAllConnector = connector;\n\n        if (notTopLevel) {\n            var LoadAllConnectorClass = Alpaca.getConnectorClass(\"default\");\n            loadAllConnector = new LoadAllConnectorClass(\"default\");\n        }\n\n        if (!options) {\n            options = {};\n        }\n\n        // resets the hideInitValidationError back to default state after first render\n        var _resetInitValidationError = function(field)\n        {\n            // if this is the top-level alpaca field, then we call for validation state to be recalculated across\n            // all child fields\n            if (!field.parent)\n            {\n                // final call to update validation state\n                // only do this if we're not supposed to suspend initial validation errors\n                if (!field.hideInitValidationError)\n                {\n                    field.refreshValidationState(true);\n                }\n\n                // force hideInitValidationError to false for field and all children\n                if (field.view.type !== 'view')\n                {\n                    Alpaca.fieldApplyFieldAndChildren(field, function(field) {\n\n                        // set to false after first validation (even if in CREATE mode, we only force init validation error false on first render)\n                        field.hideInitValidationError = false;\n\n                    });\n                }\n            }\n        };\n\n        // wrap rendered callback to allow for UI treatment (dom focus, etc)\n        var _renderedCallback = function(field)\n        {\n            // if top level, apply a unique observable scope id\n            if (!field.parent)\n            {\n                field.observableScope = Alpaca.generateId();\n            }\n\n            // if we are the top-most control\n            // fire \"ready\" event on every control\n            // go down depth first and fire to lowest controls before trickling back up\n            if (!field.parent)\n            {\n                Alpaca.fireReady(field);\n            }\n\n            // if top level and focus has not been specified, then auto-set\n            if (Alpaca.isUndefined(options.focus) && !field.parent) {\n                options.focus = Alpaca.defaultFocus;\n            }\n\n            // auto-set the focus?\n            if (options && options.focus)\n            {\n                window.setTimeout(function() {\n\n                    var doFocus = function(__field)\n                    {\n                        __field.suspendBlurFocus = true;\n                        __field.focus();\n                        __field.suspendBlurFocus = false;\n                    };\n\n                    if (options.focus)\n                    {\n                        if (field.isControlField && field.isAutoFocusable())\n                        {\n                            // just focus on this one\n                            doFocus(field);\n                        }\n                        else if (field.isContainerField)\n                        {\n                            // if focus = true, then focus on the first child control if it is auto-focusable\n                            // and not read-only\n                            if (options.focus === true)\n                            {\n                                // pick first element in form\n                                if (field.children && field.children.length > 0)\n                                {\n                                    /*\n                                    for (var z = 0; z < field.children.length; z++)\n                                    {\n                                        if (field.children[z].isControlField)\n                                        {\n                                            if (field.children[z].isAutoFocusable() && !field.children[z].options.readonly)\n                                            {\n                                                doFocus(field.children[z]);\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    */\n\n                                    doFocus(field);\n                                }\n                            }\n                            else if (typeof(options.focus) === \"string\")\n                            {\n                                // assume it is a path to the child\n                                var child = field.getControlByPath(options.focus);\n                                if (child && child.isControlField && child.isAutoFocusable())\n                                {\n                                    doFocus(child);\n                                }\n                            }\n                        }\n\n                        _resetInitValidationError(field);\n                    }\n                }, 500);\n            }\n            else\n            {\n                _resetInitValidationError(field);\n            }\n\n            if (renderedCallback)\n            {\n                renderedCallback(field);\n            }\n        };\n\n        loadAllConnector.loadAll({\n            \"data\": data,\n            \"schema\": schema,\n            \"options\": options,\n            \"view\": view,\n            \"dataSource\": dataSource,\n            \"schemaSource\": schemaSource,\n            \"optionsSource\": optionsSource,\n            \"viewSource\": viewSource\n        }, function(loadedData, loadedOptions, loadedSchema, loadedView) {\n\n            // for cases where things could not be loaded via source loaders, fall back to what may have been passed\n            // in directly as values\n\n            loadedData = loadedData ? loadedData : data;\n            loadedSchema = loadedSchema ? loadedSchema: schema;\n            loadedOptions = loadedOptions ? loadedOptions : options;\n            loadedView = loadedView ? loadedView : view;\n\n            // some defaults for the case where data is null\n            // if schema + options are not provided, we assume a text field\n\n            if (Alpaca.isEmpty(loadedData))\n            {\n                if (Alpaca.isEmpty(loadedSchema) && (Alpaca.isEmpty(loadedOptions) || Alpaca.isEmpty(loadedOptions.type)))\n                {\n                    loadedData = \"\";\n\n                    if (Alpaca.isEmpty(loadedOptions))\n                    {\n                        loadedOptions = \"text\";\n                    }\n                    else if (options && Alpaca.isObject(options))\n                    {\n                        loadedOptions.type = \"text\";\n                    }\n                }\n            }\n\n            if (loadedOptions.view)\n            {\n                loadedView = loadedOptions.view;\n            }\n\n            // init alpaca\n            return Alpaca.init(el, loadedData, loadedOptions, loadedSchema, loadedView, initialSettings, callback, _renderedCallback, connector, errorCallback);\n\n        }, function (loadError) {\n            errorCallback(loadError);\n            return null;\n        });\n    };\n\n    /**\n     * @namespace Namespace for all Alpaca Field Class Implementations.\n     */\n    Alpaca.Fields = { };\n\n    /**\n     * @namespace Namespace for all Alpaca Connector Class Implementations.\n     */\n    Alpaca.Connectors = { };\n\n    Alpaca.Extend = $.extend;\n\n    Alpaca.Create = function()\n    {\n        var args = Array.prototype.slice.call(arguments);\n        args.unshift({});\n\n        return $.extend.apply(this, args);\n    };\n\n    // static methods and properties\n    Alpaca.Extend(Alpaca,\n    /** @lends Alpaca */\n    {\n        /**\n         * Makes an array.\n         *\n         * @param {Any} nonArray A non-array variable.\n         * @returns {Array} Array out of the non-array variable.\n         */\n        makeArray : function(nonArray) {\n            return Array.prototype.slice.call(nonArray);\n        },\n\n        /**\n         * Finds whether the type of a variable is function.\n         * @param {Any} obj The variable being evaluated.\n         * @returns {Boolean} True if the variable is a function, false otherwise.\n         */\n        isFunction: function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Function]\";\n        },\n\n        /**\n         * Finds whether the type of a variable is string.\n         * @param {Any} obj The variable being evaluated.\n         * @returns {Boolean} True if the variable is a string, false otherwise.\n         */\n        isString: function(obj) {\n            return (typeof obj === \"string\");\n        },\n\n        /**\n         * Finds whether the type of a variable is object.\n         * @param {Any} obj The variable being evaluated.\n         * @returns {Boolean} True if the variable is an object, false otherwise.\n         */\n        isObject: function(obj) {\n            return !Alpaca.isUndefined(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n        },\n\n        /**\n         * Finds whether the type of a variable is a plain, non-prototyped object.\n         * @param {Any} obj The variable being evaluated.\n         * @returns {Boolean} True if the variable is a plain object, false otherwise.\n         */\n        isPlainObject: function(obj) {\n            return $.isPlainObject(obj);\n        },\n\n        /**\n         * Finds whether the type of a variable is number.\n         * @param {Any} obj The variable being evaluated.\n         * @returns {Boolean} True if the variable is a number, false otherwise.\n         */\n        isNumber: function(obj) {\n            return (typeof obj === \"number\");\n        },\n\n        /**\n         * Finds whether the type of a variable is array.\n         * @param {Any} obj The variable being evaluated.\n         * @returns {Boolean} True if the variable is an array, false otherwise.\n         */\n        isArray: function(obj) {\n            return obj instanceof Array;\n        },\n\n        /**\n         * Finds whether the type of a variable is boolean.\n         * @param {Any} obj The variable being evaluated.\n         * @returns {Boolean} True if the variable is a boolean, false otherwise.\n         */\n        isBoolean: function(obj) {\n            return (typeof obj === \"boolean\");\n        },\n\n        /**\n         * Finds whether the type of a variable is undefined.\n         * @param {Any} obj The variable being evaluated.\n         * @returns {Boolean} True if the variable is a undefined, false otherwise.\n         */\n        isUndefined: function(obj) {\n            return (typeof obj == \"undefined\");\n        },\n\n        /**\n         * Strips any excess whitespace characters from the given text.\n         * Returns the trimmed string.\n         *\n         * @param str\n         *\n         * @return trimmed string\n         */\n        trim: function(text)\n        {\n            var trimmed = text;\n\n            if (trimmed && Alpaca.isString(trimmed))\n            {\n                trimmed = trimmed.replace(/^\\s+|\\s+$/g, '');\n            }\n\n            return trimmed;\n        },\n\n        /**\n         * Provides a safe conversion of an HTML textual string into a DOM object.\n         *\n         * @param x\n         * @return {*}\n         */\n        safeDomParse: function(x)\n        {\n            if (x && Alpaca.isString(x))\n            {\n                x = Alpaca.trim(x);\n\n                // convert to dom\n                var converted = null;\n                try\n                {\n                    converted = $(x);\n                }\n                catch (e)\n                {\n                    // make another attempt to account for safety in some browsers\n                    x = \"<div>\" + x + \"</div>\";\n\n                    converted = $(x).children();\n                }\n\n                return converted;\n            }\n\n            return x;\n        },\n\n        /**\n         * Finds whether a variable is empty.\n         * @param {Any} obj The variable being evaluated.\n         * @param [boolean] includeFunctions whether to include functions in any counts\n         * @returns {Boolean} True if the variable is empty, false otherwise.\n         */\n        isEmpty: function(obj, includeFunctions) {\n\n            var self = this;\n\n            if (Alpaca.isUndefined(obj))\n            {\n                return true;\n            }\n            else if (obj === null)\n            {\n                return true;\n            }\n\n            if (obj && Alpaca.isObject(obj))\n            {\n                var count = self.countProperties(obj, includeFunctions);\n                if (count === 0)\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Counts the number of properties in an object.\n         *\n         * @param obj\n         * @param includeFunctions\n         *\n         * @returns {number}\n         */\n        countProperties: function(obj, includeFunctions) {\n            var count = 0;\n\n            if (obj && Alpaca.isObject(obj))\n            {\n                for (var k in obj)\n                {\n                    if (obj.hasOwnProperty(k))\n                    {\n                        if (includeFunctions) {\n                            count++;\n                        } else {\n                            if (typeof(obj[k]) !== \"function\") {\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n\n            return count;\n        },\n\n        /**\n         * Produces a copy of the given JS value.\n         *\n         * If the value is a simple array or a simple object, then a pure copy is produced.\n         *\n         * If it's a complex object or a function, then the reference is copied (i.e. not truly a copy).\n         *\n         * @param thing\n         * @return {*}\n         */\n        copyOf: function(thing)\n        {\n            var copy = thing;\n\n            if (Alpaca.isArray(thing))\n            {\n                copy = [];\n\n                for (var i = 0; i < thing.length; i++)\n                {\n                    copy.push(Alpaca.copyOf(thing[i]));\n                }\n            }\n            else if (Alpaca.isObject(thing))\n            {\n                if (thing instanceof Date)\n                {\n                    // date\n                    return new Date(thing.getTime());\n                }\n                else if (thing instanceof RegExp)\n                {\n                    // regular expression\n                    return new RegExp(thing);\n                }\n                else if (thing.nodeType && \"cloneNode\" in thing)\n                {\n                    // DOM node\n                    copy = thing.cloneNode(true);\n                }\n                else if ($.isPlainObject(thing))\n                {\n                    copy = {};\n\n                    for (var k in thing)\n                    {\n                        if (thing.hasOwnProperty(k))\n                        {\n                            copy[k] = Alpaca.copyOf(thing[k]);\n                        }\n                    }\n                }\n                else\n                {\n                    // otherwise, it's some other kind of object so we just do a referential copy\n                    // in other words, not a copy\n                }\n            }\n\n            return copy;\n        },\n\n        copyInto: function(target, source)\n        {\n            for (var i in source)\n            {\n                if (source.hasOwnProperty(i) && !this.isFunction(this[i]))\n                {\n                    target[i] = source[i];\n                }\n            }\n        },\n\n\n        /**\n         * Retained for legacy purposes.  Alias for copyOf().\n         *\n         * @param object\n         * @returns {*}\n         */\n        cloneObject: function(object)\n        {\n            return Alpaca.copyOf(object);\n        },\n\n        /**\n         * Splices a string.\n         *\n         * @param {String} source Source string to be spliced.\n         * @param {Integer} splicePoint Splice location.\n         * @param {String} splice String to be spliced in.\n         * @returns {String} Spliced string\n         */\n        spliceIn: function(source, splicePoint, splice) {\n            return source.substring(0, splicePoint) + splice + source.substring(splicePoint, source.length);\n        },\n\n        /**\n         * Compacts an array.\n         *\n         * @param {Array} arr Source array to be compacted.\n         * @returns {Array} Compacted array.\n         */\n        compactArray: function(arr) {\n            var n = [], l = arr.length,i;\n            for (i = 0; i < l; i++) {\n                if (!lang.isNull(arr[i]) && !lang.isUndefined(arr[i])) {\n                    n.push(arr[i]);\n                }\n            }\n            return n;\n        },\n\n        /**\n         * Removes accents from a string.\n         *\n         * @param {String} str Source string.\n         * @returns {String} Cleaned string without accents.\n         */\n        removeAccents: function(str) {\n            return str.replace(/[àáâãäå]/g, \"a\").replace(/[èéêë]/g, \"e\").replace(/[ìíîï]/g, \"i\").replace(/[òóôõö]/g, \"o\").replace(/[ùúûü]/g, \"u\").replace(/[ýÿ]/g, \"y\").replace(/[ñ]/g, \"n\").replace(/[ç]/g, \"c\").replace(/[œ]/g, \"oe\").replace(/[æ]/g, \"ae\");\n        },\n\n        /**\n         * @private\n         * @param el\n         * @param arr\n         * @param fn\n         */\n        indexOf: function(el, arr, fn) {\n            var l = arr.length,i;\n\n            if (!Alpaca.isFunction(fn)) {\n                /**\n                 * @ignore\n                 * @param elt\n                 * @param arrElt\n                 */\n                fn = function(elt, arrElt) {\n                    return elt === arrElt;\n                };\n            }\n\n            for (i = 0; i < l; i++) {\n                if (fn.call({}, el, arr[i])) {\n                    return i;\n                }\n            }\n\n            return -1;\n        },\n\n        /**\n         * Static counter for generating a unique ID.\n         */\n        uniqueIdCounter: 0,\n\n        /**\n         * Default Locale.\n         */\n        defaultLocale: \"en_US\",\n\n        /**\n         * Whether to set focus by default\n         */\n        defaultFocus: true,\n\n        /**\n         * The default sort function to use for enumerations.\n         */\n        defaultSort: function(a, b) {\n\n            if (a.text > b.text) {\n                return 1;\n            }\n            else if (a.text < b.text) {\n                return -1;\n            }\n\n            return 0;\n        },\n\n        /**\n         * Sets the default Locale.\n         *\n         * @param {String} locale New default locale.\n         */\n        setDefaultLocale: function(locale) {\n            this.defaultLocale = locale;\n        },\n\n        /**\n         * Field Type to Schema Type Mappings.\n         */\n        defaultSchemaFieldMapping: {},\n\n        /**\n         * Registers a field type to schema data type mapping.\n         *\n         * @param {String} schemaType Schema data type.\n         * @param {String} fieldType Field type.\n         */\n        registerDefaultSchemaFieldMapping: function(schemaType, fieldType) {\n            if (schemaType && fieldType) {\n                this.defaultSchemaFieldMapping[schemaType] = fieldType;\n            }\n        },\n\n        /**\n         * Field Type to Schema Format Mappings.\n         */\n        defaultFormatFieldMapping: {},\n\n        /**\n         * Registers a field type to schema format mapping.\n         *\n         * @param {String} format Schema format.\n         * @param {String} fieldType Field type.\n         */\n        registerDefaultFormatFieldMapping: function(format, fieldType) {\n            if (format && fieldType) {\n                this.defaultFormatFieldMapping[format] = fieldType;\n            }\n        },\n\n        /**\n         * Gets schema type of a variable.\n         *\n         * @param {Any} data The variable.\n         * @returns {String} Schema type of the variable.\n         */\n        getSchemaType: function(data) {\n\n            var schemaType = null;\n\n            // map data types to default field types\n            if (Alpaca.isEmpty(data)) {\n                schemaType = \"string\";\n            }\n            else if (Alpaca.isArray(data)) {\n                schemaType = \"array\";\n            }\n            else if (Alpaca.isObject(data)) {\n                schemaType = \"object\";\n            }\n            else if (Alpaca.isString(data)) {\n                schemaType = \"string\";\n            }\n            else if (Alpaca.isNumber(data)) {\n                schemaType = \"number\";\n            }\n            else if (Alpaca.isBoolean(data)) {\n                schemaType = \"boolean\";\n            }\n            // Last check for data that carries functions -- GitanaConnector case.\n            if (!schemaType && (typeof data === 'object')) {\n                schemaType = \"object\";\n            }\n\n            return schemaType;\n        },\n\n        /**\n         * Makes a best guess at the options field type if none provided.\n         *\n         * @param schema\n         * @returns {string} the field type\n         */\n        guessOptionsType: function(schema)\n        {\n            var type = null;\n\n            if (schema && typeof(schema[\"enum\"]) !== \"undefined\")\n            {\n                if (schema[\"enum\"].length > 3)\n                {\n                    type = \"select\";\n                }\n                else\n                {\n                    type = \"radio\";\n                }\n            }\n            else\n            {\n                type = Alpaca.defaultSchemaFieldMapping[schema.type];\n            }\n\n            // check if it has format defined\n            if (schema.format && Alpaca.defaultFormatFieldMapping[schema.format])\n            {\n                type = Alpaca.defaultFormatFieldMapping[schema.format];\n            }\n\n            return type;\n        },\n\n        /**\n         * Alpaca Views.\n         */\n        views: {},\n\n        /**\n         * Generates a valid view id.\n         *\n         * @returns {String} A valid unique view id.\n         */\n        generateViewId : function () {\n            return \"view-\" + this.generateId();\n        },\n\n        /**\n         * Registers a view with the framework.\n         *\n         * @param viewObject\n         */\n        registerView: function(viewObject)\n        {\n            var viewId = viewObject.id;\n\n            if (!viewId)\n            {\n                return Alpaca.throwDefaultError(\"Cannot register view with missing view id: \" + viewId);\n            }\n\n            var existingView = this.views[viewId];\n            if (existingView)\n            {\n                Alpaca.mergeObject(existingView, viewObject);\n            }\n            else\n            {\n                this.views[viewId] = viewObject;\n\n                if (!viewObject.templates)\n                {\n                    viewObject.templates = {};\n                }\n\n                // if we have any precompiled views, flag them\n                var engineIds = Alpaca.TemplateEngineRegistry.ids();\n                for (var i = 0; i < engineIds.length; i++)\n                {\n                    var engineId = engineIds[i];\n\n                    var engine = Alpaca.TemplateEngineRegistry.find(engineId);\n                    if (engine)\n                    {\n                        // ask the engine if it has any cache keys for view templates for this view\n                        var cacheKeys = engine.findCacheKeys(viewId);\n                        for (var z = 0; z < cacheKeys.length; z++)\n                        {\n                            var parts = Alpaca.splitCacheKey(cacheKeys[z]);\n\n                            // mark as precompiled\n                            viewObject.templates[parts.templateId] = {\n                                \"type\": engineId,\n                                \"template\": true,\n                                \"cacheKey\": cacheKeys[z]\n                            };\n                        }\n                    }\n                }\n            }\n        },\n\n        /**\n         * Retrieves a normalized view by view id.\n         *\n         * @param viewId\n         * @return {*}\n         */\n        getNormalizedView: function(viewId)\n        {\n            return this.normalizedViews[viewId];\n        },\n\n        /**\n         * Resolves which view handles a given theme and type of operation.\n         *\n         * @param {String} ui\n         * @param {String} type\n         *\n         * @returns {String} the view id\n         */\n        lookupNormalizedView: function(ui, type)\n        {\n            var theViewId = null;\n\n            for (var viewId in this.normalizedViews)\n            {\n                var view = this.normalizedViews[viewId];\n\n                if (view.ui === ui && view.type === type)\n                {\n                    theViewId = viewId;\n                    break;\n                }\n            }\n\n            return theViewId;\n        },\n\n        /**\n         * Registers a template to a view.\n         *\n         * @param {String} templateId Template id.\n         * @param {String|Object} template Either the text of the template or an object containing { \"type\": \"<templateEngineIdentifier>\", \"template\": \"<markup>\" }\n         * @param [String] viewId the optional view id.  If none is provided, then all registrations are to the default view.\n         */\n        registerTemplate: function(templateId, template, viewId)\n        {\n            // if no view specified, fall back to the base view which is \"base\"\n            if (!viewId)\n            {\n                viewId = \"base\";\n            }\n\n            if (!this.views[viewId])\n            {\n                this.views[viewId] = {};\n                this.views[viewId].id = viewId;\n            }\n\n            if (!this.views[viewId].templates)\n            {\n                this.views[viewId].templates = {};\n            }\n\n            this.views[viewId].templates[templateId] = template;\n\n            // if normalized views have already been computed, then wipe them down\n            // this allows them to be re-computed on the next render and allows this template to participate\n            if (Alpaca.countProperties(Alpaca.normalizedViews) > 0)\n            {\n                Alpaca.normalizedViews = {};\n            }\n        },\n\n        /**\n         * Registers list of templates to a view.\n         *\n         * @param {Array} templates Templates being registered\n         * @param {String} viewId Id of the view that the templates being registered to.\n         */\n        registerTemplates: function(templates, viewId) {\n            for (var templateId in templates) {\n                this.registerTemplate(templateId, templates[templateId], viewId);\n            }\n        },\n\n        /**\n         * Registers a message to a view.\n         *\n         * @param {String} messageId Id of the message being registered.\n         * @param {String} message Message to be registered\n         * @param {String} viewId Id of the view that the message being registered to.\n         */\n        registerMessage: function(messageId, message, viewId)\n        {\n            // if no view specified, fall back to the base view which is \"base\"\n            if (!viewId)\n            {\n                viewId = \"base\";\n            }\n\n            if (!this.views[viewId])\n            {\n                this.views[viewId] = {};\n                this.views[viewId].id = viewId;\n            }\n\n            if (!this.views[viewId].messages)\n            {\n                this.views[viewId].messages = {};\n            }\n\n            this.views[viewId].messages[messageId] = message;\n        },\n\n        /**\n         * Registers messages with a view.\n         *\n         * @param {Array} messages Messages to be registered.\n         * @param {String} viewId Id of the view that the messages being registered to.\n         */\n        registerMessages: function(messages, viewId) {\n            for (var messageId in messages) {\n                if (messages.hasOwnProperty(messageId)) {\n                    this.registerMessage(messageId, messages[messageId], viewId);\n                }\n            }\n        },\n\n        /**\n         * Default date format.\n         */\n        defaultDateFormat: \"MM/DD/YYYY\",\n\n        /**\n         * Default time format.\n         */\n        defaultTimeFormat: \"HH:SS\",\n\n        /**\n         * Regular expressions for fields.\n         */\n        regexps:\n        {\n            \"email\": /^[a-z0-9!\\#\\$%&'\\*\\-\\/=\\?\\+\\-\\^_`\\{\\|\\}~]+(?:\\.[a-z0-9!\\#\\$%&'\\*\\-\\/=\\?\\+\\-\\^_`\\{\\|\\}~]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z]{2,6}$/i,\n            \"url\": /^(http|https|ftp):\\/\\/[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(\\:[0-9]{1,5})?(\\/.*)?$/i,\n            \"intranet-url\": /^(http|https|ftp):\\/\\/[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*(\\:[0-9]{1,5})?(\\/.*)?$/i,\n            \"password\": /^[0-9a-zA-Z\\x20-\\x7E]*$/,\n            \"date\": /^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.]\\d\\d$/,\n            \"integer\": /^([\\+\\-]?([1-9]\\d*)|0)$/,\n            \"number\":/^([\\+\\-]?((([0-9]+(\\.)?)|([0-9]*\\.[0-9]+))([eE][+-]?[0-9]+)?))$/,\n            \"phone\":/^(\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4}))?$/,\n            \"ipv4\":/^(?:1\\d?\\d?|2(?:[0-4]\\d?|[6789]|5[0-5]?)?|[3-9]\\d?|0)(?:\\.(?:1\\d?\\d?|2(?:[0-4]\\d?|[6789]|5[0-5]?)?|[3-9]\\d?|0)){3}$/,\n            \"zipcode-five\": /^(\\d{5})?$/,\n            \"zipcode-nine\": /^(\\d{5}(-\\d{4})?)?$/,\n            \"whitespace\": /^\\s+$/\n        },\n\n        /**\n         * Map of instantiated fields.\n         */\n        fieldInstances: {},\n\n        /**\n         * Maps of field types to field class implementations.\n         */\n        fieldClassRegistry: {},\n\n        /**\n         * Registers an implementation class for a type of field.\n         *\n         * @param {String} type Field type.\n         * @param {Alpaca.Field} fieldClass Field class.\n         */\n        registerFieldClass: function(type, fieldClass) {\n            this.fieldClassRegistry[type] = fieldClass;\n        },\n\n        /**\n         * Returns the implementation class for a type of field.\n         *\n         * @param {String} type Field type.\n         *\n         * @returns {Alpaca.Field} Field class mapped to field type.\n         */\n        getFieldClass: function(type) {\n            return this.fieldClassRegistry[type];\n        },\n\n        /**\n         * Gets the field type id for a given field implementation class.\n         *\n         * @param {Alpaca.Field} fieldClass Field class.\n         *\n         * @returns {String} Field type of the field class.\n         */\n        getFieldClassType: function(fieldClass) {\n            for (var type in this.fieldClassRegistry) {\n                if (this.fieldClassRegistry.hasOwnProperty(type)) {\n                    if (this.fieldClassRegistry[type] === fieldClass) {\n                        return type;\n                    }\n                }\n            }\n            return null;\n        },\n\n        /**\n         * Maps of connector types to connector class implementations.\n         */\n        connectorClassRegistry: {},\n\n        /**\n         * Registers an implementation class for a connector type.\n         *\n         * @param {String} type cConnect type\n         * @param {Alpaca.Connector} connectorClass Connector class.\n         */\n        registerConnectorClass: function(type, connectorClass) {\n            this.connectorClassRegistry[type] = connectorClass;\n        },\n\n        /**\n         * Returns the implementation class for a connector type.\n         *\n         * @param {String} type Connect type.\n         * @returns {Alpaca.Connector} Connector class mapped to connect type.\n         */\n        getConnectorClass: function(type) {\n            return this.connectorClassRegistry[type];\n        },\n\n        /**\n         * Replaces each substring of this string that matches the given regular expression with the given replacement.\n         *\n         * @param {String} text Source string being replaced.\n         * @param {String} replace Regular expression for replacing.\n         * @param {String} with_this Replacement.\n         *\n         * @returns {String} Replaced string.\n         */\n        replaceAll: function(text, replace, with_this) {\n            return text.replace(new RegExp(replace, 'g'), with_this);\n        },\n\n        /**\n         * Creates an element with a given tag name, dom/style attributes and class names.\n         *\n         * @param {String} tag Tag name.\n         * @param {Array} domAttributes DOM attributes.\n         * @param {Array} styleAttributes Style attributes.\n         * @param {Array} classNames Class names.\n         *\n         * @returns {Object} New element with the tag name and all other provided attributes.\n         */\n        element: function(tag, domAttributes, styleAttributes, classNames) {\n            var el = $(\"<\" + tag + \"/>\");\n\n            if (domAttributes) {\n                el.attr(domAttributes);\n            }\n            if (styleAttributes) {\n                el.css(styleAttributes);\n            }\n            if (classNames) {\n                for (var className in classNames) {\n                    el.addClass(className);\n                }\n            }\n        },\n\n        /**\n         * Replaces a template with list of replacements.\n         *\n         * @param {String} template Template being processed.\n         * @param {String} substitutions List of substitutions.\n         *\n         * @returns {String} Replaced template.\n         */\n        elementFromTemplate: function(template, substitutions) {\n            var html = template;\n            if (substitutions) {\n                for (var x in substitutions) {\n                    html = Alpaca.replaceAll(html, \"${\" + x + \"}\", substitutions[x]);\n                }\n            }\n            return $(html);\n        },\n\n        /**\n         * Generates a unique alpaca id.\n         *\n         * @returns {String} The unique alpaca id.\n         */\n        generateId: function() {\n            Alpaca.uniqueIdCounter++;\n            return \"alpaca\" + Alpaca.uniqueIdCounter;\n        },\n\n        /**\n         * Helper function to provide YAHOO later like capabilities.\n         */\n        later: function(when, o, fn, data, periodic) {\n            when = when || 0;\n            o = o || {};\n            var m = fn, d = $.makeArray(data), f, r;\n\n            if (typeof fn === \"string\") {\n                m = o[fn];\n            }\n\n            if (!m) {\n                // Throw an error about the method\n                throw {\n                    name: 'TypeError',\n                    message: \"The function is undefined.\"\n                };\n            }\n\n            /**\n             * @ignore\n             */\n            f = function() {\n                m.apply(o, d);\n            };\n\n            r = (periodic) ? setInterval(f, when) : setTimeout(f, when);\n\n            return {\n                id: r,\n                interval: periodic,\n                cancel: function() {\n                    if (this.interval) {\n                        clearInterval(r);\n                    } else {\n                        clearTimeout(r);\n                    }\n                }\n            };\n        },\n\n        /**\n         * Finds if an string ends with a given suffix.\n         *\n         * @param {String} text The string being evaluated.\n         * @param {String} suffix Suffix.\n         * @returns {Boolean} True if the string ends with the given suffix, false otherwise.\n         */\n        endsWith : function(text, suffix) {\n            return text.indexOf(suffix, text.length - suffix.length) !== -1;\n        },\n\n        /**\n         * Finds if an string starts with a given prefix.\n         *\n         * @param {String} text The string being evaluated.\n         * @param {String} prefix Prefix\n         * @returns {Boolean} True if the string starts with the given prefix, false otherwise.\n         */\n        startsWith : function(text, prefix) {\n            //return (text.match(\"^\" + prefix) == prefix);\n            return text.substr(0, prefix.length) === prefix;\n        },\n\n        /**\n         * Finds if a variable is a URI.\n         *\n         * @param {Object} obj The variable being evaluated.\n         * @returns {Boolean} True if the variable is a URI, false otherwise.\n         */\n        isUri : function(obj) {\n            return Alpaca.isString(obj) && (Alpaca.startsWith(obj, \"http://\") ||\n                    Alpaca.startsWith(obj, \"https://\") ||\n                    Alpaca.startsWith(obj, \"/\") ||\n                    Alpaca.startsWith(obj, \"./\") ||\n                    Alpaca.startsWith(obj, \"../\"));\n        },\n\n        /**\n         * Picks a sub-element from an object using a keys array.\n         *\n         * @param {Object} object Object to be traversed\n         * @param {String|Array} keys Either an array of tokens or a dot-delimited string (i.e. \"data.user.firstname\")\n         * @param {String} subprop Optional subproperty to traverse (i.e.. \"data.properties.user.properties.firstname\")\n         *\n         * @returns {Object} Sub element mapped to the given key path\n         */\n        traverseObject : function(object, keys, subprop) {\n            if (Alpaca.isString(keys)) {\n                keys = keys.split(\".\");\n            }\n\n            var element = null;\n            var current = object;\n\n            var key = null;\n            do {\n                key = keys.shift();\n                if (subprop && key === subprop) {\n                    key = keys.shift();\n                }\n                if (!Alpaca.isEmpty(current[key])) {\n                    current = current[key];\n                    if (keys.length === 0) {\n                        element = current;\n                    }\n                } else {\n                    keys = [];\n                }\n            } while (keys.length > 0);\n\n            return element;\n        },\n\n        /**\n         * Helper function that executes the given function upon each element in the array\n         * The element of the array becomes the \"this\" variable in the function\n         *\n         * @param {Array|Object} data Either an array or an object\n         * @param {Function} func Function to be executed.\n         */\n        each : function(data, func) {\n            if (Alpaca.isArray(data)) {\n                for (var i = 0; i < data.length; i++) {\n                    func.apply(data[i]);\n                }\n            } else if (Alpaca.isObject(data)) {\n                for (var key in data) {\n                    func.apply(data[key]);\n                }\n            }\n        },\n\n        /**\n         * Merges json obj2 into obj1 using a recursive approach.\n         *\n         * @param {Object} obj1 Destination object.\n         * @param {Object} obj2 Source object.\n         * @param {Function} validKeyFunction Function used to determine whether to include a given key or not.\n         *\n         * @returns {Object} Merged object.\n         */\n        merge : function(obj1, obj2, validKeyFunction) {\n            if (!obj1) {\n                obj1 = {};\n            }\n            for (var key in obj2) {\n                var valid = true;\n\n                if (validKeyFunction) {\n                    valid = validKeyFunction(key);\n                }\n\n                if (valid) {\n                    if (Alpaca.isEmpty(obj2[key])) {\n                        obj1[key] = obj2[key];\n                    } else {\n                        if (Alpaca.isObject(obj2[key])) {\n                            if (!obj1[key]) {\n                                obj1[key] = {};\n                            }\n                            obj1[key] = Alpaca.merge(obj1[key], obj2[key]);\n                        } else {\n                            obj1[key] = obj2[key];\n                        }\n                    }\n                }\n            }\n\n            return obj1;\n        },\n\n        /**\n         * Merges json \"source\" into \"target\" using a recursive approach. The merge will include empty values\n         * of obj2 properties.\n         *\n         * @param {Object} target Target object.\n         * @param {Object} source Source object.\n         *\n         * @returns {Object} Merged object\n         */\n        mergeObject : function(target, source) {\n\n            if (!target) {\n                target = {};\n            }\n\n            if (!source) {\n                source = {};\n            }\n\n            this.mergeObject2(source, target);\n\n            return target;\n        },\n\n        mergeObject2: function(source, target)\n        {\n            var isArray = Alpaca.isArray;\n            var isObject = Alpaca.isObject;\n            var isUndefined = Alpaca.isUndefined;\n            var copyOf = Alpaca.copyOf;\n\n            var _merge = function(source, target)\n            {\n                if (isArray(source))\n                {\n                    if (isArray(target))\n                    {\n                        // merge array elements\n                        $.each(source, function(index) {\n                            target.push(copyOf(source[index]));\n                        });\n                    }\n                    else\n                    {\n                        // something is already in the target that isn't an ARRAY\n                        // skip\n                    }\n                }\n                else if (isObject(source))\n                {\n                    if (isObject(target))\n                    {\n                        // merge object properties\n                        $.each(source, function(key) {\n\n                            if (isUndefined(target[key])) {\n                                target[key] = copyOf(source[key]);\n                            } else {\n                                target[key] = _merge(source[key], target[key]);\n                            }\n\n                        });\n                    }\n                    else\n                    {\n                        // something is already in the target that isn't an OBJECT\n                        // skip\n                    }\n\n                }\n                else\n                {\n                    // otherwise, it's a scalar, always overwrite\n                    target = copyOf(source);\n                }\n\n                return target;\n            };\n\n            _merge(source, target);\n\n            return target;\n        },\n\n        /**\n         * Substitutes a string with a list of tokens.\n         *\n         * @param text Source string.\n         * @param args List of tokens.\n         *\n         * @returns Substituted string.\n         */\n        substituteTokens : function(text, args) {\n\n            if (!Alpaca.isEmpty(text)) {\n                for (var i = 0; i < args.length; i++) {\n                    var token = \"{\" + i + \"}\";\n\n                    var x = text.indexOf(token);\n                    if (x > -1) {\n                        var nt = text.substring(0, x) + args[i] + text.substring(x + 3);\n                        text = nt;\n                        //text = Alpaca.replaceAll(text, token, args[i]);\n                    }\n                }\n            }\n            return text;\n        },\n\n        /**\n         * Compares two objects.\n         *\n         * @param {Object} obj1 First object.\n         * @param {Object} obj2 Second object.\n         *\n         * @returns {Boolean} True if two objects are same, false otherwise.\n         */\n        compareObject : function(obj1, obj2) {\n            return equiv(obj1, obj2);\n        },\n\n        /**\n         * Compares content of two arrays.\n         *\n         * @param {Array} arr_1 First array.\n         * @param {Array} arr_2 Second array.\n         * @returns {Boolean} True if two arrays have same content, false otherwise.\n         */\n        compareArrayContent : function(a, b) {\n            var equal = a && b && (a.length === b.length);\n\n            if (equal) {\n                for (var i = a.length - 1; i >= 0; i--) {\n                    var v = a[i];\n                    if ($.inArray(v, b) < 0) {\n                        return false;\n                    }\n                }\n            }\n\n            return equal;\n        },\n\n        testRegex: function(expression, textValue)\n        {\n            var regex = new RegExp(expression);\n\n            return regex.test(textValue);\n        },\n\n        /**\n         * Finds whether a variable has empty value or not.\n         *\n         * @param {Any} val Variable to be evaluated.\n         * @param [boolean] includeFunctions whether to include function in any counts\n         *\n         * @returns {Boolean} True if the variable has empty value, false otherwise.\n         */\n        isValEmpty : function(val, includeFunctions) {\n            var empty = false;\n            if (Alpaca.isEmpty(val, includeFunctions)) {\n                empty = true;\n            } else {\n                if (Alpaca.isString(val) && val === \"\") {\n                    empty = true;\n                }\n                if (Alpaca.isObject(val) && $.isEmptyObject(val)) {\n                    empty = true;\n                }\n                if (Alpaca.isArray(val) && val.length === 0) {\n                    empty = true;\n                }\n\n                /*\n                if (Alpaca.isNumber(val) && isNaN(val)) {\n                    empty = true;\n                }\n                */\n            }\n            return empty;\n        },\n\n        /**\n         * Initial function for setting up field instance and executing callbacks if needed.\n         *\n         * @param {Object} el Container element.\n         * @param {Object} data Field data.\n         * @param {Object} options Field options.\n         * @param {Object} schema Field schema.\n         * @param {Object|String} view Field view.\n         * @param {Object} initialSettings any additional settings provided to the top-level Alpaca object\n         * @param {Function} callback Render callback.\n         * @param {Function} renderedCallback Post-render callback.\n         * @param {Alpaca.connector} connector Field connector.\n         * @param {Function} errorCallback Error callback.\n         *\n         * @returns {Alpaca.Field} New field instance.\n         */\n        init: function(el, data, options, schema, view, initialSettings, callback, renderedCallback, connector, errorCallback) {\n\n            var self = this;\n\n            ///////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            // COMPILATION\n            //\n            ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n            // if they provided an inline view object, we assign an id and store onto views map\n            // so that it gets compiled along with the rest\n            if (Alpaca.isObject(view)) {\n                var viewId = view.id;\n                if (!viewId) {\n                    view.id = this.generateViewId();\n                }\n                var parentId = view.parent;\n                if (!parentId)\n                {\n                    view.parent = \"bootstrap-edit\";\n                }\n                this.registerView(view);\n                view = view.id;\n            }\n\n            // compile all of the views and templates\n            this.compile(function(report) {\n\n                if (report.errors && report.errors.length > 0)\n                {\n                    var messages = [];\n\n                    for (var i = 0; i < report.errors.length; i++)\n                    {\n                        var viewId = report.errors[i].view;\n                        var cacheKey = report.errors[i].cacheKey\n                        var err = report.errors[i].err;\n\n                        var text = \"The template with cache key: \" + cacheKey + \" for view: \" + viewId + \" failed to compile\";\n                        if (err && err.message) {\n                            text += \", message: \" + err.message;\n\n                            messages.push(err.message);\n                        }\n                        if (err) {\n                            text += \", err: \" + JSON.stringify(err);\n                        }\n                        Alpaca.logError(text);\n\n                        delete self.normalizedViews[viewId];\n                        delete self.views[viewId];\n                    }\n\n                    return Alpaca.throwErrorWithCallback(\"View compilation failed, cannot initialize Alpaca. \" + messages.join(\", \"), errorCallback);\n                }\n\n                self._init(el, data, options, schema, view, initialSettings, callback, renderedCallback, connector, errorCallback);\n            }, errorCallback);\n        },\n\n        _init: function(el, data, options, schema, view, initialSettings, callback, renderedCallback, connector, errorCallback)\n        {\n            var self = this;\n\n            ///////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            // VIEW RESOLUTION\n            //\n            ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n            // make some intelligent guesses about what view id we might default to in case they want to use\n            // auto-view selection.  We detect jquery-ui, bootstrap and jquerymobile.  If nothing can be detected,\n            // we fall back to straight web views.\n            var fallbackUI   = Alpaca.defaultView || null;\n            var fallbackType = null;\n\n            // detect jQuery Mobile\n            if ($.mobile && !fallbackUI) {\n                fallbackUI = \"jquerymobile\";\n            }\n\n            // detect twitter bootstrap\n            var bootstrapDetected = (typeof $.fn.modal === 'function');\n            if (bootstrapDetected && !fallbackUI) {\n                fallbackUI = \"bootstrap\";\n            }\n\n            // detect jquery ui\n            var jQueryUIDetected = (typeof($.ui) !== \"undefined\");\n            if (jQueryUIDetected && !fallbackUI) {\n                fallbackUI = \"jqueryui\";\n            }\n\n            if (fallbackUI)\n            {\n                if (data) {\n                    fallbackType = \"edit\";\n                } else {\n                    fallbackType = \"create\";\n                }\n            }\n\n            // if no view provided, but they provided \"ui\" and optionally \"type\", then we try to auto-select the view\n            if (!view)\n            {\n                var ui = initialSettings.ui;\n                var type = initialSettings.type;\n\n                if (!ui)\n                {\n                    if (!fallbackUI) {\n                        fallbackUI = Alpaca.defaultUI;\n                    }\n                    if (fallbackUI) {\n                        ui = fallbackUI;\n                    }\n                }\n\n                if (ui) {\n                    if (!type) {\n                        type = fallbackType ? fallbackType : \"edit\";\n                    }\n\n                    Alpaca.logDebug(\"No view provided but found request for UI: \" + ui + \" and type: \" + type);\n\n                    // see if we can auto-select a view\n                    view = this.lookupNormalizedView(ui, type);\n                    if (view) {\n                        Alpaca.logDebug(\"Found view: \" + view);\n                    } else {\n                        Alpaca.logDebug(\"No view found for UI: \" + ui + \" and type: \" + type);\n                    }\n                }\n            }\n\n            // NOTE: at this point view is a string (the view id) or it is empty/null\n\n            // if still no view, then default fallback to our detected view or the default\n            if (!view)\n            {\n                return Alpaca.throwErrorWithCallback(\"A view was not specified and could not be automatically determined.\", errorCallback);\n            }\n            else\n            {\n                // debugging: if the view isn't available, we want to report it right away\n                if (Alpaca.isString(view))\n                {\n                    if (!this.normalizedViews[view])\n                    {\n                        return Alpaca.throwErrorWithCallback(\"The desired view: \" + view + \" could not be loaded.  Please make sure it is loaded and not misspelled.\", errorCallback);\n                    }\n                }\n\n\n                ///////////////////////////////////////////////////////////////////////////////////////////////////\n                //\n                // FIELD INSTANTIATION\n                //\n                ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n                // TEST - swap code\n                // swap el -> placeholder\n                //var tempHolder = $(\"<div></div>\");\n                //$(el).before(tempHolder);\n                //$(el).remove();\n\n                var field = Alpaca.createFieldInstance(el, data, options, schema, view, connector, errorCallback);\n                if (field)\n                {\n                    // hide field while rendering\n                    $(el).addClass(\"alpaca-field-rendering\");\n                    $(el).addClass(\"alpaca-hidden\");\n\n                    Alpaca.fieldInstances[field.getId()] = field;\n\n                    // mechanism for looking up field instances by id\n                    field.allFieldInstances = function()\n                    {\n                        return Alpaca.fieldInstances;\n                    };\n\n                    // allow callbacks defined through view\n                    if (Alpaca.isEmpty(callback)) {\n                        callback = field.view.render;\n                    }\n                    if (Alpaca.isEmpty(renderedCallback)) {\n                        renderedCallback = field.view.postRender;\n                    }\n\n                    var fin = function()\n                    {\n                        // if this is the top-level alpaca field, we apply some additional CSS classes\n                        if (!field.parent)\n                        {\n                            field.getFieldEl().addClass(\"alpaca-\" + self.getNormalizedView(view).type);\n                        }\n\n                        // if this is the top-level alpaca field, we mark as top\n                        if (!field.parent)\n                        {\n                            field.getFieldEl().addClass(\"alpaca-top\");\n                        }\n\n                        /*\n                        // if this is the top-level alpaca field, then we call for validation state to be recalculated across\n                        // all child fields\n                        if (!field.parent)\n                        {\n                            // final call to update validation state\n                            // only do this if we're not supposed to suspend initial validation errors\n                            if (!field.hideInitValidationError)\n                            {\n                                field.refreshValidationState(true);\n                            }\n\n                            // force hideInitValidationError to false for field and all children\n                            if (field.view.type !== 'view')\n                            {\n                                Alpaca.fieldApplyFieldAndChildren(field, function(field) {\n\n                                    // set to false after first validation (even if in CREATE mode, we only force init validation error false on first render)\n                                    field.hideInitValidationError = false;\n\n                                });\n                            }\n                        }\n                        */\n\n                        // TEST - swap code\n                        // swap placeholder -> el\n                        //$(tempHolder).before(el);\n                        //$(tempHolder).remove();\n\n                        // reveal field after rendering\n                        $(el).removeClass(\"alpaca-field-rendering\");\n                        $(el).removeClass(\"alpaca-hidden\");\n\n                        // if there was a previous field that needs to be cleaned up, do so now\n                        if (field._oldFieldEl)\n                        {\n                            $(field._oldFieldEl).remove();\n                        }\n\n\n                        renderedCallback(field);\n                    };\n\n                    if (!Alpaca.isEmpty(callback)) {\n                        callback(field, function() {\n                            fin();\n                        });\n                    } else {\n                        field.render(function() {\n                            fin();\n                        });\n                    }\n\n                    field.callback = callback;\n                    field.renderedCallback = renderedCallback;\n                }\n            }\n\n            // NOTE: this can be null if an error was thrown or if a view wasn't found\n            // Actually it'd always be undefined because field is in another scope.\n            // return field;\n        },\n\n        /**\n         * Internal method for constructing a field instance.\n         *\n         * @param {Object} el The dom element to act as the container of the constructed field.\n         * @param {Object} data The data to be bound into the field.\n         * @param {Object} options The configuration for the field.\n         * @param {Object} schema The schema for the field.\n         * @param {Object|String} view The view for the field.\n         * @param {Alpaca.connector} connector The field connector to be bound into the field.\n         * @param {Function} errorCallback Error callback.\n         *\n         * @returns {Alpaca.Field} New field instance.\n         */\n        createFieldInstance : function(el, data, options, schema, view, connector, errorCallback) {\n\n            // make sure options and schema are not empty\n            if (Alpaca.isValEmpty(options, true)) {\n                options = {};\n            }\n            if (Alpaca.isValEmpty(schema, true)) {\n                schema = {};\n            }\n\n            // options can be a string that identifies the kind of field to construct (i.e. \"text\")\n            if (options && Alpaca.isString(options)) {\n                var fieldType = options;\n                options = {};\n                options.type = fieldType;\n            }\n            if (!options.type)\n            {\n                // if nothing passed in, we can try to make a guess based on the type of data\n                if (!schema.type) {\n                    schema.type = Alpaca.getSchemaType(data);\n                }\n                if (!schema.type) {\n                    if (data && Alpaca.isArray(data)) {\n                        schema.type = \"array\";\n                    }\n                    else {\n                        schema.type = \"object\"; // fallback\n                    }\n                }\n\n                // using what we now about schema, try to guess the type\n                options.type = Alpaca.guessOptionsType(schema);\n            }\n            // find the field class registered for this field type\n            var FieldClass = Alpaca.getFieldClass(options.type);\n            if (!FieldClass) {\n                errorCallback({\n                    \"message\":\"Unable to find field class for type: \" + options.type,\n                    \"reason\": \"FIELD_INSTANTIATION_ERROR\"\n                });\n                return null;\n            }\n            // if we have data, bind it in\n            return new FieldClass(el, data, options, schema, view, connector, errorCallback);\n        },\n\n        /**\n         * Provides a backwards-compatible version of the former jQuery 1.8.3 parseJSON function (this was changed\n         * for jQuery 1.9.0 and introduces all kinds of issues).\n         *\n         * @param text\n         */\n        parseJSON: function(text)\n        {\n            if (!text) {\n                return null;\n            }\n\n            return $.parseJSON(text);\n        },\n\n        /**\n         * Compiles all of the views, normalizing them for use by Alpaca.\n         * Also compiles any templates that the views may reference.\n         *\n         * @param cb the callback that gets fired once compilation has ended\n         */\n        compile: function(cb, errorCallback)\n        {\n            var self = this;\n\n            // var t1 = new Date().getTime();\n\n            var report = {\n                \"errors\": [],\n                \"count\": 0,\n                \"successCount\": 0\n            };\n\n            var finalCallback = function(normalizedViews)\n            {\n                // var t2 = new Date().getTime();\n                // console.log(\"Compilation Exited with \" + report.errors.length + \" errors in: \" + (t2-t1)+ \" ms\");\n\n                if (report.errors.length === 0)\n                {\n                    // success!\n\n                    // copy our views into the normalized set\n                    for (var k in normalizedViews)\n                    {\n                        self.normalizedViews[k] = normalizedViews[k];\n                    }\n                }\n\n                cb(report);\n            };\n\n\n\n            ////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            // VIEW TEMPLATE COMPILATION\n            //\n            ////////////////////////////////////////////////////////////////////////////////////////////////\n\n            // for all of the views (the original ones, not the compiled ones), walk through them and find any\n            // and all templates that need to be compiled, compile them, etc.\n\n            // this callback is fired when a compilation either fails or succeeds\n            // if it fails, err is set, otherwise cacheKey has the\n            var viewCompileCallback = function(normalizedViews, err, view, cacheKey, totalCalls)\n            {\n                var viewId = view.id;\n\n                report.count++;\n                if (err)\n                {\n                    report.errors.push({\n                        \"view\": viewId,\n                        \"cacheKey\": cacheKey,\n                        \"err\": err\n                    });\n                }\n                else\n                {\n                    report.successCount++;\n                }\n\n                if (report.count == totalCalls) // jshint ignore:line\n                {\n                    finalCallback(normalizedViews);\n                }\n            };\n\n            var compileViewTemplate = function(normalizedViews, view, scopeType, scopeId, templateId, template, totalCalls)\n            {\n                var cacheKey = Alpaca.makeCacheKey(view.id, scopeType, scopeId, templateId);\n\n                // assume handlebars as the engine we'll use\n                var engineType = \"text/x-handlebars-template\";\n\n                /**\n                 * The template can be specified as an object to explicitly define the type of engine to use.\n                 */\n                if (template && Alpaca.isObject(template))\n                {\n                    engineType = template.type;\n\n                    // if this is a precompiled template, swap cache keys\n                    if (template.cacheKey) {\n                        cacheKey = template.cacheKey;\n                    }\n\n                    template = template.template;\n                }\n\n                /**\n                 * If template is a string, then it is either some text that we can treat as a template or it is\n                 * a URL that we should dynamically load and treat the result as a template.  It may also be a\n                 * CSS selector used to locate something within the document that we should load text from.\n                 */\n                if (template && typeof(template) === \"string\")\n                {\n                    var x = template.toLowerCase();\n                    if (Alpaca.isUri(x))\n                    {\n                        // we assume this is a URL and let the template engine deal with it\n                    }\n                    else if (template && ((template.indexOf(\"#\") === 0) || (template.indexOf(\".\") === 0)))\n                    {\n                        // support for jQuery selectors\n                        var domEl = $(template);\n\n                        engineType = $(domEl).attr(\"type\");\n                        template = $(domEl).html();\n                    }\n                    else if (template)\n                    {\n                        // check if it is an existing template referenced by template name\n                        var existingTemplate = view.templates[template];\n                        if (existingTemplate)\n                        {\n                            template = existingTemplate;\n                        }\n                    }\n                }\n\n                // if we don't have an engine type here, throw\n                if (!engineType)\n                {\n                    Alpaca.logError(\"Engine type was empty\");\n\n                    var err = new Error(\"Engine type was empty\");\n                    viewCompileCallback(normalizedViews, err, view, cacheKey, totalCalls);\n\n                    return;\n                }\n\n                // look up the engine\n                var engine = Alpaca.TemplateEngineRegistry.find(engineType);\n                if (!engine)\n                {\n                    Alpaca.logError(\"Cannot find template engine for type: \" + type);\n\n                    var err = new Error(\"Cannot find template engine for type: \" + type);\n                    viewCompileCallback(normalizedViews, err, view, cacheKey, totalCalls);\n\n                    return;\n                }\n\n                // if template === true, then this indicates that the template is pre-compiled.\n                if (template === true)\n                {\n                    if (engine.isCached(cacheKey))\n                    {\n                        // all good\n                        viewCompileCallback(normalizedViews, null, view, cacheKey, totalCalls);\n                        return;\n                    }\n                    else\n                    {\n                        // uh oh, claims to be precompiled, but the templating engine doesn't know about it\n                        var errString = \"View configuration for view: \" + view.id + \" claims to have precompiled template for cacheKey: \" + cacheKey + \" but it could not be found\";\n                        Alpaca.logError(errString);\n\n                        viewCompileCallback(normalizedViews, new Error(errString), view, cacheKey, totalCalls);\n\n                        return;\n                    }\n                }\n\n                // check if engine already has this cached\n                // this might be from a previous compilation step\n                if (engine.isCached(cacheKey))\n                {\n                    // already compiled, so skip\n                    viewCompileCallback(normalizedViews, null, view, cacheKey, totalCalls);\n                    return;\n                }\n\n                // compile the template\n                engine.compile(cacheKey, template, function(err) {\n                    viewCompileCallback(normalizedViews, err, view, cacheKey, totalCalls);\n                });\n            };\n\n            var compileTemplates = function(normalizedViews)\n            {\n                // walk through all normalized views that we're interested in and compile the templates within\n                var functionArray = [];\n                for (var viewId in normalizedViews)\n                {\n                    var view = normalizedViews[viewId];\n\n                    // view templates\n                    if (view.templates)\n                    {\n                        for (var templateId in view.templates)\n                        {\n                            var template = view.templates[templateId];\n\n                            functionArray.push((function(normalizedViews, view, scopeType, scopeId, templateId, template) {\n                                return function(totalCalls) {\n                                    compileViewTemplate(normalizedViews, view, scopeType, scopeId, templateId, template, totalCalls);\n                                };\n                            })(normalizedViews, view, \"view\", view.id, templateId, template));\n                        }\n                    }\n\n                    // field level templates\n                    if (view.fields)\n                    {\n                        for (var path in view.fields)\n                        {\n                            if (view.fields[path].templates)\n                            {\n                                for (var templateId in view.fields[path].templates)\n                                {\n                                    var template = view.fields[path].templates[templateId];\n\n                                    functionArray.push((function(normalizedViews, view, scopeType, scopeId, templateId, template) {\n                                        return function(totalCalls) {\n                                            compileViewTemplate(normalizedViews, view, scopeType, scopeId, templateId, template, totalCalls);\n                                        };\n                                    })(normalizedViews, view, \"field\", path, templateId, template));\n                                }\n                            }\n                        }\n                    }\n\n                    // layout template\n                    if (view.layout && view.layout.template)\n                    {\n                        var template = view.layout.template;\n\n                        functionArray.push((function(normalizedViews, view, scopeType, scopeId, templateId, template) {\n                            return function(totalCalls) {\n                                compileViewTemplate(normalizedViews, view, scopeType, scopeId, templateId, template, totalCalls);\n                            };\n                        })(normalizedViews, view, \"layout\", \"layout\", \"layoutTemplate\", template));\n                    }\n\n                    // global template\n                    if (view.globalTemplate)\n                    {\n                        var template = view.globalTemplate;\n\n                        functionArray.push((function(normalizedViews, view, scopeType, scopeId, templateId, template) {\n                            return function(totalCalls) {\n                                compileViewTemplate(normalizedViews, view, scopeType, scopeId, templateId, template, totalCalls);\n                            };\n                        })(normalizedViews, view, \"global\", \"global\", \"globalTemplate\", template));\n                    }\n                }\n\n                // now invoke all of the functions\n                // this tells each template to compile\n                var totalCalls = functionArray.length;\n                for (var i = 0; i < functionArray.length; i++)\n                {\n                    functionArray[i](totalCalls);\n                }\n            };\n\n            var normalizeViews = function()\n            {\n                // the views that we're going to normalize\n                var normalizedViews = {};\n                var normalizedViewCount = 0;\n\n                // some initial self-assurance to make sure we have the normalizedViews map set up\n                if (!Alpaca.normalizedViews) {\n                    Alpaca.normalizedViews = {};\n                }\n                self.normalizedViews = Alpaca.normalizedViews;\n\n                // walk through all of our views\n                for (var viewId in self.views)\n                {\n                    // if the view is already normalized on the Alpaca global, we do not bother\n                    if (!Alpaca.normalizedViews[viewId])\n                    {\n                        var normalizedView = new Alpaca.NormalizedView(viewId);\n                        if (normalizedView.normalize(self.views))\n                        {\n                            normalizedViews[viewId] = normalizedView;\n                            normalizedViewCount++;\n                        }\n                        else\n                        {\n                            return Alpaca.throwErrorWithCallback(\"View normalization failed, cannot initialize Alpaca.  Please check the error logs.\", errorCallback);\n                        }\n                    }\n                }\n\n                if (normalizedViewCount > 0)\n                {\n                    compileTemplates(normalizedViews);\n                }\n                else\n                {\n                    finalCallback(normalizedViews);\n                }\n            };\n\n            normalizeViews();\n        },\n\n        /**\n         * Looks up the proper template to be used to handle a requested template id for a view and a field.\n         * Performs an override lookup to find the proper template.\n         *\n         * Hands back a descriptor of everything that is known about the resolved template.\n         *\n         * @param view\n         * @param templateId\n         * @param field\n         * @return {Object}\n         */\n        getTemplateDescriptor: function(view, templateId, field)\n        {\n            var descriptor = null;\n\n            //////////////////////////////////////////////////////////////////////////////////////////////////\n            //\n            // FIGURE OUT WHERE THE TEMPLATE IS IN THE VIEW CONFIGURATION (RESPECTING FIELD OVERRIDES)\n            //\n            //////////////////////////////////////////////////////////////////////////////////////////////////\n\n            var _engineId = null;\n            var _cacheKey = null;\n\n            // is this template defined at the view level?\n            if (view.templates && view.templates[templateId])\n            {\n                _cacheKey = Alpaca.makeCacheKey(view.id, \"view\", view.id, templateId);\n\n                // is this a precompiled template?\n                var t = view.templates[templateId];\n                if (Alpaca.isObject(t) && t.cacheKey)\n                {\n                    _cacheKey = t.cacheKey;\n                }\n            }\n\n            // OVERRIDE: is this template overridden at the field level?\n            if (field && field.path)\n            {\n                var path = field.path;\n\n                if (view && view.fields)\n                {\n                    // let's try different\n                    // combinations of permutated and generalized lookups to see if we can find a best fit\n                    //\n                    // for example, if they path is: /first[1]/second[2]/third\n                    // we can look for the following generalized permutations in descending order of applicability:\n                    //\n                    //    /first[1]/second[2]/third\n                    //    /first[1]/second/third\n                    //    /first/second[2]/third\n                    //    /first/second/third\n                    //\n                    if (path && path.length > 1)\n                    {\n                        var collectMatches = function(tokens, index, matches)\n                        {\n                            // if we hit the end of the array, we're done\n                            if (index == tokens.length)\n                            {\n                                return;\n                            }\n\n                            // copy the tokens\n                            var newTokens = tokens.slice();\n\n                            // if we have an array in the path at this element, update newTokens to reflect\n                            var toggled = false;\n                            var token = tokens[index];\n                            var x1 = token.indexOf(\"[\");\n                            if (x1 > -1)\n                            {\n                                token = token.substring(0, x1);\n                                toggled = true;\n                            }\n                            newTokens[index] = token;\n\n                            // see if we can find a match for this path\n                            var _path = newTokens.join(\"/\");\n\n                            if (view.fields[_path] && view.fields[_path].templates && view.fields[_path].templates[templateId])\n                            {\n                                var _ck = Alpaca.makeCacheKey(view.id, \"field\", _path, templateId);\n                                if (_ck)\n                                {\n                                    matches.push({\n                                        \"path\": _path,\n                                        \"cacheKey\": _ck\n                                    });\n                                }\n                            }\n\n                            // proceed down the token array\n                            collectMatches(tokens, index + 1, matches);\n\n                            // if we toggled, proceed with that as well\n                            if (toggled) {\n                                collectMatches(newTokens, index + 1, matches);\n                            }\n                        };\n\n                        var tokens = path.split(\"/\");\n                        var matches = [];\n                        collectMatches(tokens, 0, matches);\n\n                        if (matches.length > 0)\n                        {\n                            _cacheKey = matches[0].cacheKey;\n                        }\n                    }\n                }\n            }\n\n            /*\n            // OVERRIDE: is this template defined at the field level?\n            if (field && field.path)\n            {\n                var path = field.path;\n\n                if (view && view.fields && view.fields[path] && view.fields[path].templates && view.fields[path].templates[templateId])\n                {\n                    _cacheKey = Alpaca.makeCacheKey(view.id, \"field\", path, templateId);\n                }\n            }\n            */\n\n            // OVERRIDE: is this template defined at the global level?\n            if (templateId === \"globalTemplate\" || templateId === \"global\")\n            {\n                _cacheKey = Alpaca.makeCacheKey(view.id, \"global\", \"global\", \"globalTemplate\");\n            }\n\n            // OVERRIDE: is this template defined at the layout level?\n            if (templateId === \"layoutTemplate\" || templateId === \"layout\")\n            {\n                _cacheKey = Alpaca.makeCacheKey(view.id, \"layout\", \"layout\", \"layoutTemplate\");\n            }\n\n            if (_cacheKey)\n            {\n                // figure out which engine has this\n                var engineIds = Alpaca.TemplateEngineRegistry.ids();\n                for (var i = 0; i < engineIds.length; i++)\n                {\n                    var engineId = engineIds[i];\n\n                    var engine = Alpaca.TemplateEngineRegistry.find(engineId);\n                    if (engine.isCached(_cacheKey))\n                    {\n                        _engineId = engineId;\n                        break;\n                    }\n                }\n\n                if (_engineId)\n                {\n                    descriptor = {\n                        \"engine\": _engineId,\n                        \"cacheKey\": _cacheKey\n                    };\n                }\n            }\n\n            return descriptor;\n        },\n\n        /**\n         * Executes a template and returns a DOM element.\n         *\n         * @param templateDescriptor\n         * @param model\n         */\n        tmpl: function(templateDescriptor, model)\n        {\n            var html = Alpaca.tmplHtml(templateDescriptor, model);\n\n            return Alpaca.safeDomParse(html);\n        },\n\n        /**\n         * Executes a template and returns HTML.\n         *\n         * @param templateDescriptor\n         * @param model\n         */\n        tmplHtml: function(templateDescriptor, model)\n        {\n            if (!model)\n            {\n                model = {};\n            }\n\n            var engineType = templateDescriptor.engine;\n\n            var engine = Alpaca.TemplateEngineRegistry.find(engineType);\n            if (!engine)\n            {\n                return Alpaca.throwDefaultError(\"Cannot find template engine for type: \" + engineType);\n            }\n\n            // execute the template\n            var cacheKey = templateDescriptor.cacheKey;\n            var html = engine.execute(cacheKey, model, function(err) {\n\n                var str = JSON.stringify(err);\n                if (err.message) {\n                    str = err.message;\n                }\n                return Alpaca.throwDefaultError(\"The compiled template: \" + cacheKey + \" failed to execute: \" + str);\n            });\n\n            return html;\n        }\n\n    });\n\n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // LOGGER\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    Alpaca.DEBUG = 0;\n    Alpaca.INFO = 1;\n    Alpaca.WARN = 2;\n    Alpaca.ERROR = 3;\n\n    // by default, logging only shows warnings and above\n    // to debug, set Alpaca.logLevel = Alpaca.DEBUG\n    Alpaca.logLevel = Alpaca.WARN;\n\n    Alpaca.logDebug = function(obj) {\n        Alpaca.log(Alpaca.DEBUG, obj);\n    };\n    Alpaca.logInfo = function(obj) {\n        Alpaca.log(Alpaca.INFO, obj);\n    };\n    Alpaca.logWarn = function(obj) {\n        Alpaca.log(Alpaca.WARN, obj);\n    };\n    Alpaca.logError = function(obj) {\n        Alpaca.log(Alpaca.ERROR, obj);\n    };\n\n    Alpaca.LOG_METHOD_MAP = {\n        0: 'debug',\n        1: 'info',\n        2: 'warn',\n        3: 'error'\n    };\n\n    Alpaca.log = function(level, obj) {\n\n        if (Alpaca.logLevel <= level)\n        {\n            var method = Alpaca.LOG_METHOD_MAP[level];\n\n            if (typeof console !== 'undefined' && console[method])\n            {\n                if (\"debug\" === method) {\n                    console.debug(obj);\n                }\n                else if (\"info\" === method) {\n                    console.info(obj);\n                }\n                else if (\"warn\" === method) {\n                    console.warn(obj);\n                }\n                else if (\"error\" === method) {\n                    console.error(obj);\n                }\n                else {\n                    console.log(obj);\n                }\n            }\n        }\n    };\n\n    Alpaca.checked = function(el, value)\n    {\n        return Alpaca.attrProp(el, \"checked\", value);\n    };\n\n    Alpaca.disabled = function(el, value)\n    {\n        return Alpaca.attrProp(el, \"disabled\", value);\n    };\n\n    Alpaca.attrProp = function(el, name, value)\n    {\n        if (typeof(value) !== \"undefined\")\n        {\n            // jQuery 1.6+\n            if ($(el).prop)\n            {\n                $(el).prop(name, value);\n            }\n            else\n            {\n                if (value) {\n                    $(el).attr(name, value);\n                } else {\n                    $(el).removeAttr(name);\n                }\n            }\n        }\n\n        // now return the correct value\n\n        // jQuery 1.6+\n        if ($(el).prop) {\n            return $(el).prop(name);\n        }\n\n        return $(el).attr(name);\n    };\n\n    Alpaca.loadRefSchemaOptions = function(topField, referenceId, callback)\n    {\n        if (!referenceId)\n        {\n            callback();\n        }\n        else if (referenceId === \"#\")\n        {\n            // this is the uri of the current schema document\n            callback(topField.schema, topField.options);\n        }\n        else if (referenceId.indexOf(\"#/\") === 0)\n        {\n            // this is a property path relative to the root of the current schema\n            var defId = referenceId.substring(2);\n\n            // split into tokens\n            var tokens = defId.split(\"/\");\n\n            var defSchema = topField.schema;\n            for (var i = 0; i < tokens.length; i++)\n            {\n                var token = tokens[i];\n\n                // schema\n                if (defSchema[token])\n                {\n                    defSchema = defSchema[token];\n                }\n                else if (defSchema.properties && defSchema.properties[token])\n                {\n                    defSchema = defSchema.properties[token];\n                }\n                else if (defSchema.definitions && defSchema.definitions[token])\n                {\n                    defSchema = defSchema.definitions[token];\n                }\n                else\n                {\n                    defSchema = null;\n                    break;\n                }\n            }\n\n            var defOptions = topField.options;\n            for (var i = 0; i < tokens.length; i++)\n            {\n                var token = tokens[i];\n\n                // options\n                if (defOptions[token])\n                {\n                    defOptions = defOptions[token];\n                }\n                else if (defOptions.fields && defOptions.fields[token])\n                {\n                    defOptions = defOptions.fields[token];\n                }\n                else if (defOptions.definitions && defOptions.definitions[token])\n                {\n                    defOptions = defOptions.definitions[token];\n                }\n                else\n                {\n                    defOptions = null;\n                    break;\n                }\n            }\n\n            callback(defSchema, defOptions);\n        }\n        else if (referenceId.indexOf(\"#\") === 0)\n        {\n            // this is the ID of a node in the current schema document\n\n            // walk the current document schema until we find the referenced node (using id property)\n            var resolution = Alpaca.resolveReference(topField.schema, topField.options, referenceId);\n            if (resolution)\n            {\n                callback(resolution.schema, resolution.options);\n            }\n            else\n            {\n                // nothing\n                callback();\n            }\n        }\n        else\n        {\n            // the reference is considered to be a URI with or without a \"#\" in it to point to a specific location in\n            // the target schema\n\n            var referenceParts = Alpaca.pathParts(referenceId);\n\n            topField.connector.loadReferenceSchema(referenceParts.path, function(schema) {\n                topField.connector.loadReferenceOptions(referenceParts.path, function(options) {\n\n                    if (referenceParts.id)\n                    {\n                        var resolution = Alpaca.resolveReference(schema, options, referenceParts.id);\n                        if (resolution)\n                        {\n                            schema = resolution.schema;\n                            options = resolution.options;\n                        }\n                    }\n\n                    callback(schema, options);\n\n                }, function() {\n                    callback(schema);\n                });\n            }, function() {\n                callback();\n            });\n        }\n    };\n\n    Alpaca.DEFAULT_ERROR_CALLBACK = function(error)\n    {\n        if (error && error.message)\n        {\n            // log to debug\n            Alpaca.logError(JSON.stringify(error));\n\n            // error out\n            throw new Error(\"Alpaca caught an error with the default error handler: \" + JSON.stringify(error));\n\n        }\n    };\n\n    /**\n     * Default error callback handler for Alpaca.\n     *\n     * This error handler will be used if an \"error\" argument isn't passed in to the constructor for an Alpaca field.\n     *\n     * @param error\n     */\n    Alpaca.defaultErrorCallback = Alpaca.DEFAULT_ERROR_CALLBACK;\n\n    /**\n     * Utility method that throws a general error and dispatches to the default error handler.\n     *\n     * @param message\n     */\n    Alpaca.throwDefaultError = function(message)\n    {\n        if (message && Alpaca.isObject(message))\n        {\n            message = JSON.stringify(message);\n        }\n\n        var err = {\n            \"message\": message\n        };\n\n        Alpaca.defaultErrorCallback(err);\n    };\n\n    /**\n     * Utility method that throws an error back to the given callback handler.\n     *\n     * @param message\n     * @param errorCallback\n     */\n    Alpaca.throwErrorWithCallback = function(message, errorCallback)\n    {\n        if (message && Alpaca.isObject(message))\n        {\n            message = JSON.stringify(message);\n        }\n\n        var err = {\n            \"message\": message\n        };\n\n        if (errorCallback)\n        {\n            errorCallback(err);\n        }\n        else\n        {\n            Alpaca.defaultErrorCallback(err);\n        }\n    };\n\n\n    /**\n     * Given a base field, walks the schema, options and data forward until it\n     * discovers the given reference.\n     *\n     * @param schema\n     * @param options\n     * @param referenceId\n     */\n    Alpaca.resolveReference = function(schema, options, referenceId)\n    {\n        if ((schema.id === referenceId) || ((\"#\" + schema.id) === referenceId)) // jshint ignore:line\n        {\n            var result = {};\n            if (schema) {\n                result.schema = schema;\n            }\n            if (options) {\n                result.options = options;\n            }\n\n            return result;\n        }\n        else\n        {\n            if (schema.properties)\n            {\n                for (var propertyId in schema.properties)\n                {\n                    var subSchema = schema.properties[propertyId];\n                    var subOptions = null;\n                    if (options && options.fields && options.fields[propertyId])\n                    {\n                        subOptions = options.fields[propertyId];\n                    }\n\n                    var x = Alpaca.resolveReference(subSchema, subOptions, referenceId);\n                    if (x)\n                    {\n                        return x;\n                    }\n                }\n            }\n            else if (schema.items)\n            {\n                var subSchema = schema.items;\n                var subOptions = null;\n                if (options && options.items)\n                {\n                    subOptions = options.items;\n                }\n\n                var x = Alpaca.resolveReference(subSchema, subOptions, referenceId);\n                if (x)\n                {\n                    return x;\n                }\n            }\n        }\n\n        return null;\n    };\n\n    $.alpaca = window.Alpaca = Alpaca;\n\n    /**\n     * jQuery friendly method for binding a field to a DOM element.\n     * @ignore\n     */\n    $.fn.alpaca = function() {\n        var args = Alpaca.makeArray(arguments);\n\n        // append this into the front of args\n        var newArgs = [].concat(this, args);\n\n        // invoke Alpaca against current element\n        var ret = Alpaca.apply(this, newArgs);\n        if (typeof(ret) === \"undefined\") {\n            // as per jQuery's pattern, assume we hand back $el\n            ret = $(this);\n        }\n\n        return ret;\n    };\n\n    /**\n     * @ignore\n     * @param nocloning\n     */\n    $.fn.outerHTML = function(nocloning) {\n        if (nocloning) {\n            return $(\"<div></div>\").append(this).html();\n        } else {\n            return $(\"<div></div>\").append(this.clone()).html();\n        }\n    };\n\n    /**\n     * @ignore\n     * @param to\n     */\n    $.fn.swapWith = function(to) {\n        return this.each(function() {\n            var copy_to = $(to).clone();\n            var copy_from = $(this).clone();\n            $(to).replaceWith(copy_from);\n            $(this).replaceWith(copy_to);\n        });\n    };\n\n    $.fn.attrProp = function(name, value) {\n        return Alpaca.attrProp($(this), name, value);\n    };\n\n    /**\n     * When dom elements are removed, we fire the special \"destroyed\" event to allow for late cleanup of any Alpaca code\n     * that might be in-memory and linked to the dom element.\n     *\n     * @type {Object}\n     */\n    $.event.special.destroyed = {\n        remove: function(o) {\n            if (o.handler) {\n                o.handler();\n            }\n        }\n    };\n\n    Alpaca.pathParts = function(resource)\n    {\n        if (typeof(resource) !== \"string\")\n        {\n            return resource;\n        }\n\n        // convert string to object\n        var resourcePath = resource;\n        var resourceId = null;\n        var i = resourcePath.indexOf(\"#\");\n        if (i > -1)\n        {\n            resourceId = resourcePath.substring(i + 1);\n            resourcePath = resourcePath.substring(0, i);\n        }\n\n        if (Alpaca.endsWith(resourcePath, \"/\")) {\n            resourcePath = resourcePath.substring(0, resourcePath.length - 1);\n        }\n\n        var parts = {};\n        parts.path = resourcePath;\n\n        if (resourceId)\n        {\n            parts.id = resourceId;\n        }\n\n        return parts;\n    };\n\n    /**\n     * Resolves a field by its property id.\n     *\n     * @param containerField\n     * @param propertyId\n     * @returns {null}\n     */\n    Alpaca.resolveField = function(containerField, propertyIdOrReferenceId)\n    {\n        var resolvedField = null;\n\n        if (typeof(propertyIdOrReferenceId) === \"string\")\n        {\n            if (propertyIdOrReferenceId.indexOf(\"#/\") === 0 && propertyId.length > 2)\n            {\n                // TODO: path based lookup?\n            }\n            else if (propertyIdOrReferenceId === \"#\" || propertyIdOrReferenceId === \"#/\")\n            {\n                resolvedField = containerField;\n            }\n            else if (propertyIdOrReferenceId.indexOf(\"#\") === 0)\n            {\n                // reference id lookup\n\n                // find the top field\n                var topField = containerField;\n                while (topField.parent)\n                {\n                    topField = topField.parent;\n                }\n\n                var referenceId = propertyIdOrReferenceId.substring(1);\n\n                resolvedField = Alpaca.resolveFieldByReference(topField, referenceId);\n\n            }\n            else\n            {\n                // property lookup\n                resolvedField = containerField.childrenByPropertyId[propertyIdOrReferenceId];\n            }\n        }\n\n        return resolvedField;\n    };\n\n    /**\n     * Resolves a field based on its \"reference id\" relative to a top level field.  This walks down the field tree and\n     * looks for matching schema.id references to find the matching field.\n     *\n     * @param field\n     * @param referenceId\n     */\n    Alpaca.resolveFieldByReference = function(field, referenceId)\n    {\n        if (field.schema && field.schema.id == referenceId) // jshint ignore:line\n        {\n            return field;\n        }\n        else\n        {\n            if (field.children && field.children.length > 0)\n            {\n                for (var i = 0; i < field.children.length; i++)\n                {\n                    var child = field.children[i];\n\n                    var resolved = Alpaca.resolveFieldByReference(child, referenceId);\n                    if (resolved)\n                    {\n                        return resolved;\n                    }\n                }\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Determines whether any of the elements of the first argument are equal to the elements of the second argument.\n     *\n     * @param first either a scalar value or a container (object or array) of values\n     * @param second either a scalar value or a container (object or array) of values\n     * @returns whether at least one match is found\n     */\n    Alpaca.anyEquality = function(first, second)\n    {\n        // copy values from first into a values lookup map\n        var values = {};\n        if (typeof(first) === \"object\" || Alpaca.isArray(first))\n        {\n            for (var k in first)\n            {\n                values[first[k]] = true;\n            }\n        }\n        else\n        {\n            values[first] = true;\n        }\n\n        var result = false;\n\n        // check values from second against the lookup map\n        if (typeof(second) === \"object\" || Alpaca.isArray(second))\n        {\n            for (var k in second)\n            {\n                var v = second[k];\n\n                if (values[v])\n                {\n                    result = true;\n                    break;\n                }\n            }\n        }\n        else\n        {\n            result = values[second];\n        }\n\n        return result;\n    };\n\n    Alpaca.series = function(funcs, callback)\n    {\n        async.series(funcs, function() {\n            callback();\n        });\n    };\n\n    Alpaca.parallel = function(funcs, callback)\n    {\n        async.parallel(funcs, function() {\n            callback();\n        });\n    };\n\n    Alpaca.nextTick = function(f)\n    {\n        async.nextTick(function() {\n            f();\n        });\n    };\n\n    /**\n     * Compiles the validation context for the chain of fields from the top-most down to the given field.\n     * Each validation context entry is a field in the chain which describes the following:\n     *\n     *    {\n     *       \"field\": the field instance,\n     *       \"before\": the before value (boolean)\n     *       \"after\": the after value (boolean)\n     *       \"validated\": (optional) if the field validated (switches state from invalid to valid)\n     *       \"invalidated\": (optional) if the field invalidated (switches state from valid to invalid)\n     *    }\n     *\n     * This hands back an array of entries with the child field first and continuing up the parent chain.\n     * The last entry in the array is the top most parent field.\n     *\n     * The callback is fired with the assembled context, allowing for asynchronous validation to run.\n     *\n     * @param field\n     * @param callback\n     *\n     * @returns {Array}\n     */\n    Alpaca.compileValidationContext = function(field, callback)\n    {\n        // walk up the parent tree until we find the top-most control\n        // this serves as our starting point for downward validation\n        var chain = [];\n        var parent = field;\n        do\n        {\n            if (!parent.isValidationParticipant())\n            {\n                parent = null;\n            }\n\n            if (parent)\n            {\n                chain.push(parent);\n            }\n\n            if (parent)\n            {\n                parent = parent.parent;\n            }\n        }\n        while (parent);\n\n        // reverse so top most parent is first\n        chain.reverse();\n\n        // compilation context\n        var context = [];\n\n        // internal method that sets validation for a single field\n        var f = function(chain, context, done)\n        {\n            if (!chain || chain.length === 0)\n            {\n                return done();\n            }\n\n            var current = chain[0];\n\n            var entry = {};\n            entry.id = current.getId();\n            entry.field = current;\n            entry.path = current.path;\n\n            // BEFORE field validation status\n            var beforeStatus = current.isValid();\n            if (current.isContainer())\n            {\n                beforeStatus = current.isValid(true);\n            }\n\n            entry.before = beforeStatus;\n\n            var ourselvesHandler = function(current, entry, weFinished)\n            {\n                var previouslyValidated = current._previouslyValidated;\n\n                // now run the validation for just this one field\n                current.validate();\n\n                // apply custom validation (if exists) for just this one field\n                // if it doesn't exist, this just fires the callback\n                current._validateCustomValidator(function() {\n\n                    // AFTER field validation state\n                    var afterStatus = current.isValid();\n                    if (current.isContainer())\n                    {\n                        afterStatus = current.isValid(true);\n                    }\n\n                    entry.after = afterStatus;\n\n                    // if this field's validation status flipped, fire triggers\n                    entry.validated = false;\n                    entry.invalidated = false;\n                    if (!beforeStatus && afterStatus)\n                    {\n                        entry.validated = true;\n                    }\n                    else if (beforeStatus && !afterStatus)\n                    {\n                        entry.invalidated = true;\n                    }\n                    // special case for fields that have not yet been validated\n                    else if (!previouslyValidated && !afterStatus)\n                    {\n                        entry.invalidated = true;\n                    }\n\n                    entry.container = current.isContainer();\n                    entry.valid = entry.after;\n\n                    context.push(entry);\n\n                    weFinished();\n                });\n            };\n\n            // step down into chain\n            // we do children before ourselves\n            if (chain.length > 1)\n            {\n                // copy array\n                var childChain = chain.slice(0);\n                childChain.shift();\n                f(childChain, context, function() {\n                    ourselvesHandler(current, entry, function() {\n                        done();\n                    });\n                });\n            }\n            else\n            {\n                ourselvesHandler(current, entry, function() {\n                    done();\n                })\n            }\n        };\n\n        f(chain, context, function() {\n            callback(context);\n        });\n    };\n\n    Alpaca.updateValidationStateForContext = function(view, context)\n    {\n        // walk through each and flip any DOM UI based on entry state\n        for (var i = 0; i < context.length; i++)\n        {\n            var entry = context[i];\n            var field = entry.field;\n\n            // clear out previous validation UI markers\n            field.getFieldEl().removeClass(\"alpaca-invalid alpaca-invalid-hidden alpaca-valid\");\n            field.fireCallback(\"clearValidity\");\n\n            // valid?\n            if (entry.valid)\n            {\n                field.getFieldEl().addClass(\"alpaca-field-valid\");\n                field.fireCallback(\"valid\");\n            }\n            else\n            {\n                // we don't markup invalidation state for readonly fields\n                if (!field.options.readonly || Alpaca.showReadOnlyInvalidState)\n                {\n                    var hidden = false;\n                    if (field.hideInitValidationError) {\n                        hidden = true;\n                    }\n\n                    field.fireCallback(\"invalid\", hidden);\n\n                    field.getFieldEl().addClass(\"alpaca-invalid\");\n                    if (hidden)\n                    {\n                        field.getFieldEl().addClass(\"alpaca-invalid-hidden\");\n                    }\n                }\n                else\n                {\n                    // this field is invalid and is also read-only, so we're not supposed to inform the end-user\n                    // within the UI (since there is nothing we can do about it)\n                    // here, we log a message to debug to inform the developer\n                    Alpaca.logWarn(\"The field (id=\" + field.getId() + \", title=\" + field.getTitle() + \", path=\" + field.path + \") is invalid and also read-only\");\n                }\n            }\n\n            // TRIGGERS\n            if (entry.validated)\n            {\n                Alpaca.later(25, this, function() {\n                    field.trigger(\"validated\");\n                });\n            }\n            else if (entry.invalidated)\n            {\n                Alpaca.later(25, this, function() {\n                    field.trigger(\"invalidated\");\n                });\n            }\n\n            // Allow for the message to change\n            if (field.options.showMessages)\n            {\n                if (!field.initializing)\n                {\n                    // we don't markup invalidation state for readonly fields\n                    if (!field.options.readonly || Alpaca.showReadOnlyInvalidState)\n                    {\n                        // messages\n                        var messages = [];\n                        for (var messageId in field.validation)\n                        {\n                            if (!field.validation[messageId][\"status\"])\n                            {\n                                messages.push({\n                                    \"id\": messageId,\n                                    \"message\": field.validation[messageId][\"message\"]\n                                });\n                            }\n                        }\n\n                        field.displayMessage(messages, field.valid);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Runs the given function over the field and all of its children recursively.\n     *\n     * @param field\n     * @param fn\n     */\n    Alpaca.fieldApplyFieldAndChildren = function(field, fn)\n    {\n        fn(field);\n\n        // if the field has children, go depth first\n        if (field.children && field.children.length > 0)\n        {\n            for (var i = 0; i < field.children.length; i++)\n            {\n                Alpaca.fieldApplyFieldAndChildren(field.children[i], fn);\n            }\n        }\n    };\n\n    /**\n     * Replaces all instances of the string <find> with the replacement text <replace>.\n     *\n     * @param text\n     * @param find\n     * @param replace\n     * @returns {*}\n     */\n    Alpaca.replaceAll = function(text, find, replace)\n    {\n        return text.replace(new RegExp(find, 'g'), replace);\n    };\n\n    Alpaca.asArray = function(thing)\n    {\n        if (!Alpaca.isArray(thing))\n        {\n            var array = [];\n            array.push(thing);\n\n            return array;\n        }\n\n        return thing;\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // ASYNC\n    //\n    // Here we provide a reduced version of the wonderful async library.  This is entirely inline and\n    // will have no bearing on any external dependencies on async.\n    //\n    // https://github.com/caolan/async\n    // Copyright (c) 2010 Caolan McMahon\n    //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /*global setImmediate: false, setTimeout: false, console: false */\n    (function () {\n\n        var async = {};\n\n        // global on the server, window in the browser\n        var root, previous_async;\n\n        root = this;\n        if (root != null) {\n            previous_async = root.async;\n        }\n\n        async.noConflict = function () {\n            root.async = previous_async;\n            return async;\n        };\n\n        function only_once(fn) {\n            var called = false;\n            return function() {\n                if (called) {\n                    throw new Error(\"Callback was already called.\");\n                }\n                called = true;\n                fn.apply(root, arguments);\n            };\n        }\n\n        //// cross-browser compatiblity functions ////\n\n        var _each = function (arr, iterator) {\n            if (arr.forEach) {\n                return arr.forEach(iterator);\n            }\n            for (var i = 0; i < arr.length; i += 1) {\n                iterator(arr[i], i, arr);\n            }\n        };\n\n        var _map = function (arr, iterator) {\n            if (arr.map) {\n                return arr.map(iterator);\n            }\n            var results = [];\n            _each(arr, function (x, i, a) {\n                results.push(iterator(x, i, a));\n            });\n            return results;\n        };\n\n        var _reduce = function (arr, iterator, memo) {\n            if (arr.reduce) {\n                return arr.reduce(iterator, memo);\n            }\n            _each(arr, function (x, i, a) {\n                memo = iterator(memo, x, i, a);\n            });\n            return memo;\n        };\n\n        var _keys = function (obj) {\n            if (Object.keys) {\n                return Object.keys(obj);\n            }\n            var keys = [];\n            for (var k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    keys.push(k);\n                }\n            }\n            return keys;\n        };\n\n        //// exported async module functions ////\n\n        //// nextTick implementation with browser-compatible fallback ////\n        if (typeof process === 'undefined' || !(process.nextTick)) {\n            if (typeof setImmediate === 'function') {\n                async.nextTick = function (fn) {\n                    // not a direct alias for IE10 compatibility\n                    setImmediate(fn);\n                };\n                async.setImmediate = async.nextTick;\n            }\n            else {\n                async.nextTick = function (fn) {\n                    setTimeout(fn, 0); // jshint ignore:line\n                };\n                async.setImmediate = async.nextTick;\n            }\n        }\n        else {\n            async.nextTick = process.nextTick;\n            if (typeof setImmediate !== 'undefined') {\n                async.setImmediate = function (fn) {\n                    // not a direct alias for IE10 compatibility\n                    setImmediate(fn);\n                };\n            }\n            else {\n                async.setImmediate = async.nextTick;\n            }\n        }\n\n        async.each = function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length) {\n                return callback();\n            }\n            var completed = 0;\n            _each(arr, function (x) {\n                iterator(x, only_once(function (err) {\n                    if (err) {\n                        callback(err);\n                        callback = function () {};\n                    }\n                    else {\n                        completed += 1;\n                        if (completed >= arr.length) {\n                            callback(null);\n                        }\n                    }\n                }));\n            });\n        };\n        async.forEach = async.each;\n\n        async.eachSeries = function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length) {\n                return callback();\n            }\n            var completed = 0;\n            var iterate = function () {\n                iterator(arr[completed], function (err) {\n                    if (err) {\n                        callback(err);\n                        callback = function () {};\n                    }\n                    else {\n                        completed += 1;\n                        if (completed >= arr.length) {\n                            callback(null);\n                        }\n                        else {\n                            iterate();\n                        }\n                    }\n                });\n            };\n            iterate();\n        };\n        async.forEachSeries = async.eachSeries;\n\n        async.eachLimit = function (arr, limit, iterator, callback) {\n            var fn = _eachLimit(limit);\n            fn.apply(null, [arr, iterator, callback]);\n        };\n        async.forEachLimit = async.eachLimit;\n\n        var _eachLimit = function (limit) {\n\n            return function (arr, iterator, callback) {\n                callback = callback || function () {};\n                if (!arr.length || limit <= 0) {\n                    return callback();\n                }\n                var completed = 0;\n                var started = 0;\n                var running = 0;\n\n                (function replenish () {\n                    if (completed >= arr.length) {\n                        return callback();\n                    }\n\n                    while (running < limit && started < arr.length) {\n                        started += 1;\n                        running += 1;\n                        iterator(arr[started - 1], function (err) {\n                            if (err) {\n                                callback(err);\n                                callback = function () {};\n                            }\n                            else {\n                                completed += 1;\n                                running -= 1;\n                                if (completed >= arr.length) {\n                                    callback();\n                                }\n                                else {\n                                    replenish();\n                                }\n                            }\n                        });\n                    }\n                })();\n            };\n        };\n\n\n        var doParallel = function (fn) {\n            return function () {\n                var args = Array.prototype.slice.call(arguments);\n                return fn.apply(null, [async.each].concat(args));\n            };\n        };\n        var doParallelLimit = function(limit, fn) {\n            return function () {\n                var args = Array.prototype.slice.call(arguments);\n                return fn.apply(null, [_eachLimit(limit)].concat(args));\n            };\n        };\n        var doSeries = function (fn) {\n            return function () {\n                var args = Array.prototype.slice.call(arguments);\n                return fn.apply(null, [async.eachSeries].concat(args));\n            };\n        };\n\n\n        var _asyncMap = function (eachfn, arr, iterator, callback) {\n            var results = [];\n            arr = _map(arr, function (x, i) {\n                return {index: i, value: x};\n            });\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        };\n        async.map = doParallel(_asyncMap);\n        async.mapSeries = doSeries(_asyncMap);\n        async.mapLimit = function (arr, limit, iterator, callback) {\n            return _mapLimit(limit)(arr, iterator, callback);\n        };\n\n        var _mapLimit = function(limit) {\n            return doParallelLimit(limit, _asyncMap);\n        };\n\n        // reduce only has a series version, as doing reduce in parallel won't\n        // work in many situations.\n        async.reduce = function (arr, memo, iterator, callback) {\n            async.eachSeries(arr, function (x, callback) {\n                iterator(memo, x, function (err, v) {\n                    memo = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, memo);\n            });\n        };\n        // inject alias\n        async.inject = async.reduce;\n        // foldl alias\n        async.foldl = async.reduce;\n\n        async.reduceRight = function (arr, memo, iterator, callback) {\n            var reversed = _map(arr, function (x) {\n                return x;\n            }).reverse();\n            async.reduce(reversed, memo, iterator, callback);\n        };\n        // foldr alias\n        async.foldr = async.reduceRight;\n\n        var _filter = function (eachfn, arr, iterator, callback) {\n            var results = [];\n            arr = _map(arr, function (x, i) {\n                return {index: i, value: x};\n            });\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (v) {\n                    if (v) {\n                        results.push(x);\n                    }\n                    callback();\n                });\n            }, function (err) {\n                callback(_map(results.sort(function (a, b) {\n                    return a.index - b.index;\n                }), function (x) {\n                    return x.value;\n                }));\n            });\n        };\n        async.filter = doParallel(_filter);\n        async.filterSeries = doSeries(_filter);\n        // select alias\n        async.select = async.filter;\n        async.selectSeries = async.filterSeries;\n\n        var _reject = function (eachfn, arr, iterator, callback) {\n            var results = [];\n            arr = _map(arr, function (x, i) {\n                return {index: i, value: x};\n            });\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (v) {\n                    if (!v) {\n                        results.push(x);\n                    }\n                    callback();\n                });\n            }, function (err) {\n                callback(_map(results.sort(function (a, b) {\n                    return a.index - b.index;\n                }), function (x) {\n                    return x.value;\n                }));\n            });\n        };\n        async.reject = doParallel(_reject);\n        async.rejectSeries = doSeries(_reject);\n\n        var _detect = function (eachfn, arr, iterator, main_callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x, function (result) {\n                    if (result) {\n                        main_callback(x);\n                        main_callback = function () {};\n                    }\n                    else {\n                        callback();\n                    }\n                });\n            }, function (err) {\n                main_callback();\n            });\n        };\n        async.detect = doParallel(_detect);\n        async.detectSeries = doSeries(_detect);\n\n        async.some = function (arr, iterator, main_callback) {\n            async.each(arr, function (x, callback) {\n                iterator(x, function (v) {\n                    if (v) {\n                        main_callback(true);\n                        main_callback = function () {};\n                    }\n                    callback();\n                });\n            }, function (err) {\n                main_callback(false);\n            });\n        };\n        // any alias\n        async.any = async.some;\n\n        async.every = function (arr, iterator, main_callback) {\n            async.each(arr, function (x, callback) {\n                iterator(x, function (v) {\n                    if (!v) {\n                        main_callback(false);\n                        main_callback = function () {};\n                    }\n                    callback();\n                });\n            }, function (err) {\n                main_callback(true);\n            });\n        };\n        // all alias\n        async.all = async.every;\n\n        async.sortBy = function (arr, iterator, callback) {\n            async.map(arr, function (x, callback) {\n                iterator(x, function (err, criteria) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else {\n                        callback(null, {value: x, criteria: criteria});\n                    }\n                });\n            }, function (err, results) {\n                if (err) {\n                    return callback(err);\n                }\n                else {\n                    var fn = function (left, right) {\n                        var a = left.criteria, b = right.criteria;\n                        return a < b ? -1 : a > b ? 1 : 0;\n                    };\n                    callback(null, _map(results.sort(fn), function (x) {\n                        return x.value;\n                    }));\n                }\n            });\n        };\n\n        async.auto = function (tasks, callback) {\n            callback = callback || function () {};\n            var keys = _keys(tasks);\n            if (!keys.length) {\n                return callback(null);\n            }\n\n            var results = {};\n\n            var listeners = [];\n            var addListener = function (fn) {\n                listeners.unshift(fn);\n            };\n            var removeListener = function (fn) {\n                for (var i = 0; i < listeners.length; i += 1) {\n                    if (listeners[i] === fn) {\n                        listeners.splice(i, 1);\n                        return;\n                    }\n                }\n            };\n            var taskComplete = function () {\n                _each(listeners.slice(0), function (fn) {\n                    fn();\n                });\n            };\n\n            addListener(function () {\n                if (_keys(results).length === keys.length) {\n                    callback(null, results);\n                    callback = function () {};\n                }\n            });\n\n            _each(keys, function (k) {\n                var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];\n                var taskCallback = function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    if (err) {\n                        var safeResults = {};\n                        _each(_keys(results), function(rkey) {\n                            safeResults[rkey] = results[rkey];\n                        });\n                        safeResults[k] = args;\n                        callback(err, safeResults);\n                        // stop subsequent errors hitting callback multiple times\n                        callback = function () {};\n                    }\n                    else {\n                        results[k] = args;\n                        async.setImmediate(taskComplete);\n                    }\n                };\n                var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n                var ready = function () {\n                    return _reduce(requires, function (a, x) {\n                        return (a && results.hasOwnProperty(x));\n                    }, true) && !results.hasOwnProperty(k);\n                };\n                if (ready()) {\n                    task[task.length - 1](taskCallback, results);\n                }\n                else {\n                    var listener = function () {\n                        if (ready()) {\n                            removeListener(listener);\n                            task[task.length - 1](taskCallback, results);\n                        }\n                    };\n                    addListener(listener);\n                }\n            });\n        };\n\n        async.waterfall = function (tasks, callback) {\n            callback = callback || function () {};\n            if (tasks.constructor !== Array) {\n                var err = new Error('First argument to waterfall must be an array of functions');\n                return callback(err);\n            }\n            if (!tasks.length) {\n                return callback();\n            }\n            var wrapIterator = function (iterator) {\n                return function (err) {\n                    if (err) {\n                        callback.apply(null, arguments);\n                        callback = function () {};\n                    }\n                    else {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        var next = iterator.next();\n                        if (next) {\n                            args.push(wrapIterator(next));\n                        }\n                        else {\n                            args.push(callback);\n                        }\n                        async.setImmediate(function () {\n                            iterator.apply(null, args);\n                        });\n                    }\n                };\n            };\n            wrapIterator(async.iterator(tasks))();\n        };\n\n        var _parallel = function(eachfn, tasks, callback) {\n            callback = callback || function () {};\n            if (tasks.constructor === Array) {\n                eachfn.map(tasks, function (fn, callback) {\n                    if (fn) {\n                        fn(function (err) {\n                            var args = Array.prototype.slice.call(arguments, 1);\n                            if (args.length <= 1) {\n                                args = args[0];\n                            }\n                            callback.call(null, err, args);\n                        });\n                    }\n                }, callback);\n            }\n            else {\n                var results = {};\n                eachfn.each(_keys(tasks), function (k, callback) {\n                    tasks[k](function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        results[k] = args;\n                        callback(err);\n                    });\n                }, function (err) {\n                    callback(err, results);\n                });\n            }\n        };\n\n        async.parallel = function (tasks, callback) {\n            _parallel({ map: async.map, each: async.each }, tasks, callback);\n        };\n\n        async.parallelLimit = function(tasks, limit, callback) {\n            _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n        };\n\n        async.series = function (tasks, callback) {\n            callback = callback || function () {};\n            if (tasks.constructor === Array) {\n                async.mapSeries(tasks, function (fn, callback) {\n                    if (fn) {\n                        fn(function (err) {\n                            var args = Array.prototype.slice.call(arguments, 1);\n                            if (args.length <= 1) {\n                                args = args[0];\n                            }\n                            callback.call(null, err, args);\n                        });\n                    }\n                }, callback);\n            }\n            else {\n                var results = {};\n                async.eachSeries(_keys(tasks), function (k, callback) {\n                    tasks[k](function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        results[k] = args;\n                        callback(err);\n                    });\n                }, function (err) {\n                    callback(err, results);\n                });\n            }\n        };\n\n        async.iterator = function (tasks) {\n            var makeCallback = function (index) {\n                var fn = function () {\n                    if (tasks.length) {\n                        tasks[index].apply(null, arguments);\n                    }\n                    return fn.next();\n                };\n                fn.next = function () {\n                    return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n                };\n                return fn;\n            };\n            return makeCallback(0);\n        };\n\n        async.apply = function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            return function () {\n                return fn.apply(\n                    null, args.concat(Array.prototype.slice.call(arguments))\n                );\n            };\n        };\n\n        var _concat = function (eachfn, arr, fn, callback) {\n            var r = [];\n            eachfn(arr, function (x, cb) {\n                fn(x, function (err, y) {\n                    r = r.concat(y || []);\n                    cb(err);\n                });\n            }, function (err) {\n                callback(err, r);\n            });\n        };\n        async.concat = doParallel(_concat);\n        async.concatSeries = doSeries(_concat);\n\n        async.whilst = function (test, iterator, callback) {\n            if (test()) {\n                iterator(function (err) {\n                    if (err) {\n                        return callback(err);\n                    }\n                    async.whilst(test, iterator, callback);\n                });\n            }\n            else {\n                callback();\n            }\n        };\n\n        async.doWhilst = function (iterator, test, callback) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                if (test()) {\n                    async.doWhilst(iterator, test, callback);\n                }\n                else {\n                    callback();\n                }\n            });\n        };\n\n        async.until = function (test, iterator, callback) {\n            if (!test()) {\n                iterator(function (err) {\n                    if (err) {\n                        return callback(err);\n                    }\n                    async.until(test, iterator, callback);\n                });\n            }\n            else {\n                callback();\n            }\n        };\n\n        async.doUntil = function (iterator, test, callback) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                if (!test()) {\n                    async.doUntil(iterator, test, callback);\n                }\n                else {\n                    callback();\n                }\n            });\n        };\n\n        async.queue = function (worker, concurrency) {\n            if (concurrency === undefined) {\n                concurrency = 1;\n            }\n            function _insert(q, data, pos, callback) {\n                if(data.constructor !== Array) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    var item = {\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    };\n\n                    if (pos) {\n                        q.tasks.unshift(item);\n                    } else {\n                        q.tasks.push(item);\n                    }\n\n                    if (q.saturated && q.tasks.length === concurrency) {\n                        q.saturated();\n                    }\n                    async.setImmediate(q.process);\n                });\n            }\n\n            var workers = 0;\n            var q = {\n                tasks: [],\n                concurrency: concurrency,\n                saturated: null,\n                empty: null,\n                drain: null,\n                push: function (data, callback) {\n                    _insert(q, data, false, callback);\n                },\n                unshift: function (data, callback) {\n                    _insert(q, data, true, callback);\n                },\n                process: function () {\n                    if (workers < q.concurrency && q.tasks.length) {\n                        var task = q.tasks.shift();\n                        if (q.empty && q.tasks.length === 0) {\n                            q.empty();\n                        }\n                        workers += 1;\n                        var next = function () {\n                            workers -= 1;\n                            if (task.callback) {\n                                task.callback.apply(task, arguments);\n                            }\n                            if (q.drain && q.tasks.length + workers === 0) {\n                                q.drain();\n                            }\n                            q.process();\n                        };\n                        var cb = only_once(next);\n                        worker(task.data, cb);\n                    }\n                },\n                length: function () {\n                    return q.tasks.length;\n                },\n                running: function () {\n                    return workers;\n                }\n            };\n            return q;\n        };\n\n        async.cargo = function (worker, payload) {\n            var working     = false,\n                tasks       = [];\n\n            var cargo = {\n                tasks: tasks,\n                payload: payload,\n                saturated: null,\n                empty: null,\n                drain: null,\n                push: function (data, callback) {\n                    if(data.constructor !== Array) {\n                        data = [data];\n                    }\n                    _each(data, function(task) {\n                        tasks.push({\n                            data: task,\n                            callback: typeof callback === 'function' ? callback : null\n                        });\n                        if (cargo.saturated && tasks.length === payload) {\n                            cargo.saturated();\n                        }\n                    });\n                    async.setImmediate(cargo.process);\n                },\n                process: function process() {\n                    if (working) {\n                        return;\n                    }\n                    if (tasks.length === 0) {\n                        if(cargo.drain) {\n                            cargo.drain();\n                        }\n                        return;\n                    }\n\n                    var ts = typeof payload === 'number' ?\n                        tasks.splice(0, payload) :\n                        tasks.splice(0);\n\n                    var ds = _map(ts, function (task) {\n                        return task.data;\n                    });\n\n                    if(cargo.empty) {\n                        cargo.empty();\n                    }\n                    working = true;\n                    worker(ds, function () {\n                        working = false;\n\n                        var args = arguments;\n                        _each(ts, function (data) {\n                            if (data.callback) {\n                                data.callback.apply(null, args);\n                            }\n                        });\n\n                        process();\n                    });\n                },\n                length: function () {\n                    return tasks.length;\n                },\n                running: function () {\n                    return working;\n                }\n            };\n            return cargo;\n        };\n\n        /* jshint ignore:start */\n        var _console_fn = function (name) {\n            return function (fn) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                fn.apply(null, args.concat([function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (typeof console !== 'undefined') {\n                        if (err) {\n                            if (console.error) {\n                                console.error(err);\n                            }\n                        }\n                        else if (console[name]) {\n                            _each(args, function (x) {\n                                console[name](x);\n                            });\n                        }\n                    }\n                }]));\n            };\n        };\n        /* jshint ignore:end */\n\n        async.log = _console_fn('log');\n        async.dir = _console_fn('dir');\n        /*async.info = _console_fn('info');\n         async.warn = _console_fn('warn');\n         async.error = _console_fn('error');*/\n\n        async.memoize = function (fn, hasher) {\n            var memo = {};\n            var queues = {};\n            hasher = hasher || function (x) {\n                return x;\n            };\n            var memoized = function () {\n                var args = Array.prototype.slice.call(arguments);\n                var callback = args.pop();\n                var key = hasher.apply(null, args);\n                if (key in memo) {\n                    callback.apply(null, memo[key]);\n                }\n                else if (key in queues) {\n                    queues[key].push(callback);\n                }\n                else {\n                    queues[key] = [callback];\n                    fn.apply(null, args.concat([function () {\n                        memo[key] = arguments;\n                        var q = queues[key];\n                        delete queues[key];\n                        for (var i = 0, l = q.length; i < l; i++) {\n                            q[i].apply(null, arguments);\n                        }\n                    }]));\n                }\n            };\n            memoized.memo = memo;\n            memoized.unmemoized = fn;\n            return memoized;\n        };\n\n        async.unmemoize = function (fn) {\n            return function () {\n                return (fn.unmemoized || fn).apply(null, arguments);\n            };\n        };\n\n        async.times = function (count, iterator, callback) {\n            var counter = [];\n            for (var i = 0; i < count; i++) {\n                counter.push(i);\n            }\n            return async.map(counter, iterator, callback);\n        };\n\n        async.timesSeries = function (count, iterator, callback) {\n            var counter = [];\n            for (var i = 0; i < count; i++) {\n                counter.push(i);\n            }\n            return async.mapSeries(counter, iterator, callback);\n        };\n\n        async.compose = function (/* functions... */) {\n            var fns = Array.prototype.reverse.call(arguments);\n            return function () {\n                var that = this;\n                var args = Array.prototype.slice.call(arguments);\n                var callback = args.pop();\n                async.reduce(fns, args, function (newargs, fn, cb) {\n                        fn.apply(that, newargs.concat([function () {\n                            var err = arguments[0];\n                            var nextargs = Array.prototype.slice.call(arguments, 1);\n                            cb(err, nextargs);\n                        }]));\n                    },\n                    function (err, results) {\n                        callback.apply(that, [err].concat(results));\n                    });\n            };\n        };\n\n        var _applyEach = function (eachfn, fns /*args...*/) {\n            var go = function () {\n                var that = this;\n                var args = Array.prototype.slice.call(arguments);\n                var callback = args.pop();\n                return eachfn(fns, function (fn, cb) {\n                        fn.apply(that, args.concat([cb]));\n                    },\n                    callback);\n            };\n            if (arguments.length > 2) {\n                var args = Array.prototype.slice.call(arguments, 2);\n                return go.apply(this, args);\n            }\n            else {\n                return go;\n            }\n        };\n        async.applyEach = doParallel(_applyEach);\n        async.applyEachSeries = doSeries(_applyEach);\n\n        async.forever = function (fn, callback) {\n            function next(err) {\n                if (err) {\n                    if (callback) {\n                        return callback(err);\n                    }\n                    throw err;\n                }\n                fn(next);\n            }\n            next();\n        };\n\n        /*\n        // AMD / RequireJS\n        if (typeof define !== 'undefined' && define.amd) {\n            define([], function () {\n                return async;\n            });\n        }\n        // Node.js\n        else if (typeof module !== 'undefined' && module.exports) {\n            module.exports = async;\n        }\n        // included directly via <script> tag\n        else {\n            root.async = async;\n        }\n        */\n\n        root.async = async;\n\n\n\n\n\n        //////////////////////////////////////////////////////////////////////////////////////\n        //\n        // EQUIV AND HOOZIT\n        //\n        //////////////////////////////////////////////////////////////////////////////////////\n\n        // Determine what is o.\n        function hoozit(o) {\n            if (o.constructor === String) {\n                return \"string\";\n\n            } else if (o.constructor === Boolean) {\n                return \"boolean\";\n\n            } else if (o.constructor === Number) {\n\n                if (isNaN(o)) {\n                    return \"nan\";\n                } else {\n                    return \"number\";\n                }\n\n            } else if (typeof o === \"undefined\") {\n                return \"undefined\";\n\n                // consider: typeof null === object\n            } else if (o === null) {\n                return \"null\";\n\n                // consider: typeof [] === object\n            } else if (o instanceof Array) {\n                return \"array\";\n\n                // consider: typeof new Date() === object\n            } else if (o instanceof Date) {\n                return \"date\";\n\n                // consider: /./ instanceof Object;\n                //           /./ instanceof RegExp;\n                //          typeof /./ === \"function\"; // => false in IE and Opera,\n                //                                          true in FF and Safari\n            } else if (o instanceof RegExp) {\n                return \"regexp\";\n\n            } else if (typeof o === \"object\") {\n                return \"object\";\n\n            } else if (o instanceof Function) {\n                return \"function\";\n            } else {\n                return undefined;\n            }\n        }\n\n        // Call the o related callback with the given arguments.\n        function bindCallbacks(o, callbacks, args) {\n            var prop = hoozit(o);\n            if (prop) {\n                if (hoozit(callbacks[prop]) === \"function\") {\n                    return callbacks[prop].apply(callbacks, args);\n                } else {\n                    return callbacks[prop]; // or undefined\n                }\n            }\n        }\n\n        // Test for equality any JavaScript type.\n        var equiv = root.equiv = function ()\n        {\n            var innerEquiv; // the real equiv function\n            var callers = []; // stack to decide between skip/abort functions\n\n            var callbacks = function () {\n\n                // for string, boolean, number and null\n                function useStrictEquality(b, a) {\n                    if (b instanceof a.constructor || a instanceof b.constructor) {\n                        // to catch short annotaion VS 'new' annotation of a declaration\n                        // e.g. var i = 1;\n                        //      var j = new Number(1);\n                        return a == b;\n                    } else {\n                        return a === b;\n                    }\n                }\n\n                return {\n                    \"string\": useStrictEquality,\n                    \"boolean\": useStrictEquality,\n                    \"number\": useStrictEquality,\n                    \"null\": useStrictEquality,\n                    \"undefined\": useStrictEquality,\n\n                    \"nan\": function (b) {\n                        return isNaN(b);\n                    },\n\n                    \"date\": function (b, a) {\n                        return hoozit(b) === \"date\" && a.valueOf() === b.valueOf();\n                    },\n\n                    \"regexp\": function (b, a) {\n                        return hoozit(b) === \"regexp\" &&\n                            a.source === b.source && // the regex itself\n                            a.global === b.global && // and its modifers (gmi) ...\n                            a.ignoreCase === b.ignoreCase &&\n                            a.multiline === b.multiline;\n                    },\n\n                    // - skip when the property is a method of an instance (OOP)\n                    // - abort otherwise,\n                    //   initial === would have catch identical references anyway\n                    \"function\": function () {\n                        var caller = callers[callers.length - 1];\n                        return caller !== Object &&\n                            typeof caller !== \"undefined\";\n                    },\n\n                    \"array\": function (b, a) {\n                        var i;\n                        var len;\n\n                        // b could be an object literal here\n                        if ( ! (hoozit(b) === \"array\")) {\n                            return false;\n                        }\n\n                        len = a.length;\n                        if (len !== b.length) { // safe and faster\n                            return false;\n                        }\n                        for (i = 0; i < len; i++) {\n                            if( ! innerEquiv(a[i], b[i])) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    },\n\n                    \"object\": function (b, a) {\n                        var i;\n                        var eq = true; // unless we can proove it\n                        var aProperties = [], bProperties = []; // collection of strings\n\n                        // comparing constructors is more strict than using instanceof\n                        if ( a.constructor !== b.constructor) {\n                            return false;\n                        }\n\n                        // stack constructor before traversing properties\n                        callers.push(a.constructor);\n\n                        for (i in a) { // be strict: don't ensures hasOwnProperty and go deep\n\n                            aProperties.push(i); // collect a's properties\n\n                            if ( ! innerEquiv(a[i], b[i])) {\n                                eq = false;\n                            }\n                        }\n\n                        callers.pop(); // unstack, we are done\n\n                        for (i in b) {\n                            bProperties.push(i); // collect b's properties\n                        }\n\n                        // Ensures identical properties name\n                        return eq && innerEquiv(aProperties.sort(), bProperties.sort());\n                    }\n                };\n            }();\n\n            innerEquiv = function () { // can take multiple arguments\n                var args = Array.prototype.slice.apply(arguments);\n                if (args.length < 2) {\n                    return true; // end transition\n                }\n\n                return (function (a, b) {\n                    if (a === b) {\n                        return true; // catch the most you can\n                    } else if (a === null || b === null || typeof a === \"undefined\" || typeof b === \"undefined\" || hoozit(a) !== hoozit(b)) {\n                        return false; // don't lose time with error prone cases\n                    } else {\n                        return bindCallbacks(a, callbacks, [b, a]);\n                    }\n\n                    // apply transition with (1..n) arguments\n                })(args[0], args[1]) && arguments.callee.apply(this, args.splice(1, args.length -1));\n            };\n\n            return innerEquiv;\n\n        }();\n\n    }());\n\n    Alpaca.MARKER_CLASS_CONTROL_FIELD = \"alpaca-marker-control-field\";\n    Alpaca.MARKER_CLASS_CONTAINER_FIELD = \"alpaca-marker-container-field\";\n    Alpaca.MARKER_CLASS_CONTAINER_FIELD_ITEM = \"alpaca-marker-control-field-item\";\n    Alpaca.MARKER_DATA_CONTAINER_FIELD_ITEM_KEY = \"data-alpaca-container-field-item-key\";\n    Alpaca.MARKER_CLASS_FORM_ITEMS_FIELD = \"alpaca-marker-form-items-field\";\n    Alpaca.CLASS_CONTAINER = \"alpaca-container\";\n    Alpaca.CLASS_CONTROL = \"alpaca-control\";\n    Alpaca.MARKER_CLASS_INSERT = \"alpaca-marker-insert\";\n    Alpaca.MARKER_DATA_INSERT_KEY = \"data-alpaca-marker-insert-key\";\n    Alpaca.MARKER_CLASS_ARRAY_TOOLBAR = \"alpaca-marker-array-field-toolbar\";\n    Alpaca.MARKER_DATA_ARRAY_TOOLBAR_FIELD_ID = \"data-alpaca-array-field-toolbar-field-id\";\n    Alpaca.MARKER_CLASS_ARRAY_ITEM_ACTIONBAR = \"alpaca-marker-array-field-item-actionbar\";\n    Alpaca.MARKER_DATA_ARRAY_ITEM_KEY = \"data-alpaca-marker-array-field-item-key\";\n    Alpaca.MARKER_DATA_ARRAY_ITEM_PARENT_FIELD_ID = \"data-alpaca-marker-array-field-item-parent-field-id\";\n    Alpaca.MARKER_CLASS_CONTAINER_FIELD_ITEM_FIELD = \"alpaca-marker-container-field-item-field\";\n\n    Alpaca.makeCacheKey = function(viewId, scopeType, scopeId, templateId)\n    {\n        return viewId + \":\" + scopeType + \":\" + scopeId + \":\" + templateId;\n    };\n\n    /**\n     * Splits a cache key into its parts - viewId, scopeType, scopeId and templateId.\n     *\n     * @param cacheKey\n     * @returns {{}}\n     */\n    Alpaca.splitCacheKey = function(cacheKey)\n    {\n        var parts = {};\n\n        var x = cacheKey.indexOf(\":\");\n        var y = cacheKey.lastIndexOf(\":\");\n\n        parts.viewId = cacheKey.substring(0, x);\n        parts.templateId = cacheKey.substring(y + 1);\n\n        var scopeIdentifier = cacheKey.substring(x + 1, y);\n\n        var z = scopeIdentifier.indexOf(\":\");\n\n        parts.scopeType = scopeIdentifier.substring(0, z);\n        parts.scopeId = scopeIdentifier.substring(z+1);\n\n        return parts;\n    };\n\n    /**\n     * Creates an empty data object for a given JSON schema.\n     *\n     * @param schema\n     * @returns {string}\n     */\n    Alpaca.createEmptyDataInstance = function(schema)\n    {\n        if (!schema) {\n            return \"\";\n        }\n\n        if (schema.type === \"object\") {\n            return {};\n        }\n\n        if (schema.type === \"array\") {\n            return [];\n        }\n\n        if (schema.type === \"number\") {\n            return -1;\n        }\n\n        if (schema.type === \"boolean\") {\n            return false;\n        }\n\n        return \"\";\n    };\n\n    /**\n     * Swaps two divs visually and then fires a callback.\n     *\n     * @param source\n     * @param target\n     * @param duration\n     * @param callback\n     */\n    Alpaca.animatedSwap = function(source, target, duration, callback)\n    {\n        if (typeof(duration) === \"function\") {\n            callback = duration;\n            duration = 500;\n        }\n\n        var _animate = function(a, b, duration, callback)\n        {\n            var from = $(a),\n                dest = $(b),\n                from_pos = from.offset(),\n                dest_pos = dest.offset(),\n                from_clone = from.clone(),\n                dest_clone = dest.clone(),\n                total_route_vertical   = dest_pos.top + dest.height() - from_pos.top,\n                route_from_vertical    = 0,\n                route_dest_vertical    = 0,\n                total_route_horizontal = dest_pos.left + dest.width() - from_pos.left,\n                route_from_horizontal  = 0,\n                route_dest_horizontal  = 0;\n\n            from.css(\"opacity\", 0);\n            dest.css(\"opacity\", 0);\n\n            from_clone.insertAfter(from).css({position: \"absolute\", width: from.outerWidth(), height: from.outerHeight()}).offset(from_pos).css(\"z-index\", \"999\");\n            dest_clone.insertAfter(dest).css({position: \"absolute\", width: dest.outerWidth(), height: dest.outerHeight()}).offset(dest_pos).css(\"z-index\", \"999\");\n\n            if(from_pos.top !== dest_pos.top) {\n                route_from_vertical = total_route_vertical - from.height();\n            }\n            route_dest_vertical = total_route_vertical - dest.height();\n            if(from_pos.left !== dest_pos.left) {\n                route_from_horizontal = total_route_horizontal - from.width();\n            }\n            route_dest_horizontal = total_route_horizontal - dest.width();\n\n            from_clone.animate({\n                top: \"+=\" + route_from_vertical + \"px\",\n                left: \"+=\" + route_from_horizontal + \"px\"\n            }, duration, function(){\n                dest.css(\"opacity\", 1);\n                $(this).remove();\n            });\n\n            dest_clone.animate({\n                top: \"-=\" + route_dest_vertical + \"px\",\n                left: \"-=\" + route_dest_horizontal + \"px\"\n            }, duration, function(){\n                from.css(\"opacity\", 1);\n                $(this).remove();\n            });\n\n            window.setTimeout(function() {\n                from_clone.remove();\n                dest_clone.remove();\n                callback();\n            }, duration + 1);\n        };\n\n        _animate(source, target, duration, callback);\n    };\n\n    /**\n     * Animates the movement of a div visually and then fires callback.\n     *\n     * @param source\n     * @param target\n     * @param duration\n     * @param callback\n     */\n    Alpaca.animatedMove = function(source, target, duration, callback)\n    {\n        if (typeof(duration) === \"function\") {\n            callback = duration;\n            duration = 500;\n        }\n\n        var _animate = function(a, b, duration, callback)\n        {\n            var from = $(a),\n                dest = $(b),\n                from_pos = from.offset(),\n                dest_pos = dest.offset(),\n                from_clone = from.clone(),\n                //dest_clone = dest.clone(),\n                total_route_vertical   = dest_pos.top + dest.height() - from_pos.top,\n                route_from_vertical    = 0,\n                route_dest_vertical    = 0,\n                total_route_horizontal = dest_pos.left + dest.width() - from_pos.left,\n                route_from_horizontal  = 0,\n                route_dest_horizontal  = 0;\n\n            from.css(\"opacity\", 0);\n            dest.css(\"opacity\", 0);\n\n            from_clone.insertAfter(from).css({position: \"absolute\", width: from.outerWidth(), height: from.outerHeight()}).offset(from_pos).css(\"z-index\", \"999\");\n            //dest_clone.insertAfter(dest).css({position: \"absolute\", width: dest.outerWidth(), height: dest.outerHeight()}).offset(dest_pos).css(\"z-index\", \"999\");\n\n            if(from_pos.top !== dest_pos.top) {\n                route_from_vertical = total_route_vertical - from.height();\n            }\n            route_dest_vertical = total_route_vertical - dest.height();\n            if(from_pos.left !== dest_pos.left) {\n                route_from_horizontal = total_route_horizontal - from.width();\n            }\n            route_dest_horizontal = total_route_horizontal - dest.width();\n\n            from_clone.animate({\n                top: \"+=\" + route_from_vertical + \"px\",\n                left: \"+=\" + route_from_horizontal + \"px\"\n            }, duration, function(){\n                dest.css(\"opacity\", 1);\n                $(this).remove();\n            });\n\n            /*\n            dest_clone.animate({\n                top: \"-=\" + route_dest_vertical + \"px\",\n                left: \"-=\" + route_dest_horizontal + \"px\"\n            }, duration, function(){\n                from.css(\"opacity\", 1);\n                $(this).remove();\n            });\n            */\n\n            window.setTimeout(function() {\n                from_clone.remove();\n                //dest_clone.remove();\n                callback();\n            }, duration + 1);\n        };\n\n        _animate(source, target, duration, callback);\n    };\n\n\n    Alpaca.fireReady = function(_field)\n    {\n        if (_field.children && _field.children.length > 0)\n        {\n            for (var g = 0; g < _field.children.length; g++)\n            {\n                Alpaca.fireReady(_field.children[g]);\n            }\n        }\n\n        _field.trigger(\"ready\");\n    };\n\n    Alpaca.readCookie = function(name)\n    {\n        function _readCookie(name)\n        {\n            var nameEQ = name + \"=\";\n            var ca = document.cookie.split(';');\n            for (var i = 0; i < ca.length; i++)\n            {\n                var c = ca[i];\n                while (c.charAt(0)==' ')\n                {\n                    c = c.substring(1,c.length);\n                }\n\n                if (c.indexOf(nameEQ) == 0)\n                {\n                    return c.substring(nameEQ.length,c.length);\n                }\n            }\n            return null;\n        }\n\n        var value = null;\n\n        if (typeof(document) !== \"undefined\")\n        {\n            value = _readCookie(name);\n        }\n\n        return value;\n    };\n\n    Alpaca.safeSetObjectArray = function(baseObject, propertyName, values) {\n\n        if (typeof(baseObject[propertyName]) === \"undefined\" || baseObject[propertyName] === null)\n        {\n            baseObject[propertyName] = [];\n        }\n        else\n        {\n            baseObject[propertyName].length = 0;\n        }\n\n        for (var i = 0; i < values.length; i++)\n        {\n            baseObject[propertyName].push(values[i]);\n        }\n    };\n\n    Alpaca.inArray = function(array, val)\n    {\n        return ($.inArray(val, array) > -1);\n    };\n\n    Alpaca.indexOf = function(array, val)\n    {\n        return $.inArray(val, array);\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Moment.js static\n    //\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n\n    Alpaca.moment = function() {\n\n        if (!Alpaca._moment) {\n            if (window.moment) {\n                Alpaca._moment = window.moment;\n            }\n        }\n\n        if (!Alpaca._moment) {\n            throw new Error(\"The moment.js library has not been included, cannot produce moment object\");\n        }\n\n        return Alpaca._moment.call(this, arguments);\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CSRF Support\n    //\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n\n    Alpaca.CSRF_TOKEN = null;\n    Alpaca.CSRF_COOKIE_NAMES = [\"CSRF-TOKEN\", \"XSRF-TOKEN\"];\n    Alpaca.CSRF_HEADER_NAME = \"X-CSRF-TOKEN\";\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // STATIC DEFAULTS\n    //\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // use this to set the default \"sticky\" toolbar behavior\n    // set to true to have toolbars always stick or undefined to have them appear on hover\n    Alpaca.defaultToolbarSticky = undefined;\n\n    // use this to have invalid messages show up for read-only fields\n    Alpaca.showReadOnlyInvalidState = false;\n\n})(jQuery);\n\n/*jshint -W014 */ // bad line breaking\n/*jshint -W004 */ // duplicate variables\n(function($)\n{\n    var Alpaca = $.alpaca;\n\n    Alpaca.listenerId = function()\n    {\n        var x = 0;\n\n        return function()\n        {\n            return \"listener-\" + (x++);\n        };\n    }();\n\n    /**\n     * Subscribes a function handler to an observable.\n     *\n     * @param [String] scope optional scope\n     * @param {String} id the variable id\n     * @param {Function} callbackFunction the callback function\n     *\n     * @return descriptor\n     */\n    Alpaca.subscribe = function()\n    {\n        var args = Alpaca.makeArray(arguments);\n\n        var scope = null;\n        var id = null;\n        var listener = null;\n\n        if (args.length == 2)\n        {\n            scope = \"global\";\n            id = args.shift();\n            listener = args.shift();\n        }\n        else\n        {\n            scope = args.shift();\n            id = args.shift();\n            listener = args.shift();\n        }\n\n        // pick off path if id is a field\n        if (id && Alpaca.isObject(id))\n        {\n            id = id.path;\n        }\n\n        if (!id)\n        {\n            Alpaca.logError(\"Missing observable subscribe id: \" + id);\n            return null;\n        }\n\n        // function identifier\n        var listenerId = listener._lfid;\n        if (!listenerId) {\n            listenerId = Alpaca.listenerId();\n            listener._lfid = listenerId;\n        }\n\n        // wrap function into a closure\n        var func = function(that) {\n            return function() {\n                return listener.apply(that, arguments);\n            };\n        }(this);\n        func._lfid = listener._lfid;\n\n        var observables = Alpaca.ScopedObservables.get(scope);\n        var observable = observables.observable(id);\n\n        // tell the observable to subscribe\n        observable.subscribe(listenerId, func);\n\n        return {\n            \"scope\": scope,\n            \"id\": id,\n            \"listenerId\": listenerId\n        };\n    };\n\n    /**\n     * Unsubscribes a function handler from an observable.\n     *\n     * @param [String] scope optional scope\n     * @param {String} id the variable id\n     * @param {String|Function} listener either the function or listener id\n     * @return descriptor\n     */\n    Alpaca.unsubscribe = function()\n    {\n        var args = Alpaca.makeArray(arguments);\n\n        var scope = null;\n        var id = null;\n        var listenerOrId = null;\n\n        if (args.length == 2)\n        {\n            scope = \"global\";\n            id = args.shift();\n            listenerOrId = args.shift();\n        }\n        else if (args.length == 3)\n        {\n            scope = args.shift();\n            id = args.shift();\n            listenerOrId = args.shift();\n        }\n\n        var listenerId = listenerOrId;\n        if (Alpaca.isFunction(listenerId))\n        {\n            listenerId = listenerId._lfid;\n        }\n\n        // pick off path if id is a field\n        if (id && Alpaca.isObject(id))\n        {\n            id = id.path;\n        }\n\n        if (!id)\n        {\n            Alpaca.logError(\"Missing observable id: \" + id);\n            return null;\n        }\n\n        var observables = Alpaca.ScopedObservables.get(scope);\n        var observable = observables.observable(id);\n\n        // tell the observable to unsubscribe\n        observable.unsubscribe(listenerId);\n\n        return {\n            \"scope\": scope,\n            \"id\": id,\n            \"listenerId\": listenerId\n        };\n    };\n\n    /**\n     * Gets or sets an observable in the given scope.\n     *\n     * @param [String] scope optional scope\n     * @param {String} id the variable id\n     */\n    Alpaca.observable = function()\n    {\n        var scope;\n        var id;\n\n        var args = Alpaca.makeArray(arguments);\n        if (args.length == 1)\n        {\n            scope = \"global\";\n            id = args.shift();\n        }\n        else if (args.length == 2)\n        {\n            scope = args.shift();\n            id = args.shift();\n        }\n\n        // pick off path if id is a field\n        if (id && Alpaca.isObject(id))\n        {\n            id = id.path;\n        }\n\n        if (!id)\n        {\n            Alpaca.logError(\"Missing observable id: \" + JSON.stringify(args));\n        }\n        else\n        {\n            var observables = Alpaca.ScopedObservables.get(scope);\n            observable = observables.observable(id);\n        }\n\n        return observable;\n    };\n\n    Alpaca.clearObservable = function()\n    {\n        var scope;\n        var id;\n\n        var args = Alpaca.makeArray(arguments);\n        if (args.length == 1)\n        {\n            scope = \"global\";\n            id = args.shift();\n        }\n        else if (args.length == 2)\n        {\n            scope = args.shift();\n            id = args.shift();\n        }\n\n        // pick off path if id is a field\n        if (id && Alpaca.isObject(id))\n        {\n            id = id.path;\n        }\n\n        if (!id)\n        {\n            Alpaca.logError(\"Missing observable id: \" + JSON.stringify(args));\n        }\n\n        var observables = Alpaca.ScopedObservables.get(scope);\n        var observable = observables.observable(id);\n\n        observable.clear();\n    };\n\n    /**\n     * Declares and gets a dependent observable in a given scope\n     *\n     * @param scope\n     * @param id\n     * @param func\n     */\n    Alpaca.dependentObservable = function()\n    {\n        var scope = null;\n        var id = null;\n        var func = null;\n\n        var args = Alpaca.makeArray(arguments);\n        if (args.length == 2)\n        {\n            scope = \"global\";\n            id = args.shift();\n            func = args.shift();\n        }\n        else if (args.length == 3)\n        {\n            scope = args.shift();\n            id = args.shift();\n            func = args.shift();\n        }\n        else\n        {\n            Alpaca.error(\"Wrong number of arguments\");\n            return;\n        }\n\n        // pick off path if id is a field\n        if (id && Alpaca.isObject(id))\n        {\n            id = id.path;\n        }\n\n        if (!id)\n        {\n            Alpaca.logError(\"Missing observable id: \" + JSON.stringify(args));\n        }\n\n        var observables = Alpaca.ScopedObservables.get(scope);\n\n        return observables.dependentObservable(id, func);\n    };\n\n})(jQuery);\n(function($)\n{\n    var Alpaca = $.alpaca;\n\n    /**\n     * Collection of observables.\n     */\n    Alpaca.Observables = Base.extend(\n    {\n        constructor: function(scope)\n        {\n            this.base();\n\n            this.scope = scope;\n\n            this.observables = {};\n        },\n\n        observable: function(id, initialValue)\n        {\n            if (!this.observables[id])\n            {\n                var observable = new Alpaca.Observable(this.scope, id);\n\n                if (initialValue)\n                {\n                    observable.set(initialValue);\n                }\n\n                this.observables[id] = observable;\n            }\n\n            // hand back from map\n            return this.observables[id];\n        },\n\n        dependentObservable: function(id, func)\n        {\n            var _this = this;\n\n            if (!this.observables[id])\n            {\n                var observable = this.observable(id);\n\n                // wrap the model\n                var m = new Alpaca.Observables(this.scope);\n                m.observable = function(x, y)\n                {\n                    //Ratchet.debug(\"Observable: \" + observable.id + \" depends on observable: \" + x);\n                    var o = _this.observable(x, y);\n                    o.markDependentOnUs(observable);\n\n                    return o;\n                };\n\n                // create the value function (where \"this\" = the model)\n                var valueFunction = function() {\n                    return func.call(m);\n                };\n\n                observable.setValueFunction(valueFunction);\n            }\n\n            return this.observables[id];\n        },\n\n        observables: function()\n        {\n            return this.observables;\n        }\n\n    });\n\n})(jQuery);\n(function($)\n{\n    var Alpaca = $.alpaca;\n\n    Alpaca.Observable = Base.extend(\n    {\n        constructor: function(scope, id)\n        {\n            var _this = this;\n\n            this.base();\n\n            this.id = scope + \"-\" + id;\n\n            this.value = null;\n            this.subscribers = {};\n\n            // array that contains observable whose value is dependent on our value\n            this.dependentOnUs = {};\n\n\n            // privileged functions\n\n            this.notifySubscribers = function(prior)\n            {\n                var _this = this;\n\n                $.each(this.subscribers, function(id, handler) {\n                    handler(_this.value, prior);\n                });\n            };\n\n            this.notifyDependents = function(prior)\n            {\n                $.each(this.dependentOnUs, function(key, observer) {\n                    observer.onDependencyChange();\n                });\n            };\n\n            // assume null value function\n            this.valueFunction = null;\n        },\n\n        setValueFunction: function(valueFunction)\n        {\n            this.valueFunction = valueFunction;\n            this.onDependencyChange();\n        },\n\n        /**\n         * Registers a handler which acts as a subscriber.  When this observable value changes,\n         * the handler method is raised.\n         *\n         * @param f\n         */\n        subscribe: function(id, handler)\n        {\n            if (!this.isSubscribed(id))\n            {\n                this.subscribers[id] = handler;\n            }\n        },\n\n        unsubscribe: function(id)\n        {\n            delete this.subscribers[id];\n        },\n\n        isSubscribed: function(id)\n        {\n            return (this.subscribers[id] ? true: false);\n        },\n\n        markDependentOnUs: function(observable)\n        {\n            this.dependentOnUs[observable.id] = observable;\n        },\n\n        /**\n         * Fired when one of our dependents has changed its value.\n         */\n        onDependencyChange: function()\n        {\n            var prior = this.get();\n\n            // if we have a value calculation function, fire it\n            if (this.valueFunction)\n            {\n                var current = this.valueFunction();\n\n                // if the value changed, notify\n                if (prior != current)\n                {\n                    this.set(current);\n                }\n            }\n        },\n\n        set: function(value)\n        {\n            var prior = this.value;\n            this.value = value;\n\n            // notify all dependents (observers that depend on our value)\n            this.notifyDependents(prior);\n\n            // notify all subscribers of the updated value\n            this.notifySubscribers(prior);\n        },\n\n        get: function(_default)\n        {\n            var v = this.value;\n            if (!v)\n            {\n                v = _default;\n            }\n            return v;\n        },\n\n        clear: function()\n        {\n            var prior = this.value;\n            delete this.value;\n\n            // notify all dependents (observers that depend on our value)\n            this.notifyDependents(prior);\n\n            // notify all subscribers of the updated value\n            this.notifySubscribers(prior);\n        }\n\n    });\n\n})(jQuery);\n(function($)\n{\n    var Alpaca = $.alpaca;\n\n    Alpaca.ScopedObservables = {};\n    Alpaca.ScopedObservables.map = {};\n\n    Alpaca.ScopedObservables.get = function(scope)\n    {\n        if (!Alpaca.ScopedObservables.map[scope])\n        {\n            Alpaca.ScopedObservables.map[scope] = new Alpaca.Observables(scope);\n        }\n\n        return Alpaca.ScopedObservables.map[scope];\n    };\n\n})(jQuery);\n\n(function()\n{\n    Alpaca.TemplateEngineRegistry = (function() {\n\n        var registry = {};\n\n        return {\n\n            register: function(id, engine)\n            {\n                registry[id] = engine;\n\n                engine.init();\n            },\n\n            find: function(idOrType)\n            {\n                var engine = null;\n\n                if (registry[idOrType])\n                {\n                    engine = registry[idOrType];\n                }\n                else\n                {\n                    // inspect by type\n                    for (var id in registry)\n                    {\n                        var supportedMimetypes = registry[id].supportedMimetypes();\n                        for (var i = 0; i < supportedMimetypes.length; i++)\n                        {\n                            if (idOrType.toLowerCase() === supportedMimetypes[i].toLowerCase())\n                            {\n                                engine = registry[id];\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                return engine;\n            },\n\n            ids: function()\n            {\n                var ids = [];\n\n                for (var id in registry)\n                {\n                    ids.push(id);\n                }\n\n                return ids;\n            }\n        };\n    })();\n\n})();\n\n(function($)\n{\n    Alpaca.AbstractTemplateEngine = Base.extend(\n    {\n        constructor: function(id)\n        {\n            this.base();\n\n            this.id = id;\n\n            this.cleanup = function(html)\n            {\n                if (html)\n                {\n                    // if if starts with a script tag, then we strip that out\n                    if ($(html).length === 1)\n                    {\n                        if ($(html)[0].nodeName.toLowerCase() === \"script\")\n                        {\n                            return $(html).html();\n\n                        }\n                    }\n                }\n\n                return html;\n            };\n        },\n\n        /**\n         * Compiles the given template (or URI or dom selector)\n         *\n         * The callback is fired once the compile completes and has signature callback(err).\n         *\n         * @param cacheKey\n         * @param template\n         * @param callback\n         */\n        compile: function(cacheKey, template, callback)\n        {\n            var self = this;\n\n            // the value being compiled can be\n            //   HTML\n            //   URL (http, ./ or /)\n            //   dom selector (#abc, .classname)\n            //   dom element\n\n            // here we try to determine what type of value it is\n            var type = \"html\";\n            if (Alpaca.isString(template))\n            {\n                var lc = template.toLowerCase();\n                if (Alpaca.isUri(lc))\n                {\n                    type = \"uri\";\n                }\n                else if (template.indexOf(\"#\") === 0 || template.indexOf(\".\") === 0 || template.indexOf(\"[\") === 0)\n                {\n                    type = \"selector\";\n                }\n            }\n            else\n            {\n                // it's a dom element, we flow through\n            }\n\n            // now extract html and compile\n            if (type === \"selector\")\n            {\n                self._compile(cacheKey, template, function(err) {\n                    callback(err);\n                });\n            }\n            else if (type === \"uri\")\n            {\n                var fileExtension = self.fileExtension();\n\n                var url = template;\n                if (url.indexOf(\".\" + fileExtension) === -1) {\n                    url += \".\" + fileExtension;\n                }\n\n                // load the template via ajax\n                $.ajax({\n                    \"url\": url,\n                    \"dataType\": \"html\",\n                    \"success\": function(html, code, xhr)\n                    {\n                        // cleanup html\n                        html = self.cleanup(html);\n\n                        self._compile(cacheKey, html, function(err) {\n                            callback(err);\n                        });\n                    },\n                    \"error\": function(xhr, code)\n                    {\n                        callback({\n                            \"message\": xhr.responseText,\n                            \"xhr\": xhr,\n                            \"code\": code\n                        }, null);\n                    }\n                });\n            }\n            else if (type === \"html\")\n            {\n                var html = template;\n                if (html instanceof jQuery)\n                {\n                    html = $(html).outerHTML();\n                }\n\n                self._compile(cacheKey, html, function(err) {\n                    callback(err);\n                });\n            }\n            else\n            {\n                callback(new Error(\"Template engine cannot determine how to handle type: \" + type));\n            }\n        },\n\n        _compile: function(cacheKey, html, callback)\n        {\n            // for null templates, set to empty string\n            if (Alpaca.isEmpty(html)) {\n                html = \"\";\n            }\n\n            // trim the html\n            html = Alpaca.trim(html);\n\n            if (html.toLowerCase().indexOf(\"<script\") === 0)\n            {\n                // already has script tag\n            }\n            else\n            {\n                // apply script tag\n                html = \"<script type='\" + this.supportedMimetypes()[0] + \"'>\" + html + \"</script>\";\n            }\n\n            Alpaca.logDebug(\"Compiling template: \" + this.id + \", cacheKey: \" + cacheKey + \", template: \" + html);\n\n            this.doCompile(cacheKey, html, callback);\n        },\n\n        /**\n         * @extension_point\n         *\n         * @param cacheKey\n         * @param html\n         * @param callback\n         */\n        doCompile: function(cacheKey, html, callback)\n        {\n\n        },\n\n        /**\n         * @extension_point\n         *\n         * @param cacheKey\n         * @param model\n         * @param errorCallback\n         */\n        execute: function(cacheKey, model, errorCallback)\n        {\n            Alpaca.logDebug(\"Executing template for cache key: \" + cacheKey);\n\n            var html = this.doExecute(cacheKey, model, errorCallback);\n\n            // removes wrapping <script/> tag\n            html = this.cleanup(html);\n\n            return html;\n        },\n\n        /**\n         * Execute a template and hand back a text string.\n         *\n         * @extension_point\n         *\n         * @param cacheKey\n         * @param model\n         * @param errorCallback\n         */\n        doExecute: function(cacheKey, model, errorCallback)\n        {\n            return null;\n        },\n\n        /**\n         * Hands back the expected file extension for templates loaded via URI.\n         *\n         * @return {String}\n         */\n        fileExtension: function() {\n            return \"html\";\n        },\n\n        /**\n         * Hands back the list of associated script tag types for templates loaded from the DOM.\n         *\n         * @return {Array}\n         */\n        supportedMimetypes: function()\n        {\n            return [];\n        },\n\n        /**\n         * Determines whether an existing template is already in cache.\n         *\n         * @param cacheKey\n         */\n        isCached: function(cacheKey)\n        {\n            return false;\n        },\n\n        /**\n         * Acquires an array of cache keys matching the view.\n         *\n         * @param viewId\n         */\n        findCacheKeys: function(viewId)\n        {\n            return [];\n        }\n\n    });\n\n})(jQuery);\n\n(function($, Handlebars, HandlebarsPrecompiled)\n{\n    // runtime cache of precompiled templates keyed by cacheKey\n    var COMPILED_TEMPLATES = {};\n\n    var helpers = {};\n    helpers[\"compare\"] = function(lvalue, rvalue, options)\n    {\n        if (arguments.length < 3) {\n            throw new Error(\"Handlerbars Helper 'compare' needs 2 parameters\");\n        }\n\n        var operator = options.hash.operator || \"==\";\n\n        var operators = {\n            '==':       function(l,r) { return l == r; }, // jshint ignore:line\n            '===':      function(l,r) { return l === r; },\n            '!=':       function(l,r) { return l != r; }, // jshint ignore:line\n            '!==':      function(l,r) { return l !== r; },\n            '<':        function(l,r) { return l < r; },\n            '>':        function(l,r) { return l > r; },\n            '<=':       function(l,r) { return l <= r; },\n            '>=':       function(l,r) { return l >= r; },\n            'typeof':   function(l,r) { return typeof l == r; } // jshint ignore:line\n        };\n\n        if (!operators[operator]) {\n            throw new Error(\"Handlerbars Helper 'compare' doesn't know the operator \"+operator);\n        }\n\n        var result = operators[operator](lvalue,rvalue);\n\n        if( result ) {\n            return options.fn(this);\n        } else {\n            return options.inverse(this);\n        }\n    };\n    helpers[\"ifnot\"] = function(value, options)\n    {\n        if (!value)\n        {\n            return options.fn(this);\n        }\n        else\n        {\n            return options.inverse(this);\n        }\n    };\n    helpers[\"times\"] = function(n, block) {\n        var accum = '';\n        for(var i = 0; i < n; ++i)\n        {\n            accum += block.fn(i);\n        }\n        return accum;\n    };\n    helpers[\"control\"] = function(options)\n    {\n        return \"<div class='\" + Alpaca.MARKER_CLASS_CONTROL_FIELD + \"'></div>\";\n    };\n    helpers[\"container\"] = function(options)\n    {\n        return \"<div class='\" + Alpaca.MARKER_CLASS_CONTAINER_FIELD + \"'></div>\";\n    };\n    helpers[\"item\"] = function(tag, options)\n    {\n        if (Alpaca.isObject(tag))\n        {\n            options = tag;\n            tag = \"div\";\n        }\n\n        return \"<\" + tag + \" class='\" + Alpaca.MARKER_CLASS_CONTAINER_FIELD_ITEM + \"' \" + Alpaca.MARKER_DATA_CONTAINER_FIELD_ITEM_KEY + \"='\" + this.name + \"'></\" + tag + \">\";\n    };\n    helpers[\"itemField\"] = function(tag, options)\n    {\n        if (Alpaca.isObject(tag))\n        {\n            options = tag;\n            tag = \"div\";\n        }\n\n        return \"<\" + tag + \" class='\" + Alpaca.MARKER_CLASS_CONTAINER_FIELD_ITEM_FIELD + \"'></\" + tag + \">\";\n    };\n    helpers[\"formItems\"] = function(options)\n    {\n        return \"<div class='\" + Alpaca.MARKER_CLASS_FORM_ITEMS_FIELD + \"'></div>\";\n    };\n    helpers[\"insert\"] = function(key)\n    {\n        return \"<div class='\" + Alpaca.MARKER_CLASS_INSERT + \"' \" + Alpaca.MARKER_DATA_INSERT_KEY + \"='\" + key + \"'></div>\";\n    };\n    helpers[\"str\"] = function(data)\n    {\n        if (data === false)\n        {\n            return \"false\";\n        }\n        else if (data === true)\n        {\n            return \"true\";\n        }\n        else if (data === 0)\n        {\n            return \"0\";\n        }\n        else if (typeof(data) == \"undefined\")\n        {\n            return \"\";\n        }\n        else if (data === null)\n        {\n            return \"\";\n        }\n        else if (Alpaca.isString(data))\n        {\n            return data;\n        }\n        else if (Alpaca.isNumber(data))\n        {\n            return data;\n        }\n        else if (Alpaca.isObject(data))\n        {\n            return JSON.stringify(data, null, \"  \");\n        }\n        else if (Alpaca.isArray(data))\n        {\n            return JSON.stringify(data, null, \"  \");\n        }\n\n        return data;\n    };\n    helpers[\"arrayToolbar\"] = function(options)\n    {\n        return \"<div class='\" + Alpaca.MARKER_CLASS_ARRAY_TOOLBAR + \"' \" + Alpaca.MARKER_DATA_ARRAY_TOOLBAR_FIELD_ID + \"='\" + this.id + \"'></div>\";\n    };\n    helpers[\"arrayActionbar\"] = function(options)\n    {\n        return \"<div class='\" + Alpaca.MARKER_CLASS_ARRAY_ITEM_ACTIONBAR + \"' \" + Alpaca.MARKER_DATA_ARRAY_ITEM_KEY + \"='\" + this.name + \"' \" + Alpaca.MARKER_DATA_ARRAY_ITEM_PARENT_FIELD_ID + \"='\" + this.parentFieldId + \"'></div>\";\n    };\n    Handlebars.registerHelper(\"arrayToolbar\", helpers[\"arrayToolbar\"]);\n    Handlebars.registerHelper(\"arrayActionbar\", helpers[\"arrayActionbar\"]);\n\n    Handlebars.registerHelper(\"setIndex\", function(value){\n        this.index = Number(value);\n    });\n\n    Handlebars.registerHelper(\"eachProperty\", function(context, options) {\n        var ret = \"\";\n        for(var prop in context)\n        {\n            ret = ret + options.fn({key:prop,value:context[prop]});\n        }\n        return ret;\n    });\n\n\n    Handlebars.registerHelper(\"uploadErrorMessage\", function(error) {\n\n        var message = error;\n\n        if (error === 1)\n        {\n            message = \"File exceeds upload_max_filesize\";\n        }\n        else if (error === 2)\n        {\n            message = \"File exceeds MAX_FILE_SIZE\";\n        }\n        else if (error === 3)\n        {\n            message = \"File was only partially uploaded\";\n        }\n        else if (error === 4)\n        {\n            message = \"No File was uploaded\";\n        }\n        else if (error === 5)\n        {\n            message = \"Missing a temporary folder\";\n        }\n        else if (error === 6)\n        {\n            message = \"Failed to write file to disk\";\n        }\n        else if (error === 7)\n        {\n            message = \"File upload stopped by extension\";\n        }\n        else if (error === \"maxFileSize\")\n        {\n            message = \"File is too big\";\n        }\n        else if (error === \"minFileSize\")\n        {\n            message = \"File is too small\";\n        }\n        else if (error === \"acceptFileTypes\")\n        {\n            message = \"Filetype not allowed\";\n        }\n        else if (error === \"maxNumberOfFiles\")\n        {\n            message = \"Max number of files exceeded\";\n        }\n        else if (error === \"uploadedBytes\")\n        {\n            message = \"Uploaded bytes exceed file size\";\n        }\n        else if (error === \"emptyResult\")\n        {\n            message = \"Empty file upload result\";\n        }\n\n        return message;\n    });\n\n    Handlebars.registerHelper(\"disguise\", function(text, character) {\n\n        var replaced = \"\";\n        for (var i = 0; i < text.length; i++) {\n            replaced += character;\n        }\n\n        return replaced;\n\n    });\n\n\n\n    //Handlebars.registerHelper(\"each\", helpers[\"each\"]);\n    Handlebars.registerHelper(\"compare\", helpers[\"compare\"]);\n    Handlebars.registerHelper(\"control\", helpers[\"control\"]);\n    Handlebars.registerHelper(\"container\", helpers[\"container\"]);\n    Handlebars.registerHelper(\"item\", helpers[\"item\"]);\n    Handlebars.registerHelper(\"itemField\", helpers[\"itemField\"]);\n    Handlebars.registerHelper(\"formItems\", helpers[\"formItems\"]);\n    Handlebars.registerHelper(\"times\", helpers[\"times\"]);\n    Handlebars.registerHelper(\"str\", helpers[\"str\"]);\n\n    // with\n    Handlebars.registerHelper('with', function(context, options) {\n        return options.fn(context);\n    });\n\n    // ifnot\n    Handlebars.registerHelper(\"ifnot\", helpers[\"ifnot\"]);\n\n    var partials = {};\n\n    Alpaca.HandlebarsTemplateEngine = Alpaca.AbstractTemplateEngine.extend(\n    {\n        fileExtension: function() {\n            return \"html\";\n        },\n\n        supportedMimetypes: function()\n        {\n            return [\n                \"text/x-handlebars-template\",\n                \"text/x-handlebars-tmpl\"\n            ];\n        },\n\n        init: function()\n        {\n            // auto discover any precompiled templates and store them by cache key here\n            if (HandlebarsPrecompiled)\n            {\n                for (var viewId in HandlebarsPrecompiled)\n                {\n                    var viewTemplates = HandlebarsPrecompiled[viewId];\n                    for (var templateId in viewTemplates)\n                    {\n                        var template = viewTemplates[templateId];\n                        if (typeof(template) === \"function\")\n                        {\n                            // cache key\n                            var cacheKey = Alpaca.makeCacheKey(viewId, \"view\", viewId, templateId);\n\n                            // cache\n                            COMPILED_TEMPLATES[cacheKey] = template;\n                        }\n                    }\n                }\n            }\n        },\n\n        doCompile: function(cacheKey, html, callback)\n        {\n            var self = this;\n\n            var template = null;\n            try\n            {\n                var functionString = Handlebars.precompile(html);\n                template = eval(\"(\" + functionString + \")\"); // jshint ignore:line\n\n                // convert to function - fn(model)\n                template = Handlebars.template(template);\n\n                // CACHE: write\n                COMPILED_TEMPLATES[cacheKey] = template;\n            }\n            catch (e)\n            {\n                callback(e);\n                return;\n            }\n\n            callback();\n        },\n\n        doExecute: function(cacheKey, model, errorCallback)\n        {\n            var self = this;\n\n            // CACHE: read\n            var templateFunction = COMPILED_TEMPLATES[cacheKey];\n            if (!templateFunction)\n            {\n                errorCallback(new Error(\"Could not find handlebars cached template for key: \" + cacheKey));\n                return;\n            }\n\n            // render template\n            var html = null;\n            try\n            {\n                html = templateFunction(model);\n            }\n            catch (e)\n            {\n                errorCallback(e);\n                return null;\n            }\n\n            return html;\n        },\n\n        isCached: function(cacheKey)\n        {\n            return (COMPILED_TEMPLATES[cacheKey] ? true  : false);\n        },\n\n        findCacheKeys: function(viewId)\n        {\n            var cacheKeys = [];\n\n            for (var cacheKey in COMPILED_TEMPLATES)\n            {\n                if (cacheKey.indexOf(viewId + \":\") === 0)\n                {\n                    cacheKeys.push(cacheKey);\n                }\n            }\n\n            return cacheKeys;\n        }\n\n    });\n\n    // auto register\n    Alpaca.TemplateEngineRegistry.register(\"handlebars\", new Alpaca.HandlebarsTemplateEngine(\"handlebars\"));\n\n})(jQuery, ((typeof(Handlebars) != \"undefined\") ? Handlebars : window.Handlebars), ((typeof(HandlebarsPrecompiled) != \"undefined\") ? HandlebarsPrecompiled : window.HandlebarsPrecompiled));\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.NormalizedView = Base.extend(\n    /**\n     * @lends Alpaca.NormalizedView.prototype\n     */\n    {\n        /**\n         * Once all of the Alpaca views are registered with the framework, each is normalized so that parent-chain\n         * references and overrides are normalized into a single, fast lookup object.\n         *\n         * @constructs\n         *\n         * @class Normalized view.\n         *\n         * @param {String} the view id\n         */\n        constructor: function(viewId) {\n            this.id = viewId;\n        },\n\n        /**\n         * Normalization occurs once per view upon startup of Alpaca.\n         */\n        normalize: function(views)\n        {\n            // load the view object\n            var viewObject  = views[this.id];\n            if (!viewObject)\n            {\n                Alpaca.logError(\"View compilation failed - view not found: \" + this.id);\n                return false;\n            }\n\n            // collect the inheritance chain\n            var chain = [];\n            var current = viewObject;\n            while (current) {\n                chain.push(current);\n\n                var parentId = current.parent;\n                if (parentId) {\n                    var parent = views[current.parent];\n                    if (!parent) {\n                        Alpaca.logError(\"View compilation failed - cannot find parent view: \" + parentId + \" for view: \" + current.id);\n                        return false;\n                    }\n                    current = parent;\n                }\n                else\n                {\n                    current = null;\n                }\n            }\n\n            // reverse the chain\n            chain = chain.reverse();\n\n            var setScalar = function(target, source, propertyId)\n            {\n                var value = source[propertyId];\n\n                var currentValue = target[propertyId];\n                if (!Alpaca.isUndefined(currentValue) && !Alpaca.isUndefined(value))\n                {\n                    Alpaca.logDebug(\"View property: \" + propertyId + \" already has value: \" + currentValue + \" and overwriting to: \" + value);\n                }\n\n                if (!Alpaca.isUndefined(value)) {\n                    target[propertyId] = value;\n                }\n            };\n\n            var setFunction = function(target, source, propertyId)\n            {\n                var value = source[propertyId];\n\n                var currentValue = target[propertyId];\n                if (!Alpaca.isUndefined(currentValue) && !Alpaca.isUndefined(value))\n                {\n                    Alpaca.logDebug(\"View property: \" + propertyId + \" already has function, overwriting\");\n                }\n\n                if (!Alpaca.isUndefined(value)) {\n                    target[propertyId] = value;\n                }\n            };\n\n            var mergeMap = function(target, source, propertyId)\n            {\n                var sourceMap = source[propertyId];\n                if (sourceMap)\n                {\n                    if (!target[propertyId])\n                    {\n                        target[propertyId] = {};\n                    }\n\n                    Alpaca.mergeObject2(sourceMap, target[propertyId]);\n                }\n            };\n\n            // walk forward and apply\n            for (var i = 0; i < chain.length; i++)\n            {\n                var element = chain[i];\n\n                // core properties\n                setScalar(this, element, \"type\"); // view, edit, create\n                setScalar(this, element, \"ui\"); // bootstrap, jqueryui, jquerymobile, web\n\n                // whether the view is readonly\n                setScalar(this, element, \"displayReadonly\");\n\n                // locale\n                setScalar(this, element, \"locale\");\n\n                // functions\n                setFunction(this, element, \"render\");\n                setFunction(this, element, \"postRender\");\n\n                // view templates\n                mergeMap(this, element, \"templates\");\n\n                // field templates\n                mergeMap(this, element, \"fields\");\n\n                // layout\n                mergeMap(this, element, \"layout\");\n\n                // styles\n                mergeMap(this, element, \"styles\");\n\n                // callbacks\n                mergeMap(this, element, \"callbacks\");\n\n                // messages\n                mergeMap(this, element, \"messages\");\n\n                // horizontal\n                setScalar(this, element, \"horizontal\");\n\n                // TODO: remove some of these?\n                setScalar(this, element, \"collapsible\");\n                setScalar(this, element, \"legendStyle\");\n                setScalar(this, element, \"toolbarStyle\");\n                setScalar(this, element, \"buttonStyle\");\n                setScalar(this, element, \"toolbarSticky\");\n                setScalar(this, element, \"globalTemplate\");\n\n                // TODO: remove wizard?\n                mergeMap(this, element, \"wizard\");\n            }\n\n            Alpaca.logDebug(\"View compilation complete for view: \" + this.id);\n            Alpaca.logDebug(\"Final view: \");\n            Alpaca.logDebug(JSON.stringify(this, null, \"   \"));\n\n            return true;\n        }\n    });\n})(jQuery);\n/*jshint -W004 */ // duplicate variables\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.RuntimeView = Base.extend(\n    /**\n     * @lends Alpaca.RuntimeView.prototype\n     */\n    {\n        /**\n         * Runtime implementation of a view as applied to a field.\n         *\n         * This provides accessors into the nested behaviors of views and also takes into account field-level attributes\n         * of the currently rendering dom element.\n         *\n         * @constructs\n         *\n         * @class Class for managing view components such as layout, template, message etc.\n         *\n         * @param {String} the view id\n         * @param {Object} field the field control\n         */\n        constructor: function(viewId, field) {\n            this.field = field;\n            this.setView(viewId);\n        },\n\n        /**\n         * Sets the view that this runtime view adapters should consult during render.\n         *\n         * @param {String} the view id\n         */\n        setView: function (viewId)\n        {\n            // TODO: should field classes ever really be instantiated directly?\n            // TODO: this is left in to support Alpaca docs generation (need to clean this up)s\n            // if a view is not set at this point it probably means they instantiated a field directly\n            // in which case, we'll just pick the default view\n            if (!viewId)\n            {\n                viewId =  \"web-edit\";\n            }\n\n            // the normalized view\n            var normalizedView = Alpaca.getNormalizedView(viewId);\n            if (!normalizedView)\n            {\n                // this should never be the case\n                throw new Error(\"Runtime view for view id: \" + viewId + \" could not find a normalized view\");\n            }\n\n            // copy compiled properties into this object\n            for (var k in normalizedView)\n            {\n                if (normalizedView.hasOwnProperty(k)) {\n                    this[k] = normalizedView[k];\n                }\n            }\n        },\n\n        /**\n         * Gets view wizard settings.\n         *\n         * @returns {Object} View wizard settings.\n         */\n        getWizard : function () {\n            return this.getViewParam(\"wizard\");\n        },\n\n        /**\n         * Gets the global layout template.\n         *\n         * @returns {Object|String} Global layout template setting of the view.\n         */\n        getGlobalTemplateDescriptor : function ()\n        {\n            return this.getTemplateDescriptor(\"globalTemplate\");\n        },\n\n        /**\n         * Gets layout template and bindings.\n         *\n         * @returns {Object} Layout template and bindings setting of the view.\n         */\n        getLayout: function ()\n        {\n            var self = this;\n\n            return {\n                \"templateDescriptor\": this.getTemplateDescriptor(\"layoutTemplate\", self),\n                \"bindings\": this.getViewParam([\"layout\",\"bindings\"], true)\n            };\n        },\n\n        /**\n         * Hands back the compiled template id for a given template.\n         *\n         * @param templateId\n         * @param field (optional)\n         */\n        getTemplateDescriptor: function(templateId, field)\n        {\n            return Alpaca.getTemplateDescriptor(this, templateId, field);\n        },\n\n        /**\n         * Gets message for the given id\n         *\n         * @param {String} messageId Message id\n         * @param {String} locale locale\n         *\n         * @returns {String} Message mapped to the given id.\n         */\n        getMessage : function (messageId, locale)\n        {\n            if (!locale) {\n                locale = Alpaca.defaultLocale;\n            }\n\n            var messageForLocale = this.getViewParam([\"messages\", locale, messageId]);\n            if (Alpaca.isEmpty(messageForLocale)) {\n                messageForLocale = this.getViewParam([\"messages\", messageId]);\n            }\n\n            return messageForLocale;\n        },\n\n        /**\n         * Retrieves view parameter based on configuration Id or Id array.\n         *\n         * @param {String|Array} configId Configuration id or array.\n         *\n         * @returns {Any} View parameter mapped to configuration Id or Id array.\n         */\n        getViewParam: function (configId, topLevelOnly) {\n\n            var self = this;\n\n            // look for exact match\n            var fieldPath = this.field.path;\n            if (this.fields && this.fields[fieldPath]) {\n                var configVal = this._getConfigVal(this.fields[fieldPath], configId);\n                if (!Alpaca.isEmpty(configVal)) {\n                    return configVal;\n                }\n            }\n\n            // array related field path (using [*] syntax)  i.e.  /a/b[*]/c/d[*]/e\n            if (fieldPath && fieldPath.indexOf('[') !== -1 && fieldPath.indexOf(']') !== -1) {\n                var newFieldPath = fieldPath.replace(/\\[\\d+\\]/g,\"[*]\");\n                if (this.fields && this.fields[newFieldPath]) {\n                    var configVal = this._getConfigVal(this.fields[newFieldPath], configId);\n                    if (!Alpaca.isEmpty(configVal)) {\n                        return configVal;\n                    }\n                }\n            }\n\n            // array related field path (using pure path syntax)   i.e. /a/b/c/d/e\n            if (fieldPath && fieldPath.indexOf('[') !== -1 && fieldPath.indexOf(']') !== -1) {\n                var newFieldPath = fieldPath.replace(/\\[\\d+\\]/g,\"\");\n                if (this.fields && this.fields[newFieldPath]) {\n                    var configVal = this._getConfigVal(this.fields[newFieldPath], configId);\n                    if (!Alpaca.isEmpty(configVal)) {\n                        return configVal;\n                    }\n                }\n            }\n\n            if (!Alpaca.isEmpty(topLevelOnly) && topLevelOnly && this.field.path !== \"/\") {\n                return null;\n            }\n\n            return this._getConfigVal(this, configId);\n        },\n\n        /**\n         * Internal method for getting configuration.\n         *\n         * @private\n         *\n         * @param {Any} configVal configuration value.\n         * @param {String} configId configuration id.\n         *\n         * @returns {Any} configuration mapping to the given id\n         */\n        _getConfigVal : function (configVal, configId) {\n            if (Alpaca.isArray(configId)) {\n                for (var i = 0; i < configId.length && !Alpaca.isEmpty(configVal); i++) {\n                    configVal = configVal[configId[i]];\n                }\n            } else {\n                if (!Alpaca.isEmpty(configVal)) {\n                    configVal = configVal[configId];\n                }\n            }\n            return configVal;\n        },\n\n        fireCallback: function(field, id, arg1, arg2, arg3, arg4, arg5)\n        {\n            var self = this;\n\n            if (this.callbacks && this.callbacks[id])\n            {\n                this.callbacks[id].call(field, arg1, arg2, arg3, arg4, arg5);\n            }\n        },\n\n        applyStyle: function(id, fieldOrEl)\n        {\n            var el = fieldOrEl;\n            if (el && el.getFieldEl) {\n                el = el.getFieldEl();\n            }\n\n            if (el)\n            {\n                if (this.styles && this.styles[id])\n                {\n                    $(el).addClass(this.styles[id]);\n                }\n            }\n        },\n\n        getStyle: function(id)\n        {\n            return this.styles[id] ? this.styles[id] : \"\";\n        }\n\n\n    });\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Field = Base.extend(\n    /**\n     * @lends Alpaca.Field.prototype\n     */\n    {\n        /**\n         * @constructs\n         *\n         * @class Abstract class that served as base for all Alpaca field classes that provide actual implementation.\n         *\n         * @param {Object} domEl The dom element to which this field is ultimately rendering.\n         * @param {Any} data Field data\n         * @param {Object} options Field options.\n         * @param {Object} schema Field schema.\n         * @param {String} viewId view id\n         * @param {Alpaca.Connector} connector Field connector.\n         * @param {Function} errorCallback Error callback.\n         */\n        constructor: function(domEl, data, options, schema, viewId, connector, errorCallback) {\n\n            var self = this;\n\n            // mark that we are initializing\n            this.initializing = true;\n\n            // domEl\n            this.domEl = domEl;\n\n            // parent\n            this.parent = null;\n\n            // config\n            this.data = data;\n            this.options = options;\n            this.schema = schema;\n            this.connector = connector;\n            this.errorCallback = function(err)\n            {\n                if (errorCallback)\n                {\n                    errorCallback(err);\n                }\n                else\n                {\n                    Alpaca.defaultErrorCallback.call(self, err);\n                }\n            };\n\n            // check if this field rendering is single-level or not\n            this.singleLevelRendering = false;\n\n            // set a runtime view\n            this.view = new Alpaca.RuntimeView(viewId, this);\n\n            // things we can draw off the options\n            var noOptions = false;\n            if (!this.options) {\n                this.options = {};\n                noOptions = true;\n            }\n            this.id = this.options.id;\n            this.type = this.options.type;\n\n            // setup defaults\n            if (!this.id) {\n                this.id = Alpaca.generateId();\n            }\n            var noSchema = false;\n            if (!this.schema) {\n                this.schema = {};\n                noSchema = true;\n            }\n            if (!this.options.label && this.schema.title !== null) {\n                this.options.label = this.schema.title;\n            }\n\n            /*\n            if (!this.options.helper && this.schema.description !== null) {\n                this.options.helper = this.schema.description;\n            }\n            */\n\n            // legacy support: options.helper -> convert to options.helpers\n            if (!this.options.helpers) {\n                this.options.helpers = [];\n            }\n            if (this.options.helper) {\n                if (!Alpaca.isArray(this.options.helper)) {\n                    this.options.helpers.push(this.options.helper);\n                } else {\n                    for (var i = 0; i < this.options.helper.length; i++) {\n                        this.options.helpers.push(this.options.helper[i]);\n                    }\n                }\n\n                // remove legacy value\n                delete this.options.helper;\n            }\n\n            if (Alpaca.isEmpty(this.options.readonly) && !Alpaca.isEmpty(this.schema.readonly)) {\n                this.options.readonly = this.schema.readonly;\n            }\n\n            // if data is empty, then we check whether we can fall back to a default value\n            if (Alpaca.isValEmpty(this.data) && !Alpaca.isEmpty(this.schema[\"default\"])) {\n                this.data = this.schema[\"default\"];\n                this.showingDefaultData = true;\n            }\n\n            // default path\n            this.path = \"/\";\n\n            // validation status\n            this.validation = {};\n\n            // events\n            this._events = {};\n\n\n\n            // helper function to determine if we're in a display-only mode\n            this.isDisplayOnly = function()\n            {\n                return (self.view.type === \"view\" || self.view.type == \"display\");\n            };\n\n            // schema id cleanup\n            if (this.schema && this.schema.id && this.schema.id.indexOf(\"#\") === 0)\n            {\n                this.schema.id = this.schema.id.substring(1);\n            }\n\n            // has this field been previously validated?\n            this._previouslyValidated = false;\n\n            this.updateObservable = function()\n            {\n                // update observable\n                if (this.data)\n                {\n                    this.observable(this.path).set(this.data);\n                }\n                else\n                {\n                    this.observable(this.path).clear();\n                }\n            };\n\n            this.getObservableScope = function()\n            {\n                var top = this;\n                while (!top.isTop()) {\n                    top = top.parent;\n                }\n\n                var observableScope = top.observableScope;\n                if (!observableScope)\n                {\n                    observableScope = \"global\";\n                }\n\n                return observableScope;\n            };\n\n            this.ensureProperType = function(val)\n            {\n                var self = this;\n\n                var _ensure = function(v, type)\n                {\n                    if (Alpaca.isString(v))\n                    {\n                        if (type === \"number\")\n                        {\n                            v = parseFloat(v);\n                        }\n                        else if (type === \"integer\")\n                        {\n                            v = parseInt(v);\n                        }\n                        else if (type === \"boolean\")\n                        {\n                            if (v === \"\" || v.toLowerCase() === \"false\")\n                            {\n                                v = false;\n                            }\n                            else\n                            {\n                                v = true;\n                            }\n                        }\n                    }\n                    else if (Alpaca.isNumber(v))\n                    {\n                        if (type === \"string\")\n                        {\n                            v = \"\" + v;\n                        }\n                        else if (type === \"boolean\")\n                        {\n                            if (v === -1 || v === 0)\n                            {\n                                v = false;\n                            }\n                            else {\n                                v = true;\n                            }\n                        }\n                    }\n\n                    return v;\n                };\n\n                if (typeof(val) !== \"undefined\")\n                {\n                    if (Alpaca.isArray(val))\n                    {\n                        for (var i = 0; i < val.length; i++)\n                        {\n                            if (self.schema.items && self.schema.items.type)\n                            {\n                                val[i] = _ensure(val[i], self.schema.items.type);\n                            }\n                        }\n                    }\n                    else if (Alpaca.isString(val) || Alpaca.isNumber(val))\n                    {\n                        if (self.schema.type)\n                        {\n                            val = _ensure(val, self.schema.type);\n                        }\n                    }\n                }\n\n                return val;\n            };\n\n            this.onConstruct();\n        },\n\n        onConstruct: function()\n        {\n\n        },\n\n        isTop: function()\n        {\n            return !this.parent;\n        },\n\n        /**\n         * Get the id of the outer field template.\n         *\n         * For control fields, this is \"control\".\n         * For container fields, this is \"container\".\n         *\n         * @returns {String} field template descriptor id\n         */\n        getTemplateDescriptorId : function () {\n            throw new Error(\"Template descriptor ID was not specified\");\n        },\n\n        /**\n         * Sets up default rendition template from view.\n         */\n        initTemplateDescriptor: function()\n        {\n            var self = this;\n\n            var viewTemplateDescriptor = this.view.getTemplateDescriptor(this.getTemplateDescriptorId(), this);\n            var globalTemplateDescriptor = this.view.getGlobalTemplateDescriptor();\n            var layout = this.view.getLayout();\n\n            // we only allow the global or layout template to be applied to the top-most field\n            var trip = false;\n            if (this.isTop())\n            {\n                if (globalTemplateDescriptor)\n                {\n                    this.setTemplateDescriptor(globalTemplateDescriptor);\n                    this.singleLevelRendering = true;\n                    trip = true;\n                }\n                else if (layout && layout.templateDescriptor)\n                {\n                    this.setTemplateDescriptor(layout.templateDescriptor);\n                    trip = true;\n                }\n            }\n\n            if (!trip && viewTemplateDescriptor)\n            {\n                this.setTemplateDescriptor(viewTemplateDescriptor);\n            }\n\n            // ensure we have a template descriptor\n            var t = this.getTemplateDescriptor();\n            if (!t)\n            {\n                return Alpaca.throwErrorWithCallback(\"Unable to find template descriptor for field: \" + self.getFieldType());\n            }\n        },\n\n        /**\n         * This method will be called right after the field instance is created. It will initialize\n         * the field to get it ready for rendition.\n         */\n        setup: function() {\n\n            if (!this.initializing)\n            {\n                this.data = this.getValue();\n            }\n\n            // ensures that we have a template descriptor picked for this field\n            this.initTemplateDescriptor();\n\n            // JSON SCHEMA\n            if (Alpaca.isUndefined(this.schema.required)) {\n                this.schema.required = false;\n            }\n\n            // VALIDATION\n            if (Alpaca.isUndefined(this.options.validate)) {\n                this.options.validate = true;\n            }\n\n            // OPTIONS\n            if (Alpaca.isUndefined(this.options.disabled)) {\n                this.options.disabled = false;\n            }\n\n            // MESSAGES\n            if (Alpaca.isUndefined(this.options.showMessages)) {\n                this.options.showMessages = true;\n            }\n        },\n\n        /**\n         * Registers an event listener.\n         *\n         * @param name\n         * @param fn\n         * @returns {*}\n         */\n        on: function(name, fn)\n        {\n            Alpaca.logDebug(\"Adding listener for event: \" + name);\n\n            if (!this._events[name]) {\n                this._events[name] = [];\n            }\n\n            this._events[name].push(fn);\n            return this;\n        },\n\n        /**\n         * Unregisters all listeners for an event.\n         *\n         * @param name\n         */\n        off: function(name)\n        {\n            if (this._events[name]) {\n                this._events[name].length = 0;\n            }\n        },\n\n        /**\n         * Triggers an event and propagates the event.\n         *\n         * By default, the behavior is to propagate up to the parent chain (bubble up).\n         *\n         * If \"direction\" is set to \"down\" and the field is a container, then the event is propagated down\n         * to children (trickle down).\n         *\n         * If \"direction\" is set to \"both\", then both up and down are triggered.\n         *\n         * @param name\n         * @param event\n         * @param direction (optional) see above\n         */\n        triggerWithPropagation: function(name, event, direction)\n        {\n            if (typeof(event) === \"string\") {\n                direction = event;\n                event = null;\n            }\n\n            if (!direction) {\n                direction = \"up\";\n            }\n\n            if (direction === \"up\")\n            {\n                // we trigger ourselves first\n                this.trigger.call(this, name, event);\n\n                // then we trigger parents\n                if (this.parent)\n                {\n                    this.parent.triggerWithPropagation.call(this.parent, name, event, direction);\n                }\n            }\n            else if (direction === \"down\")\n            {\n                // do any children first\n                if (this.children && this.children.length > 0)\n                {\n                    for (var i = 0; i < this.children.length; i++)\n                    {\n                        var child = this.children[i];\n\n                        child.triggerWithPropagation.call(child, name, event, direction);\n                    }\n                }\n\n                // do ourselves last\n                this.trigger.call(this, name, event);\n            }\n            else if (direction === \"both\")\n            {\n                // do any children first\n                if (this.children && this.children.length > 0)\n                {\n                    for (var i = 0; i < this.children.length; i++)\n                    {\n                        var child = this.children[i];\n\n                        child.triggerWithPropagation.call(child, name, event, \"down\");\n                    }\n                }\n\n                // then do ourselves\n                this.trigger.call(this, name, event);\n\n                // then we trigger parents\n                if (this.parent)\n                {\n                    this.parent.triggerWithPropagation.call(this.parent, name, event, \"up\");\n                }\n            }\n        },\n\n        /**\n         * Triggers an event\n         *\n         * @param name\n         * @param event\n         *\n         * Remainder of arguments will be passed to the event handler.\n         *\n         * @returns {null}\n         */\n        trigger: function(name, event, arg1, arg2, arg3)\n        {\n            // NOTE: this == control\n\n            var handlers = this._events[name];\n            if (handlers)\n            {\n                for (var i = 0; i < handlers.length; i++)\n                {\n                    var handler = handlers[i];\n\n                    var ret = null;\n                    if (typeof(handler) === \"function\")\n                    {\n                        Alpaca.logDebug(\"Firing event: \" + name);\n                        try\n                        {\n                            ret = handler.call(this, event, arg1, arg2, arg3);\n                        }\n                        catch (e)\n                        {\n                            Alpaca.logDebug(\"The event handler caught an exception: \" + name);\n                            Alpaca.logDebug(e);\n                        }\n                    }\n                }\n            }\n        },\n\n        /**\n         * Binds the data into the field.  Called at the very end of construction.\n         */\n        bindData: function()\n        {\n            if (!Alpaca.isEmpty(this.data))\n            {\n                this.setValue(this.data);\n            }\n        },\n\n        /**\n         * This is the entry point method into the field.  It is called by Alpaca for each field being rendered.\n         *\n         * Renders this field into the container and creates a DOM element which is bound into the container.\n         *\n         * @param {Object|String} view View to be used for rendering field (optional).\n         * @param {Function} callback Post-Render callback (optional).\n         */\n        render: function(view, callback)\n        {\n            var self = this;\n\n            if (view && (Alpaca.isString(view) || Alpaca.isObject(view)))\n            {\n                this.view.setView(view);\n            }\n            else\n            {\n                if (Alpaca.isEmpty(callback) && Alpaca.isFunction(view))\n                {\n                    callback = view;\n                }\n            }\n\n            // last try to see if we can populate the label from propertyId\n            if (this.options.label === null && this.propertyId)\n            {\n                this.options.label = this.propertyId;\n            }\n\n            // make a copy of name field\n            if (this.options.name)\n            {\n                this.name = this.options.name;\n            }\n\n            // calculate name\n            this.calculateName();\n\n            this.setup();\n\n            this._render(function() {\n\n                // trigger the render event\n                self.trigger(\"render\");\n\n                callback();\n            });\n        },\n\n        calculateName: function()\n        {\n            if (!this.name || (this.name && this.nameCalculated))\n            {\n                // has path?\n                if (this.parent && this.parent.name && this.path)\n                {\n                    var lastSegment = this.path.substring(this.path.lastIndexOf('/') + 1);\n                    if (lastSegment.indexOf(\"[\") !== -1 && lastSegment.indexOf(\"]\") !== -1)\n                    {\n                        lastSegment = lastSegment.substring(lastSegment.indexOf(\"[\") + 1, lastSegment.indexOf(\"]\"));\n                    }\n\n                    if (lastSegment)\n                    {\n                        this.name = this.parent.name + \"_\" + lastSegment;\n                        this.nameCalculated = true;\n                    }\n                }\n                else\n                {\n                    // generate name from the path\n                    if (this.path)\n                    {\n                        this.name = this.path.replace(/\\//g,\"\").replace(/\\[/g,\"_\").replace(/\\]/g,\"\");\n                        this.nameCalculated = true;\n                    }\n                }\n            }\n        },\n\n        /**\n         * Internal method for processing the render.\n         *\n         * @private\n         * @param {Function} callback Post-render callback.\n         */\n        _render: function(callback)\n        {\n            var self = this;\n\n            // check if it needs to be wrapped in a form\n            if (self.options.form && Alpaca.isObject(self.options.form))\n            {\n                self.options.form.viewType = this.view.type;\n\n                var form = self.form;\n                if (!form)\n                {\n                    form = new Alpaca.Form(self.domEl, this.options.form, self.view.id, self.connector, self.errorCallback);\n                }\n                form.render(function(form) {\n\n                    // NOTE: form is the form instance (not the jquery element)\n\n                    var tempFieldHolder = $(\"<div></div>\");\n\n                    // load the appropriate template and render it\n                    self._processRender(tempFieldHolder, function() {\n\n                        // insert the field before our form fields container\n                        form.formFieldsContainer.before(self.field);\n\n                        // remove the formFieldsContainer marker\n                        form.formFieldsContainer.remove();\n\n                        // bind the top field to the form\n                        form.topControl = self;\n                        if (self.view.type && self.view.type !== 'view')\n                        {\n                            form.initEvents();\n                        }\n\n                        self.form = form;\n                        var me = self;\n\n                        // allow any post-rendering facilities to kick in\n                        self.postRender(function() {\n\n                            // finished initializing\n                            self.initializing = false;\n\n                            // allow for form to do some late updates\n                            self.form.afterInitialize();\n\n                            // when the field removes, remove the form as well\n                            $(self.field).bind('destroyed', function (e) {\n                                self.form.destroy();\n                            });\n\n                            // callback\n                            if (callback && Alpaca.isFunction(callback))\n                            {\n                                callback(self);\n                            }\n\n                        });\n                    });\n                });\n            }\n            else\n            {\n                // load the appropriate template and render it\n                this._processRender(self.domEl, function() {\n\n                    // add \"field\" element to the domEl\n                    //$(self.field).appendTo(self.domEl);\n\n                    // allow any post-rendering facilities to kick in\n                    self.postRender(function() {\n\n                        // finished initializing\n                        self.initializing = false;\n\n                        // callback\n                        if (callback && Alpaca.isFunction(callback))\n                        {\n                            callback(self);\n                        }\n\n                    });\n                });\n            }\n        },\n\n        /**\n         * Renders the field into the given parent element.\n         *\n         * Once completed, the callback method is called.\n         *\n         * @private\n         *\n         * @param {Object} parentEl Field container.\n         * @param {Function} callback callback.\n         */\n        _processRender: function(parentEl, callback)\n        {\n            var self = this;\n\n            // render the field (outer element)\n            self.renderField(parentEl, function() {\n\n                // CALLBACK: \"field\"\n                self.fireCallback(\"field\");\n\n                // render any field elements\n                self.renderFieldElements(function() {\n\n                    callback();\n\n                });\n            });\n        },\n\n        renderFieldDomElement: function(data)\n        {\n            var templateDescriptor = this.getTemplateDescriptor();\n\n            // render the field\n            return Alpaca.tmpl(templateDescriptor, {\n                \"id\": this.getId(),\n                \"options\": this.options,\n                \"schema\": this.schema,\n                \"data\": data,\n                \"view\": this.view,\n                \"path\": this.path,\n                \"name\": this.name\n            });\n        },\n\n        /**\n         * Renders the \"field\" outer element.  This is usually the control or container.\n         *\n         * @param parentEl\n         * @param onSuccess\n         */\n        renderField: function(parentEl, onSuccess)\n        {\n            var self = this;\n\n            // the data we'll render\n            var theData = this.data;\n\n            // if we're in display-only mode, and theData is an object, convert to string\n            if (this.isDisplayOnly() && typeof(theData) === \"object\")\n            {\n                theData = JSON.stringify(theData);\n            }\n\n            var renderedDomElement = self.renderFieldDomElement(theData);\n\n            // if we got back multiple elements, try to pick at the first DIV\n            if ($(renderedDomElement).length > 0)\n            {\n                var single = null;\n                for (var i = 0; i < $(renderedDomElement).length; i++)\n                {\n                    var name = $(renderedDomElement)[i].nodeName;\n                    if (name)\n                    {\n                        name = name.toLowerCase();\n\n                        if (\"div\" === name || \"span\" === name)\n                        {\n                            single = $($(renderedDomElement)[i]);\n                            break;\n                        }\n                    }\n                }\n                if (!single)\n                {\n                    single = $($(renderedDomElement).last());\n                }\n                if (single)\n                {\n                    renderedDomElement = single;\n                }\n            }\n\n            this.field = renderedDomElement;\n            this.field.appendTo(parentEl);\n\n            onSuccess();\n        },\n\n        /**\n         * Renders any field elements.\n         *\n         * For controls or containers, this hook is used to inject additional dom elements into the outer field\n         * dom element.  Simple field types may choose not to implement this.\n         *\n         * @param callback {Function} callback\n         */\n        renderFieldElements: function(callback)\n        {\n            callback();\n        },\n\n        /**\n         * This gets called typically once per render.  If a DOM element is moved within a container and it's indexing\n         * changes, this will get called against to ensure that DOM properties are kept in sync.\n         */\n        updateDOMElement: function()\n        {\n            // all fields get their path\n            this.field.attr(\"data-alpaca-field-path\", this.getPath());\n\n            // all fields get their name\n            this.field.attr(\"data-alpaca-field-name\", this.getName());\n\n            // name should not appear on field\n            this.field.removeAttr(\"name\");\n        },\n\n        /**\n         * This method will be called after the field rendition is complete. It is served as a way to make final\n         * modifications to the dom elements that were produced.\n         */\n        postRender: function(callback)\n        {\n            var self = this;\n\n            // all fields get the \"alpaca-field\" class which marks the outer element\n            this.field.addClass(\"alpaca-field\");\n\n            // all fields get marked by type as well\n            this.field.addClass(\"alpaca-field-\" + this.getFieldType());\n\n            // all fields get field id data attribute\n            this.field.attr(\"data-alpaca-field-id\", this.getId());\n\n            this.updateDOMElement();\n\n            // try to avoid adding unnecessary injections for display view.\n            if (this.view.type !== 'view') {\n\n                // optional\n                if (this.isRequired())\n                {\n                    $(this.field).addClass(\"alpaca-required\");\n\n                    // CALLBACK: \"required\"\n                    self.fireCallback(\"required\");\n                }\n                else\n                {\n                    $(this.field).addClass(\"alpaca-optional\");\n\n                    // CALLBACK: \"optional\"\n                    self.fireCallback(\"optional\");\n                }\n\n                var doDisableField = function()\n                {\n                    // mark \"disabled\" attribute onto underlying element\n                    Alpaca.disabled($('input', self.field), true);\n                    Alpaca.disabled($('select', self.field), true);\n                    Alpaca.disabled($(':radio', self.field), true);\n                    Alpaca.disabled($(':checkbox', self.field), true);\n\n                    // special case for radio buttons (prevent clicks)\n                    $(\":radio\", self.field).off().click(function(e) {\n                        e.preventDefault();\n                        e.stopImmediatePropagation();\n                        return false;\n                    });\n                    $(\".radio label\", self.field).off().click(function(e) {\n                        e.preventDefault();\n                        e.stopImmediatePropagation();\n                        return false;\n                    });\n\n                    // special case (input field)\n                    $(\"input\", self.field).off().click(function(e) {\n                        e.preventDefault();\n                        e.stopImmediatePropagation();\n                        return false;\n                    });\n\n                    // fire disable function\n                    if (self.disable) {\n                        self.disable();\n                    }\n\n                };\n\n                // readonly\n                if (this.options.readonly)\n                {\n                    $(this.field).addClass(\"alpaca-readonly\");\n\n                    $('input', this.field).attr('readonly', 'readonly');\n\n                    // disable the field\n                    doDisableField();\n\n                    // CALLBACK: \"readonly\"\n                    self.fireCallback(\"readonly\");\n                }\n\n                // disabled\n                if (this.options.disabled)\n                {\n                    $(this.field).addClass(\"alpaca-disabled\");\n\n                    // disable the field\n                    doDisableField();\n\n                    // CALLBACK: \"disabled\"\n                    self.fireCallback(\"disabled\");\n                }\n\n                // allow single or multiple field classes to be specified via the \"fieldClass\"\n                // or \"fieldClasses\" options\n                var applyFieldClass = function(el, thing)\n                {\n                    if (thing) {\n\n                        var i = 0;\n                        var tokens = null;\n\n                        if (Alpaca.isArray(thing)) {\n                            for (i = 0; i < thing.length; i++) {\n                                el.addClass(thing[i]);\n                            }\n                        }\n                        else {\n                            if (thing.indexOf(\",\") > -1) {\n                                tokens = thing.split(\",\");\n                                for (i = 0; i < tokens.length; i++) {\n                                    el.addClass(tokens[i]);\n                                }\n                            } else if (thing.indexOf(\" \") > -1) {\n                                tokens = thing.split(\" \");\n                                for (i = 0; i < tokens.length; i++) {\n                                    el.addClass(tokens[i]);\n                                }\n                            }\n                            else {\n                                el.addClass(thing);\n                            }\n                        }\n                    }\n                };\n                applyFieldClass(this.field, this.options[\"fieldClass\"]);\n\n                /*\n                // Support for custom styles provided by custom view\n                var customStyles = this.view.getStyles();\n                if (customStyles)\n                {\n                    for (var styleClass in customStyles)\n                    {\n                        $(styleClass, this.domEl).css(customStyles[styleClass]);\n                    }\n                }\n                */\n\n                // after render\n                if (this.options.disabled)\n                {\n                    this.disable();\n\n                    // CALLBACK: \"disable\"\n                    self.fireCallback(\"disable\");\n                }\n\n                // we bind data if we're in \"edit\" mode\n                // typically, we don't bind data if we're in \"create\" or any other mode\n                if (this.view.type && this.view.type === 'edit')\n                {\n                    this.bindData();\n                }\n                else if (this.showingDefaultData)\n                {\n                    // if this control is showing default data, then we render the control anyway\n                    this.bindData();\n                }\n\n                // some logging to be useful\n                if (this.view.type === \"create\")\n                {\n                    Alpaca.logDebug(\"Skipping data binding for field: \" + this.id + \" since view mode is 'create'\");\n                }\n\n                // initialize dom-level events\n                if (this.view.type && this.view.type !== 'view')\n                {\n                    this.initEvents();\n                }\n            }\n\n            // hidden\n            if (this.options.hidden)\n            {\n                this.field.hide();\n            }\n\n            var defaultHideInitValidationError = (this.view.type === 'create') && !this.refreshed;\n            this.hideInitValidationError = Alpaca.isValEmpty(this.options.hideInitValidationError) ? defaultHideInitValidationError : this.options.hideInitValidationError;\n\n            // for create view, hide all readonly fields\n            if (!this.view.displayReadonly)\n            {\n                $(this.field).find(\".alpaca-readonly\").hide();\n            }\n\n            // field level post render\n            if (this.options.postRender)\n            {\n                this.options.postRender.call(this, function() {\n\n                    callback();\n\n                });\n            }\n            else\n            {\n                callback();\n            }\n        },\n\n        /**\n         * Redraws the field using the currently bound DOM element and view.\n         *\n         * @param callback\n         */\n        refresh: function(callback)\n        {\n            var self = this;\n\n            // store back data\n            var _data = self.data = self.getValue();\n\n            // remember this stuff\n            var oldDomEl = self.domEl;\n            var oldField = self.field;\n            //var oldControl = self.control;\n            //var oldContainer = self.container;\n            //var oldForm = self.form;\n\n            // insert marker element before current field to mark where we'll render\n            var markerEl = $(\"<div></div>\");\n            $(oldField).before(markerEl);\n\n            // temp domEl\n            self.domEl = $(\"<div style='display: none'></div>\");\n            // clear this stuff out\n            self.field = undefined;\n            self.control = undefined;\n            self.container = undefined;\n            self.form = undefined;\n\n            // disable all buttons on our current field\n            // we do this because repeated clicks could cause trouble while the field is in some half-state\n            // during refresh\n            $(oldField).find(\"button\").prop(\"disabled\", true);\n\n            // mark that we are initializing\n            this.initializing = true;\n\n            // re-setup the field\n            self.setup();\n\n            // render\n            self._render(function() {\n\n                // move ahead of marker\n                $(markerEl).before(self.field);\n\n                // reset the domEl\n                self.domEl = oldDomEl;\n\n                // copy classes from oldField onto field\n                var oldClasses = $(oldField).attr(\"class\");\n                if (oldClasses) {\n                    $.each(oldClasses.split(\" \"), function(i, v) {\n                        if (v && !v.indexOf(\"alpaca-\") === 0) {\n                            $(self.field).addClass(v);\n                        }\n                    });\n                }\n\n                // hide the old field\n                $(oldField).hide();\n\n                // remove marker\n                $(markerEl).remove();\n\n                // mark that we're refreshed\n                self.refreshed = true;\n\n                // this is apparently needed for objects and arrays\n                if (typeof(_data) !== \"undefined\")\n                {\n                    if (Alpaca.isObject(_data) || Alpaca.isArray(_data))\n                    {\n                        self.setValue(_data);\n                    }\n                }\n\n                // fire the \"ready\" event\n                Alpaca.fireReady(self);\n\n                if (callback)\n                {\n                    callback.call(self);\n                }\n\n                // afterwards...\n\n                // now clean up old field elements\n                // the trick here is that we want to make sure we don't trigger the bound \"destroyed\" event handler\n                // for the old dom el.\n                //\n                // the reason is that we have oldForm -> Field (with oldDomEl)\n                //                        and form -> Field (with domEl)\n                //\n                // cleaning up \"oldDomEl\" causes \"Field\" to cleanup which causes \"oldForm\" to cleanup\n                // which causes \"Field\" to cleanup which causes \"domEl\" to clean up (and also \"form\")\n                //\n                // here we just want to remove the dom elements for \"oldDomEl\" and \"oldForm\" without triggering\n                // the special destroyer event\n                //\n                // appears that we can do this with a second argument...?\n                //\n                $(oldField).remove(undefined, {\n                    \"nodestroy\": true\n                });\n\n            });\n        },\n\n\n        /**\n         * Applies a view style to a dom element.\n         *\n         * @param id\n         * @param target\n         */\n        applyStyle: function(id, target)\n        {\n            this.view.applyStyle(id, target);\n        },\n\n        /**\n         * Fires a view callback for the current field.\n         *\n         * @param id\n         * @param arg1\n         * @param arg2\n         * @param arg3\n         * @param arg4\n         * @param arg5\n         */\n        fireCallback: function(id, arg1, arg2, arg3, arg4, arg5)\n        {\n            this.view.fireCallback(this, id, arg1, arg2, arg3, arg4, arg5);\n        },\n\n        /**\n         * Retrieves the outer \"field\" rendered DOM element.\n         *\n         * If this field is a control field or a container field, this DOM element will wrap the inner \"control\"\n         * and \"container\" elements respectively.  In some cases, the wrapping might not exist in which case this\n         * field may be the \"control\" or \"container\" field itself.\n         *\n         * @returns {Object} The rendered DOM element.\n         */\n        getFieldEl: function() {\n            return this.field;\n        },\n\n        /**\n         * Returns the id of the field.\n         *\n         * @returns Field id.\n         */\n        getId: function() {\n            return this.id;\n        },\n\n        /**\n         * Returns this field's parent.\n         *\n         * @returns {Alpaca.Field} Field parent.\n         */\n        getParent: function() {\n            return this.parent;\n        },\n\n        /**\n         * Retrieves the path to this element in the graph of JSON data.\n         *\n         * @returns {string} the path to this element\n         */\n        getPath: function() {\n            return this.path;\n        },\n\n        /**\n         * Retrieves the name of this element at the current level of JSON data.\n         *\n         * @returns {*}\n         */\n        getName: function() {\n            return this.name;\n        },\n\n        /**\n         * Finds if this field is top level.\n         *\n         * @returns {Boolean} True if this field is the top level one, false otherwise.\n         */\n        isTopLevel: function() {\n            return Alpaca.isEmpty(this.parent);\n        },\n\n        /**\n         * Walks up the parent chain and returns the top most control.  If no parents, then current control is top control.\n         *\n         * @returns {Control} top most control\n         */\n        top: function()\n        {\n            var top = this;\n\n            while (top.parent) {\n                top = top.parent;\n            }\n\n            return top;\n        },\n\n        /**\n         * Returns the value of this field.\n         *\n         * @returns {Any} value Field value.\n         */\n        getValue: function()\n        {\n            var self = this;\n\n            var val = this.data;\n\n            val = self.ensureProperType(val);\n\n            return val;\n        },\n\n        /**\n         * Sets the value of the field.\n         *\n         * @param {Any} value Value to be set.\n         */\n        setValue: function(value) {\n            this.data = value;\n\n            this.updateObservable();\n\n            this.triggerUpdate();\n\n            // special case - if we're in a display mode and not first render, then do a refresh here\n            if (this.isDisplayOnly() && !this.initializing)\n            {\n                if (this.top && this.top() && this.top().initializing)\n                {\n                    // if we're rendering under a top most control that isn't finished initializing, then don't refresh\n                }\n                else\n                {\n                    this.refresh();\n                }\n            }\n        },\n\n        /**\n         * Resets value to default.\n         */\n        setDefault: function() {\n        },\n\n        /**\n         * Returns the field template descriptor.\n         *\n         * @returns {Object} template descriptor\n         */\n        getTemplateDescriptor: function() {\n            return this.templateDescriptor;\n        },\n\n        /**\n         * Sets the field template descriptor.\n         *\n         * @param {Object} template descriptor\n         */\n        setTemplateDescriptor: function(templateDescriptor) {\n            this.templateDescriptor = templateDescriptor;\n        },\n\n        /**\n         * Sets the validation state messages to show for a given field.\n         *\n         * @param {Object|Array} messages either a message object {id, message} or an array of message objects\n         * @param {Boolean} beforeStatus Previous validation status.\n         */\n        displayMessage: function(messages, beforeStatus) {\n\n            var self = this;\n\n            // if object, convert to array\n            if (messages && Alpaca.isObject(messages))\n            {\n                messages = [messages];\n            }\n\n            // if string, convert\n            if (messages && Alpaca.isString(messages))\n            {\n                messages = [{\n                    \"id\": \"custom\",\n                    \"message\": messages\n                }];\n            }\n\n            // remove any alpaca messages for this field\n            $(this.getFieldEl()).children(\".alpaca-message\").remove();\n\n            // maxMessage\n            if (messages && messages.length > 0) {\n                if(this.options.maxMessages && Alpaca.isNumber(this.options.maxMessages) && this.options.maxMessages > -1) {\n                    messages = messages.slice(0,this.options.maxMessages);\n                }\n            }\n\n            // CALLBACK: \"removeMessages\"\n            self.fireCallback(\"removeMessages\");\n\n            // add message and generate it\n            if (messages && messages.length > 0)\n            {\n                $.each(messages, function(index, messageObject) {\n\n                    var hidden = false;\n                    if (self.hideInitValidationError)\n                    {\n                        hidden = true;\n                    }\n\n                    // add message to the field\n                    var messageTemplateDescriptor = self.view.getTemplateDescriptor(\"message\");\n                    if (messageTemplateDescriptor)\n                    {\n                        var messageElement = Alpaca.tmpl(messageTemplateDescriptor, {\n                            \"id\": messageObject.id,\n                            \"message\": messageObject.message,\n                            \"view\": self.view\n                        });\n                        messageElement.addClass(\"alpaca-message\");\n                        if (hidden)\n                        {\n                            messageElement.addClass(\"alpaca-message-hidden\");\n                        }\n                        $(self.getFieldEl()).append(messageElement);\n                    }\n\n                    // CALLBACK: \"addMessage\"\n                    self.fireCallback(\"addMessage\", index, messageObject.id, messageObject.message, hidden);\n                });\n            }\n        },\n\n        /**\n         * Forces the validation for a field to be refreshed or redrawn to the screen.\n         *\n         * If told to check children, then all children of the container field will be refreshed as well.\n         *\n         * @param {Boolean} validateChildren whether to refresh validation for children\n         * @param [Function] optional callback when validation completes\n         */\n        refreshValidationState: function(validateChildren, cb)\n        {\n            // console.log(\"Call refreshValidationState: \" + this.path);\n\n            var self = this;\n\n            // run validation context compilation for ourselves and optionally any children\n            var contexts = [];\n            var functions = [];\n\n            // constructs an async function to validate context for a given field\n            var functionBuilder = function(field, contexts)\n            {\n                return function(callback)\n                {\n                    // run on the next tick\n                    Alpaca.nextTick(function() {\n                        Alpaca.compileValidationContext(field, function(context) {\n                            contexts.push(context);\n                            callback();\n                        });\n                    });\n                };\n            };\n\n            // wrap up everything we need to do into async callback methods\n            if (validateChildren)\n            {\n                // depth first crawl across all children\n                var crawl = function(field, contexts)\n                {\n                    if (field.isValidationParticipant())\n                    {\n                        // if the field has children, go depth first\n                        if (field.children && field.children.length > 0)\n                        {\n                            for (var i = 0; i < field.children.length; i++)\n                            {\n                                crawl(field.children[i], contexts);\n                            }\n                        }\n\n                        functions.push(functionBuilder(field, contexts));\n                    }\n                };\n                crawl(this, contexts);\n            }\n\n            // add ourselves in last\n            functions.push(functionBuilder(this, contexts));\n\n            // now run all of the functions\n            Alpaca.series(functions, function(err) {\n\n                // contexts now contains all of the validation results\n\n                // merge all contexts into a single validation context for this field\n                var mergedMap = {};\n                var mergedContext = [];\n                for (var i = 0; i < contexts.length; i++)\n                {\n                    var context = contexts[i];\n\n                    // NOTE: context is already in order [child, parent, ...]\n\n                    var mIndex = mergedContext.length;\n\n                    // walk forward\n                    for (var j = 0; j < context.length; j++)\n                    {\n                        var entry = context[j];\n\n                        var existing = mergedMap[entry.id];\n                        if (!existing)\n                        {\n                            // just add to end\n                            var newEntry = {};\n                            newEntry.id = entry.id;\n                            newEntry.path = entry.path;\n                            newEntry.domEl = entry.domEl;\n                            newEntry.field = entry.field;\n                            newEntry.validated = entry.validated;\n                            newEntry.invalidated = entry.invalidated;\n                            newEntry.valid = entry.valid;\n                            mergedContext.splice(mIndex, 0, newEntry);\n\n                            // mark in map\n                            mergedMap[newEntry.id] = newEntry;\n                        }\n                        else\n                        {\n                            if (entry.validated && !existing.invalidated)\n                            {\n                                existing.validated = true;\n                                existing.invalidated = false;\n                                existing.valid = entry.valid;\n                            }\n\n                            if (entry.invalidated)\n                            {\n                                existing.invalidated = true;\n                                existing.validated = false;\n                                existing.valid = entry.valid;\n                            }\n                        }\n                    }\n                }\n\n                // now reverse it so that context is normalized with child fields first\n                mergedContext.reverse();\n\n                // update validation state\n                if (!self.hideInitValidationError)\n                {\n                    Alpaca.updateValidationStateForContext(self.view, mergedContext);\n                }\n\n                if (cb)\n                {\n                    cb();\n                }\n            });\n        },\n\n        /**\n         * View and locale friendly retrieval of messages.\n         *\n         * @param key\n         */\n        getMessage: function(key)\n        {\n            return this.view.getMessage(key, this.view.locale);\n        },\n\n        /**\n         * Validates this field and returns whether it is in a valid state.\n         *\n         * @param [Boolean] validateChildren whether to child controls.\n         *\n         * @returns {Boolean} True if value of this field is valid, false otherwise.\n         */\n        validate: function(validateChildren)\n        {\n            // skip out if we haven't yet bound any data into this control\n            // the control can still be considered to be initializing\n            var status = true;\n\n            if (!this.initializing && this.options.validate)\n            {\n                // if validateChildren, then walk recursively down into child elements\n                if (this.children && validateChildren)\n                {\n                    for (var i = 0; i < this.children.length; i++)\n                    {\n                        var child = this.children[i];\n                        if (child.isValidationParticipant())\n                        {\n                            child.validate(validateChildren);\n                        }\n                    }\n                }\n\n                // evaluate ourselves\n                status = this.handleValidate();\n\n                // support for some debugging\n                if (!status && Alpaca.logLevel == Alpaca.DEBUG) // jshint ignore:line\n                {\n                    // messages\n                    var messages = [];\n                    for (var messageId in this.validation)\n                    {\n                        if (!this.validation[messageId][\"status\"])\n                        {\n                            messages.push(this.validation[messageId][\"message\"]);\n                        }\n                    }\n\n                    Alpaca.logDebug(\"Validation failure for field (id=\" + this.getId() + \", path=\" + this.path + \"), messages: \" + JSON.stringify(messages));\n                }\n            }\n\n            this._previouslyValidated = true;\n\n            return status;\n        },\n\n        /**\n         * Performs validation.\n         */\n        handleValidate: function() {\n            var valInfo = this.validation;\n\n            var status = this._validateOptional();\n            valInfo[\"notOptional\"] = {\n                \"message\": status ? \"\" : this.getMessage(\"notOptional\"),\n                \"status\": status\n            };\n\n            status = this._validateDisallow();\n            valInfo[\"disallowValue\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"disallowValue\"), [this.schema[\"disallow\"].join(', ')]),\n                \"status\": status\n            };\n\n            return valInfo[\"notOptional\"][\"status\"] && valInfo[\"disallowValue\"][\"status\"];\n        },\n\n        /**\n         * Validates using user provided validator.\n         */\n        _validateCustomValidator: function(callback) {\n\n            var _this = this;\n\n            if (this.options.validator && Alpaca.isFunction(this.options.validator))\n            {\n                this.options.validator.call(this, function(valInfo) {\n\n                    // always store in \"custom\"\n                    _this.validation[\"custom\"] = valInfo;\n\n                    callback();\n                });\n            }\n            else\n            {\n                callback();\n            }\n        },\n\n        /**\n         * Validates against required property.\n         *\n         * @returns {Boolean} False if this field value is empty but required, true otherwise.\n         */\n        _validateOptional: function() {\n\n            if (this.isRequired() && this.isEmpty()) {\n                return false;\n            }\n\n            if (this.options.disallowOnlyEmptySpaces && Alpaca.testRegex(Alpaca.regexps.whitespace, this.getValue())) {\n                return false;\n            }\n\n            return true;\n        },\n\n\n        /**\n         * Checks whether the field value is allowed or not.\n         *\n         * @returns {Boolean} True if the field value is allowed, false otherwise.\n         */\n        _validateDisallow: function() {\n            if (!Alpaca.isValEmpty(this.schema.disallow)) {\n                var val = this.getValue();\n                var disallow = this.schema.disallow;\n                if (Alpaca.isArray(disallow)) {\n                    var isAllowed = true;\n                    $.each(disallow, function(index, value) {\n                        if ((Alpaca.isObject(val) || (Alpaca.isArray(val)) && Alpaca.isString(value))) {\n                            value = Alpaca.parseJSON(value);\n                        }\n                        if (Alpaca.compareObject(val, value)) {\n                            isAllowed = false;\n                        }\n                    });\n                    return isAllowed;\n                } else {\n                    if ((Alpaca.isObject(val) || (Alpaca.isArray(val)) && Alpaca.isString(disallow))) {\n                        disallow = Alpaca.parseJSON(disallow);\n                    }\n                    return !Alpaca.compareObject(val, disallow);\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Triggers any event handlers that listens to the update event of this field.\n         */\n        triggerUpdate: function() {\n            $(this.field).trigger(\"fieldupdate\");\n        },\n\n        /**\n         * @EXTENSION_POINT\n         *\n         * Disables the field.\n         */\n        disable: function() {\n            // OVERRIDE\n        },\n\n        /**\n         * Enables the field.\n         */\n        enable: function() {\n            // OVERRIDE\n        },\n\n        /**\n         * @returns {boolean} whether the field is disabled\n         */\n        isDisabled: function()\n        {\n            // OVERRIDE\n            return false;\n        },\n\n        /**\n         * @returns {boolean} whether the field is enabled\n         */\n        isEnabled: function()\n        {\n            return !this.isDisabled();\n        },\n\n        /**\n         * Focuses on the field.\n         *\n         * If a callback is provided, the callback receives the control focused upon.\n         */\n        focus: function(onFocusCallback) {\n            // OVERRIDE\n\n            if (onFocusCallback)\n            {\n                onFocusCallback(this);\n            }\n\n        },\n\n        /**\n         * Purges any event listeners and remove this field from the DOM.\n         */\n        destroy: function() {\n\n            // remove observable\n            Alpaca.observable(this.path).clear();\n\n            // clean up Alpaca.fieldInstances static reference (used for convenience access to previous rendered fields)\n            if (Alpaca && Alpaca.fieldInstances) {\n                if (Alpaca.fieldInstances[this.getId()]) {\n                    delete Alpaca.fieldInstances[this.getId()];\n                }\n            }\n\n            // clean up DOM\n            $(this.field).remove();\n        },\n\n        /**\n         * Shows the field.\n         */\n        show: function()\n        {\n            if (this.options && this.options.hidden)\n            {\n                // if the hidden option is on, we're always hidden\n                return;\n            }\n            else\n            {\n                // show the field\n                $(this.field).css({\n                    \"display\": \"\"\n                });\n\n                this.onShow();\n\n                // CALLBACK: \"show\"\n                this.fireCallback(\"show\");\n            }\n        },\n\n        onShow: function()\n        {\n\n        },\n\n        /**\n         * Hides the field.\n         */\n        hide: function()\n        {\n            $(this.field).css({\n                \"display\": \"none\"\n            });\n\n            this.onHide();\n\n            // CALLBACK: \"hide\"\n            this.fireCallback(\"hide\");\n        },\n\n        onHide: function()\n        {\n\n        },\n\n        isValidationParticipant: function()\n        {\n            return this.isShown();\n        },\n\n        isShown: function() {\n            return !this.isHidden();\n        },\n\n        isVisible: function() {\n            return !this.isHidden();\n        },\n\n        isHidden: function() {\n            return (\"none\" === $(this.field).css(\"display\"));\n        },\n\n        /**\n         * Prints the field.\n         */\n        print: function()\n        {\n            if (this.getFieldEl().printArea)\n            {\n                this.getFieldEl().printArea();\n            }\n        },\n\n        /**\n         * Triggered when the field is being revealed as the result of a dependency or conditional calculation\n         * that has determined that the field should be shown.\n         */\n        onDependentReveal: function()\n        {\n\n        },\n\n        /**\n         * Triggered when the field is being concealed as the result of a dependency or conditional calculation\n         * that has determined that the field should be hidden.\n         */\n        onDependentConceal: function()\n        {\n\n        },\n\n        /**\n         * Reloads the field.\n         */\n        reload: function()\n        {\n            this.initializing = true;\n\n            if (!Alpaca.isEmpty(this.callback))\n            {\n                this.callback(this, this.renderedCallback);\n            }\n            else\n            {\n                this.render(this.renderedCallback);\n            }\n        },\n\n        /**\n         * Clears the field and resets the field to its original value.\n         */\n        clear: function()\n        {\n            var newValue = null;\n\n            if (this.data) {\n                newValue = this.data;\n            }\n\n            this.setValue(newValue);\n        },\n\n        /**\n         * Finds if the value of this field is empty.\n         *\n         * @return {Boolean} True if the field value is empty, false otherwise.\n         */\n        isEmpty: function()\n        {\n            return Alpaca.isValEmpty(this.getValue());\n        },\n\n        /**\n         * Finds if this field is valid.\n         *\n         * @return {Boolean} True if the field is valid, false otherwise.\n         */\n        isValid: function(checkChildren)\n        {\n            if (checkChildren && this.children)\n            {\n                for (var i = 0; i < this.children.length; i++) {\n                    var child = this.children[i];\n                    if (child.isValidationParticipant())\n                    {\n                        if (!child.isValid(checkChildren)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            if ($.isEmptyObject(this.validation)) {\n                return true;\n            } else {\n                for (var key in this.validation) {\n                    if (!this.validation[key].status) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        },\n\n        /**\n         * Initializes event handling.\n         */\n        initEvents: function()\n        {\n            var _this = this;\n\n            if (this.field)\n            {\n                this.field.mouseover(function(e) {\n                    _this.onMouseOver.call(_this, e);\n                    _this.trigger(\"mouseover\", e);\n                });\n\n                this.field.mouseout(function(e) {\n                    _this.onMouseOut.call(_this, e);\n                    _this.trigger(\"mouseout\", e);\n                });\n\n                // legacy support - specify events via options.onField<FieldName> = fn\n                $.each(this.options, function(key, func) {\n\n                    if (Alpaca.startsWith(key,'onField') && Alpaca.isFunction(func))\n                    {\n                        var event = key.substring(7).toLowerCase();\n                        _this.field.on(event, function(e) {\n                            func.call(_this,e);\n                        });\n                    }\n                });\n\n                // future support - specify events via options.events.<eventName> = fn\n                if (this.options && this.options.events)\n                {\n                    $.each(this.options.events, function(event, func) {\n\n                        if (Alpaca.isFunction(func))\n                        {\n                            if (event === \"render\" || event === \"ready\" || event === \"blur\" || event === \"focus\")\n                            {\n                                _this.on(event, function(e, a, b, c) {\n                                    func.call(_this, e, a, b, c);\n                                })\n                            }\n                            else\n                            {\n                                // legacy support\n                                _this.field.on(event, function(e) {\n                                    func.call(_this,e);\n                                });\n                            }\n                        }\n                    });\n                }\n            }\n        },\n\n        /**\n         * Callback for when the field receives focus.\n         *\n         * Default behavior is for the entire field to highlight.\n         *\n         * @param e dom event\n         */\n        onFocus: function(e) {\n            $(this.field).removeClass(\"alpaca-field-empty\");\n            $(this.field).addClass(\"alpaca-field-focused\");\n        },\n\n        /**\n         * Callback for when the field loses focus (blurs).\n         *\n         * Default behavior is for the entire field to un-highlight.\n         *\n         * @param e dom event\n         */\n        onBlur: function(e) {\n\n            var wasFocused = $(this.field).hasClass(\"alpaca-field-focused\");\n\n            $(this.field).removeClass(\"alpaca-field-focused\");\n\n            // update the UI validation state\n            if (wasFocused)\n            {\n                this.refreshValidationState();\n            }\n\n            // trigger \"fieldblur\"\n            $(this.field).trigger(\"fieldblur\");\n        },\n\n        /**\n         * Callback for when the field's value changes.\n         *\n         * Default behavior is to update the control's value and notify.\n         *\n         * @param e Event.\n         */\n        onChange: function(e) {\n            // store back into data element\n            this.data = this.getValue();\n            this.updateObservable();\n            this.triggerUpdate();\n        },\n\n        /**\n         * Callbeack for when the mouse moves over a field.\n         *\n         * @param e\n         */\n        onMouseOver: function(e) {\n\n        },\n\n        /**\n         * Callback for when the mouse moves out of the field.\n         *\n         * @param e\n         */\n        onMouseOut: function(e) {\n\n        },\n\n        /**\n         * Finds a field control by its path.\n         *\n         * @param {String} path Field control path.\n         * @returns {Alpaca.Field} Field control mapped to the path.\n         */\n        getControlByPath: function(path) {\n\n            var result = null;\n\n            if (path)\n            {\n                // strip off the leading \"/\" if it is there\n                if (path.indexOf(\"/\") === 0) {\n                    path = path.substring(1);\n                }\n\n                // strip off the trailing \"/\" if it is there\n                if (Alpaca.endsWith(path, \"/\")) {\n                    path = path.substring(0, path.length - 1);\n                }\n\n                var current = this;\n\n                var pathArray = path.split('/');\n                for (var i = 0; i < pathArray.length; i++)\n                {\n                    var pathElement = pathArray[i];\n\n                    var _name = pathElement;\n                    var _index = -1;\n\n                    var z1 = pathElement.indexOf(\"[\");\n                    if (z1 >= 0)\n                    {\n                        var z2 = pathElement.indexOf(\"]\", z1 + 1);\n                        if (z2 >= 0)\n                        {\n                            _index = parseInt(pathElement.substring(z1 + 1, z2));\n                            _name = pathElement.substring(0, z1);\n                        }\n                    }\n\n                    if (_name)\n                    {\n                        current = current.childrenByPropertyId[_name];\n\n                        if (_index > -1)\n                        {\n                            current = current.children[_index];\n                        }\n                    }\n                }\n\n                result = current;\n            }\n\n            return result;\n        },\n\n        /**\n         * Retrieves an array of Alpaca controls by their Alpaca field type (i.e. \"text\", \"checkbox\", \"ckeditor\")\n         * This does a deep traversal across the graph of Alpaca field instances.\n         *\n         * @param fieldType\n         * @returns {Array}\n         */\n        getControlsByFieldType: function(fieldType) {\n\n            var array = [];\n\n            if (fieldType)\n            {\n                var f = function(parent, fieldType, array)\n                {\n                    for (var i = 0; i < parent.children.length; i++)\n                    {\n                        if (parent.children[i].getFieldType() === fieldType)\n                        {\n                            array.push(parent.children[i]);\n                        }\n\n                        if (parent.children[i].isContainer())\n                        {\n                            f(parent.children[i], fieldType, array);\n                        }\n                    }\n                };\n                f(this, fieldType, array);\n            }\n\n            return array;\n        },\n\n        /**\n         * Retrieves an array of Alpaca controls by their schema type (i.e. \"string\", \"number\").\n         * This does a deep traversal across the graph of Alpaca field instances.\n         *\n         * @param schemaType\n         * @returns {Array}\n         */\n        getControlsBySchemaType: function(schemaType) {\n\n            var array = [];\n\n            if (schemaType)\n            {\n                var f = function(parent, schemaType, array)\n                {\n                    for (var i = 0; i < parent.children.length; i++)\n                    {\n                        if (parent.children[i].getType() === schemaType)\n                        {\n                            array.push(parent.children[i]);\n                        }\n\n                        if (parent.children[i].isContainer())\n                        {\n                            f(parent.children[i], schemaType, array);\n                        }\n                    }\n                };\n                f(this, schemaType, array);\n            }\n\n            return array;\n        },\n\n        /////////////////////////////////////////////////////////////////////////////////////////////////\n        //\n        // OBSERVABLES\n        //\n        /////////////////////////////////////////////////////////////////////////////////////////////////\n\n        subscribe: function()\n        {\n            var args = Alpaca.makeArray(arguments);\n            args.unshift(this.getObservableScope());\n\n            return Alpaca.subscribe.apply(this, args);\n        },\n\n        unsubscribe: function()\n        {\n            var args = Alpaca.makeArray(arguments);\n            args.unshift(this.getObservableScope());\n\n            return Alpaca.unsubscribe.apply(this, args);\n        },\n\n        observable: function()\n        {\n            var args = Alpaca.makeArray(arguments);\n            args.unshift(this.getObservableScope());\n\n            return Alpaca.observable.apply(this, args);\n        },\n\n        clearObservable: function()\n        {\n            var args = Alpaca.makeArray(arguments);\n            args.unshift(this.getObservableScope());\n\n            return Alpaca.clearObservable.apply(this, args);\n        },\n\n        dependentObservable: function()\n        {\n            var args = Alpaca.makeArray(arguments);\n            args.unshift(this.getObservableScope());\n\n            return Alpaca.dependentObservable.apply(this, args);\n        },\n\n\n        // Utility Functions for Form Builder\n\n        /**\n         * Returns schema data type.\n         *\n         * @returns {String} Schema data type.\n         */\n        getType: function() {\n\n        },\n\n        /**\n         * Returns a string that identifies the type of field.\n         *\n         * @required\n         * @extension-point\n         *\n         * Identifies the type of control field.\n         *\n         * @returns {string}\n         */\n        getFieldType: function()\n        {\n            return \"\";\n        },\n\n        /**\n         * @returns {String} the type of the base class (or null if none)\n         */\n        getBaseFieldType: function()\n        {\n            var baseFieldType = null;\n\n            var x = this.constructor.ancestor.prototype;\n            if (x && x.getFieldType)\n            {\n                baseFieldType = x.getFieldType();\n            }\n\n            return baseFieldType;\n        },\n\n        /**\n         * Finds if this field is a container of other fields.\n         *\n         * @returns {Boolean} True if it is a container, false otherwise.\n         */\n        isContainer: function() {\n            return false;\n        },\n\n        /**\n         * Determines whether the current field is required.\n         *\n         * A field can be specified as required by either specifying required: true on the schema for a field or by\n         * specifying a required array on the parent object with the name of the child field (as per json schema v 04).\n         *\n         * @returns {boolean}\n         */\n        isRequired: function()\n        {\n            // assume not required\n            var required = false;\n\n            if (typeof(this.schema.required) === \"boolean\")\n            {\n                required = this.schema.required;\n            }\n\n            // support for json-schema draft 04\n            if (this.parent && this.parent.schema.required)\n            {\n                if (Alpaca.isArray(this.parent.schema.required))\n                {\n                    var requiredArray = this.parent.schema.required;\n                    if (requiredArray)\n                    {\n                        for (var i = 0; i < requiredArray.length; i++)\n                        {\n                            if (requiredArray[i] === this.propertyId)\n                            {\n                                required = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            return required;\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * Returns field title.\n         *\n         * @returns {String} Field title.\n         */\n        getTitle: function() {\n\n        },\n\n        /**\n         * Returns field description.\n         *\n         * @returns {String} Field description.\n         */\n        getDescription: function() {\n\n        },\n\n        /**\n         * Returns JSON schema of the schema properties that are managed by this class.\n         *\n         * @private\n         * @returns {Object} JSON schema of the schema properties that are managed by this class.\n         */\n        getSchemaOfSchema: function() {\n            var schemaOfSchema = {\n                \"title\": this.getTitle(),\n                \"description\": this.getDescription(),\n                \"type\": \"object\",\n                \"properties\": {\n                    \"title\": {\n                        \"title\": \"Title\",\n                        \"description\": \"Short description of the property.\",\n                        \"type\": \"string\"\n                    },\n                    \"description\": {\n                        \"title\": \"Description\",\n                        \"description\": \"Detailed description of the property.\",\n                        \"type\": \"string\"\n                    },\n                    \"readonly\": {\n                        \"title\": \"Readonly\",\n                        \"description\": \"Indicates that the field is read-only.  A read-only field cannot have it's value changed.  Read-only fields render in a grayed-out or disabled control.  If the field is rendered using a view with the <code>displayReadonly</code> attribute set to false, the read-only field will not appear.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"required\": {\n                        \"title\": \"Required\",\n                        \"description\": \"Indicates whether the field's value is required.  If set to true, the field must take on a valid value and cannnot be left empty or unassigned.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"default\": {\n                        \"title\": \"Default\",\n                        \"description\": \"The default value to be assigned for this property.  If the data for the field is empty or not provided, this default value will be plugged in for you.  Specify a default value when you want to pre-populate the field's value ahead of time.\",\n                        \"type\": \"any\"\n                    },\n                    \"type\": {\n                        \"title\": \"Type\",\n                        \"description\": \"Data type of the property.\",\n                        \"type\": \"string\",\n                        \"readonly\": true\n                    },\n                    \"format\": {\n                        \"title\": \"Format\",\n                        \"description\": \"Data format of the property.\",\n                        \"type\": \"string\"\n                    },\n                    \"disallow\": {\n                        \"title\": \"Disallowed Values\",\n                        \"description\": \"List of disallowed values for the property.\",\n                        \"type\": \"array\"\n                    },\n                    \"dependencies\": {\n                        \"title\": \"Dependencies\",\n                        \"description\": \"List of property dependencies.\",\n                        \"type\": \"array\"\n                    }\n                }\n            };\n            if (this.getType && !Alpaca.isValEmpty(this.getType())) {\n                schemaOfSchema.properties.type['default'] = this.getType();\n                schemaOfSchema.properties.type['enum'] = [this.getType()];\n            }\n            return schemaOfSchema;\n        },\n\n        /**\n         * Returns Alpaca options for the schema properties that managed by this class.\n         *\n         * @private\n         * @returns {Object} Alpaca options for the schema properties that are managed by this class.\n         */\n        getOptionsForSchema: function() {\n            return {\n                \"fields\": {\n                    \"title\": {\n                        \"helper\": \"Field short description\",\n                        \"type\": \"text\"\n                    },\n                    \"description\": {\n                        \"helper\": \"Field detailed description\",\n                        \"type\": \"textarea\"\n                    },\n                    \"readonly\": {\n                        \"helper\": \"Field will be read only if checked\",\n                        \"rightLabel\": \"This field is read-only\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"required\": {\n                        \"helper\": \"Field value must be set if checked\",\n                        \"rightLabel\": \"This field is required\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"default\": {\n                        \"helper\": \"Field default value\",\n                        \"type\": \"textarea\"\n                    },\n                    \"type\": {\n                        \"helper\": \"Field data type\",\n                        \"type\": \"text\"\n                    },\n                    \"format\": {\n                        \"type\": \"select\",\n                        \"dataSource\": function(callback) {\n                            for (var key in Alpaca.defaultFormatFieldMapping)\n                            {\n                                this.selectOptions.push({\n                                    \"value\": key,\n                                    \"text\": key\n                                });\n                            }\n\n                            callback();\n                        }\n                    },\n                    \"disallow\": {\n                        \"helper\": \"Disallowed values for the field\",\n                        \"itemLabel\":\"Value\",\n                        \"type\": \"array\"\n                    },\n                    \"dependencies\": {\n                        \"helper\": \"Field Dependencies\",\n                        \"multiple\":true,\n                        \"size\":3,\n                        \"type\": \"select\",\n                        \"dataSource\": function (field, callback) {\n                            if (field.parent && field.parent.schemaParent && field.parent.schemaParent.parent) {\n                                for (var key in field.parent.schemaParent.parent.childrenByPropertyId) {\n                                    if (key != field.parent.schemaParent.propertyId) { // jshint ignore:line\n                                        field.selectOptions.push({\n                                            \"value\": key,\n                                            \"text\": key\n                                        });\n                                    }\n                                }\n                            }\n                            if (callback) {\n                                callback();\n                            }\n                        }\n                    }\n                }\n            };\n        },\n\n        /**\n         * Returns JSON schema of the Alpaca options that are managed by this class.\n         *\n         * @private\n         * @returns {Object} JSON schema of the Alpaca options that are managed by this class.\n         */\n        getSchemaOfOptions: function() {\n            var schemaOfOptions = {\n                \"title\": \"Options for \" + this.getTitle(),\n                \"description\": this.getDescription() + \" (Options)\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"form\":{},\n                    \"id\": {\n                        \"title\": \"Field Id\",\n                        \"description\": \"Unique field id. Auto-generated if not provided.\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Field Type\",\n                        \"description\": \"Field type.\",\n                        \"type\": \"string\",\n                        \"default\": this.getFieldType(),\n                        \"readonly\": true\n                    },\n                    \"validate\": {\n                        \"title\": \"Validation\",\n                        \"description\": \"Field validation is required if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": true\n                    },\n                    \"showMessages\": {\n                        \"title\": \"Show Messages\",\n                        \"description\": \"Display validation messages if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": true\n                    },\n                    \"disabled\": {\n                        \"title\": \"Disabled\",\n                        \"description\": \"Field will be disabled if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"readonly\": {\n                        \"title\": \"Readonly\",\n                        \"description\": \"Field will be readonly if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"hidden\": {\n                        \"title\": \"Hidden\",\n                        \"description\": \"Field will be hidden if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"label\": {\n                        \"title\": \"Label\",\n                        \"description\": \"Field label.\",\n                        \"type\": \"string\"\n                    },\n                    \"helper\": {\n                        \"title\": \"Helper\",\n                        \"description\": \"Field help message.\",\n                        \"type\": \"string\"\n                    },\n                    \"helpers\": {\n                        \"title\": \"Helpers\",\n                        \"description\": \"An array of field help messages.  Each message will be displayed on it's own line.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"fieldClass\": {\n                        \"title\": \"CSS class\",\n                        \"description\": \"Specifies one or more CSS classes that should be applied to the dom element for this field once it is rendered.  Supports a single value, comma-delimited values, space-delimited values or values passed in as an array.\",\n                        \"type\": \"string\"\n                    },\n                    \"hideInitValidationError\" : {\n                        \"title\": \"Hide Initial Validation Errors\",\n                        \"description\" : \"Hide initial validation errors if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"focus\": {\n                        \"title\": \"Focus\",\n                        \"description\": \"If true, the initial focus for the form will be set to the first child element (usually the first field in the form).  If a field name or path is provided, then the specified child field will receive focus.  For example, you might set focus to 'name' (selecting the 'name' field) or you might set it to 'client/name' which picks the 'name' field on the 'client' object.\",\n                        \"type\": \"checkbox\",\n                        \"default\": true\n                    },\n                    \"optionLabels\": {\n                        \"title\": \"Enumerated Value Labels\",\n                        \"description\": \"An array of string labels for items in the enum array\",\n                        \"type\": \"array\"\n                    },\n                    \"view\": {\n                        \"title\": \"Override of the view for this field\",\n                        \"description\": \"Allows for this field to be rendered with a different view (such as 'display' or 'create')\",\n                        \"type\": \"string\"\n                    }\n                }\n            };\n            if (this.isTopLevel()) {\n\n                schemaOfOptions.properties.form = {\n                    \"title\": \"Form\",\n                    \"description\": \"Options for rendering the FORM tag.\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"attributes\": {\n                            \"title\": \"Form Attributes\",\n                            \"description\": \"List of attributes for the FORM tag.\",\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"id\": {\n                                    \"title\": \"Id\",\n                                    \"description\": \"Unique form id. Auto-generated if not provided.\",\n                                    \"type\": \"string\"\n                                },\n                                \"action\": {\n                                    \"title\": \"Action\",\n                                    \"description\": \"Form submission endpoint\",\n                                    \"type\": \"string\"\n                                },\n                                \"method\": {\n                                    \"title\": \"Method\",\n                                    \"description\": \"Form submission method\",\n                                    \"enum\":[\"post\",\"get\"],\n                                    \"type\": \"string\"\n                                },\n                                \"rubyrails\": {\n                                    \"title\": \"Ruby On Rails\",\n                                    \"description\": \"Ruby on Rails Name Standard\",\n                                    \"enum\": [\"true\", \"false\"],\n                                    \"type\": \"string\"\n                                },\n                                \"name\": {\n                                    \"title\": \"Name\",\n                                    \"description\": \"Form name\",\n                                    \"type\": \"string\"\n                                },\n                                \"focus\": {\n                                    \"title\": \"Focus\",\n                                    \"description\": \"Focus Setting\",\n                                    \"type\": \"any\"\n                                }\n                            }\n                        },\n                        \"buttons\": {\n                            \"title\": \"Form Buttons\",\n                            \"description\": \"Configuration for form-bound buttons\",\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"submit\": {\n                                    \"type\": \"object\",\n                                    \"title\": \"Submit Button\",\n                                    \"required\": false\n                                },\n                                \"reset\": {\n                                    \"type\": \"object\",\n                                    \"title\": \"Reset button\",\n                                    \"required\": false\n                                }\n                            }\n                        },\n                        \"toggleSubmitValidState\": {\n                            \"title\": \"Toggle Submit Valid State\",\n                            \"description\": \"Toggle the validity state of the Submit button\",\n                            \"type\": \"boolean\",\n                            \"default\": true\n                        }\n                    }\n                };\n\n            } else {\n                delete schemaOfOptions.properties.form;\n            }\n\n            return schemaOfOptions;\n        },\n\n        /**\n         * Returns Alpaca options for the Alpaca options that are managed by this class.\n         *\n         * @private\n         * @returns {Object} Alpaca options for the Alpaca options that are managed by this class.\n         */\n        getOptionsForOptions: function() {\n            var optionsForOptions = {\n                \"type\": \"object\",\n                \"fields\": {\n                    \"id\": {\n                        \"type\": \"text\",\n                        \"readonly\": true\n                    },\n                    \"type\": {\n                        \"type\": \"text\"\n                    },\n                    \"validate\": {\n                        \"rightLabel\": \"Enforce validation\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"showMessages\": {\n                        \"rightLabel\":\"Show validation messages\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"disabled\": {\n                        \"rightLabel\":\"Disable this field\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"hidden\": {\n                        \"type\": \"checkbox\",\n                        \"rightLabel\": \"Hide this field\"\n                    },\n                    \"label\": {\n                        \"type\": \"text\"\n                    },\n                    \"helper\": {\n                        \"type\": \"textarea\"\n                    },\n                    \"helpers\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"textarea\"\n                        }\n                    },\n                    \"fieldClass\": {\n                        \"type\": \"text\"\n                    },\n                    \"hideInitValidationError\": {\n                        \"rightLabel\": \"Hide initial validation errors\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"focus\": {\n                        \"type\": \"checkbox\",\n                        \"rightLabel\": \"Auto-focus first child field\"\n                    },\n                    \"optionLabels\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"text\"\n                        }\n                    },\n                    \"view\": {\n                        \"type\": \"text\"\n                    }\n                }\n            };\n            if (this.isTopLevel()) {\n                optionsForOptions.fields.form = {\n                    \"type\": \"object\",\n                    \"fields\": {\n                        \"attributes\": {\n                            \"type\": \"object\",\n                            \"fields\": {\n                                \"id\": {\n                                    \"type\": \"text\",\n                                    \"readonly\": true\n                                },\n                                \"action\": {\n                                    \"type\": \"text\"\n                                },\n                                \"method\": {\n                                    \"type\": \"select\"\n                                },\n                                \"name\": {\n                                    \"type\": \"text\"\n                                }\n                            }\n                        }\n                    }\n                };\n            }\n\n            return optionsForOptions;\n        }\n        /* end_builder_helpers */\n    });\n\n    // Registers additional messages\n    Alpaca.registerMessages({\n        \"disallowValue\": \"{0} are disallowed values.\",\n        \"notOptional\": \"This field is not optional.\"\n    });\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.ControlField = Alpaca.Field.extend(\n        /**\n         * @lends Alpaca.ControlField.prototype\n         */\n        {\n            /**\n             * Called during construction to signal that this field is a control field.\n             */\n            onConstruct: function()\n            {\n                var _this = this;\n\n                this.isControlField = true;\n\n                // helper method for getting val() from the control\n                // handles conversion to the correct scalar type\n                this._getControlVal = function(ensureProperType) {\n                    var val = null;\n\n                    if (this.control)\n                    {\n                        val = $(this.control).val();\n\n                        if (ensureProperType)\n                        {\n                            val = _this.ensureProperType(val);\n                        }\n                    }\n\n                    return val;\n                };\n            },\n\n            /**\n             * @see Alpaca.Field#setup\n             */\n            setup: function()\n            {\n                var self = this;\n\n                this.base();\n\n                var controlTemplateType = self.resolveControlTemplateType();\n                if (!controlTemplateType)\n                {\n                    return Alpaca.throwErrorWithCallback(\"Unable to find template descriptor for control: \" + self.getFieldType());\n                }\n\n                this.controlDescriptor = this.view.getTemplateDescriptor(\"control-\" + controlTemplateType, self);\n\n                // buttons\n                if (typeof(this.options.renderButtons) === \"undefined\")\n                {\n                    this.options.renderButtons = true;\n                }\n                if (this.options.buttons)\n                {\n                    for (var k in this.options.buttons)\n                    {\n                        if (this.options.buttons[k].label)\n                        {\n                            this.options.buttons[k].value = this.options.buttons[k].label;\n                        }\n                        if (this.options.buttons[k].title)\n                        {\n                            this.options.buttons[k].value = this.options.buttons[k].title;\n                        }\n                        if (!this.options.buttons[k].type)\n                        {\n                            this.options.buttons[k].type = \"button\";\n                        }\n                        if (!this.options.buttons[k].styles)\n                        {\n                            this.options.buttons[k].styles = this.view.styles.button;\n                        }\n                    }\n                }\n            },\n\n            getControlEl: function()\n            {\n                return this.control;\n            },\n\n            resolveControlTemplateType: function()\n            {\n                var self = this;\n\n                // we assume the field type and then check the view to see if there is a template for this view\n                // if not, we walk the parent chain until we find a template type\n\n                var finished = false;\n                var selectedType = null;\n\n                var b = this;\n                do\n                {\n                    if (!b.getFieldType)\n                    {\n                        finished = true;\n                    }\n                    else\n                    {\n                        var d = this.view.getTemplateDescriptor(\"control-\" + b.getFieldType(), self);\n                        if (d)\n                        {\n                            selectedType = b.getFieldType();\n                            finished = true;\n                        }\n                        else\n                        {\n                            b = b.constructor.ancestor.prototype;\n                        }\n                    }\n                }\n                while (!finished);\n\n                return selectedType;\n            },\n\n            onSetup: function()\n            {\n\n            },\n\n            isAutoFocusable: function()\n            {\n                return true;\n            },\n\n            /**\n             * For control fields, we use the \"control\" template as the primary.\n             *\n             * @see Alpaca.Field#getTemplateDescriptorId\n             * @returns {string}\n             */\n            getTemplateDescriptorId : function ()\n            {\n                return \"control\";\n            },\n\n            /**\n             * Add a \"control\" dom element inside of the field which houses our custom control.\n             *\n             * @see Alpaca.Field#renderField\n             */\n            renderFieldElements: function(callback) {\n\n                var self = this;\n\n                // find our insertion point\n                // this is marked by the handlebars helper\n                this.control = $(this.field).find(\".\" + Alpaca.MARKER_CLASS_CONTROL_FIELD);\n                this.control.removeClass(Alpaca.MARKER_CLASS_CONTROL_FIELD);\n\n                // render\n                self.prepareControlModel(function(model) {\n                    self.beforeRenderControl(model, function() {\n                        self.renderControl(model, function(controlField) {\n\n                            if (controlField)\n                            {\n                                self.control.replaceWith(controlField);\n                                self.control = controlField;\n\n                                self.control.addClass(Alpaca.CLASS_CONTROL);\n                            }\n\n                            // CALLBACK: \"control\"\n                            self.fireCallback(\"control\");\n\n                            self.afterRenderControl(model, function() {\n\n                                callback();\n                            });\n\n                        });\n                    });\n                });\n            },\n\n            /**\n             * Prepares the model for use in rendering the control.\n             *\n             * @param callback function(model)\n             */\n            prepareControlModel: function(callback)\n            {\n                var self = this;\n\n                var model = {};\n                model.id = this.getId();\n                model.name = this.name;\n                model.options = this.options;\n                model.schema = this.schema;\n                model.data = this.data;\n                model.required = this.isRequired();\n                model.view = this.view;\n\n                callback(model);\n            },\n\n            /**\n             * Called before the control is rendered.\n             *\n             * @extension-point\n             *\n             * @param callback\n             */\n            beforeRenderControl: function(model, callback)\n            {\n                var self = this;\n\n                callback();\n            },\n\n            /**\n             * Called after the control is rendered.\n             *\n             * @extension-point\n             *\n             * @param model\n             * @param callback\n             */\n            afterRenderControl: function(model, callback)\n            {\n                var self = this;\n\n                if (!self.firstUpdateObservableFire)\n                {\n                    if ((typeof(self.data) == \"undefined\") || self.data == null)\n                    {\n                        // do not handle\n                    }\n                    else\n                    {\n                        self.firstUpdateObservableFire = true;\n                        self.updateObservable();\n                    }\n                }\n\n                // buttons\n                $(this.getFieldEl()).find(\".alpaca-control-button\").each(function() {\n\n                    $(this).click(function(e) {\n                        $(this).attr(\"button-pushed\", true);\n                    });\n\n                    // custom click handler?\n                    var key = $(this).attr(\"data-key\");\n                    if (key)\n                    {\n                        var buttonConfig = self.options.buttons[key];\n                        if (buttonConfig)\n                        {\n                            if (buttonConfig.click)\n                            {\n                                $(this).click(function(control, handler) {\n                                    return function(e) {\n                                        e.preventDefault();\n                                        handler.call(control, e);\n                                    }\n                                }(self, buttonConfig.click));\n                            }\n                        }\n                    }\n                });\n\n\n                callback();\n            },\n\n            /**\n             * Renders the control into the field container.\n             *\n             * @extension-point\n             *\n             * @param model\n             * @param callback\n             */\n            renderControl: function(model, callback)\n            {\n                var control = null;\n\n                if (this.controlDescriptor)\n                {\n                    control = Alpaca.tmpl(this.controlDescriptor, model);\n                }\n\n                callback(control);\n            },\n\n            /**\n             * @see Alpaca.Field#postRender\n             */\n            postRender: function(callback)\n            {\n                var self = this;\n\n                /*\n                 // store reference to the label\n                 this.labelDiv = $(this.field).find(\".alpaca-controlfield-label\");\n                 var labelDiv = $('.alpaca-controlfield-label', this.outerEl);\n                 if (labelDiv.length) {\n                 this.labelDiv = labelDiv;\n                 }\n\n                 var helperDiv = $('.alpaca-controlfield-helper', this.outerEl);\n                 if (helperDiv.length) {\n                 this.helperDiv = helperDiv;\n                 }\n                 */\n\n                this.base(function() {\n\n                    callback();\n\n                });\n            },\n\n            /**\n             * Ensures that the \"name\" property on the control is kept in sync.\n             */\n            updateDOMElement: function()\n            {\n                this.base();\n\n                // update the name field\n                this.control.attr(\"name\", this.getName());\n            },\n\n            /**\n             * @see Alpaca.Field#setDefault\n             */\n            setDefault: function() {\n                var defaultData = Alpaca.isEmpty(this.schema['default']) ? \"\" : this.schema['default'];\n                this.setValue(defaultData);\n            },\n\n            /**\n             * Returns the value of this field.\n             *\n             * @returns {Any} value Field value.\n             */\n            getValue: function()\n            {\n                var self = this;\n\n                var value = this.base();\n\n                if (!this.isDisplayOnly())\n                {\n                    value = self.getControlValue();\n                }\n\n                // some correction for type\n                value = self.ensureProperType(value);\n\n                return value;\n            },\n\n            /**\n             * Gets the current value from the control value.\n             *\n             * Extension point\n             */\n            getControlValue: function()\n            {\n                return this._getControlVal(true);\n            },\n\n            /**\n             * Validate against enum property.\n             *\n             * @returns {Boolean} True if the element value is part of the enum list, false otherwise.\n             */\n            _validateEnum: function()\n            {\n                if (!this.getEnum()) {\n                    return true;\n                }\n\n                var val = this.getValue();\n\n                if (!this.isRequired() && Alpaca.isValEmpty(val)) {\n                    return true;\n                }\n\n                return Alpaca.inArray(this.getEnum(), val);\n            },\n\n            /**\n             * @see Alpaca.Field#handleValidate\n             */\n            handleValidate: function()\n            {\n                var baseStatus = this.base();\n\n                var valInfo = this.validation;\n\n                var status = this._validateEnum();\n\n                // Use the values presented to the user in the validation\n                // error message. If there are optionLabels, use them in\n                // preference to the raw enum values.\n                var messageValues = this.getEnum();\n                // use option labels if those are available\n                var optionLabels = this.getOptionLabels();\n                if (optionLabels && optionLabels.length > 0) {\n                    messageValues = optionLabels;\n                }\n\n                valInfo[\"invalidValueOfEnum\"] = {\n                    \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"invalidValueOfEnum\"), [messageValues.join(', '), this.getValue()]),\n                    \"status\": status\n                };\n\n                return baseStatus && valInfo[\"invalidValueOfEnum\"][\"status\"];\n            },\n\n            /**\n             * @see Alpaca.Field#initEvents\n             */\n            initEvents: function()\n            {\n                this.base();\n\n                if (this.control && this.control.length > 0)\n                {\n                    this.initControlEvents();\n                }\n            },\n\n            initControlEvents: function()\n            {\n                var self = this;\n\n                var control = this.control;\n\n                control.click(function(e) {\n                    self.onClick.call(self, e);\n                    self.trigger(\"click\", e);\n                });\n\n                // trigger control level handlers for things that happen to input element\n                control.change(function(e) {\n\n                    // we use a timeout here because we want this to run AFTER control click handlers\n                    setTimeout(function() {\n                        self.onChange.call(self, e);\n                        self.triggerWithPropagation(\"change\", e);\n                    }, 200);\n                });\n\n                control.focus(function(e) {\n\n                    self.wasFocused = true;\n\n                    if (!self.suspendBlurFocus)\n                    {\n                        var x = self.onFocus.call(self, e);\n                        if (x !== false) {\n                            x = self.trigger(\"focus\", e);\n                        }\n\n                        return x;\n                    }\n                });\n\n                control.blur(function(e) {\n\n                    self.wasBlurred = true;\n\n                    if (!self.suspendBlurFocus)\n                    {\n                        var x = self.onBlur.call(self, e);\n                        if (x !== false) {\n                            x = self.trigger(\"blur\", e);\n                        }\n\n                        return x;\n                    }\n                });\n\n                control.keypress(function(e) {\n                    var x = self.onKeyPress.call(self, e);\n                    if (x !== false) {\n                        x = self.trigger(\"keypress\", e);\n                    }\n\n                    return x;\n                });\n\n                control.keyup(function(e) {\n                    var x = self.onKeyUp.call(self, e);\n                    if (x !== false) {\n                        x = self.trigger(\"keyup\", e);\n                    }\n\n                    return x;\n                });\n\n                control.keydown(function(e) {\n                    var x = self.onKeyDown.call(self, e);\n                    if (x !== false) {\n                        x = self.trigger(\"keydown\", e);\n                    }\n\n                    return x;\n                });\n            },\n\n            /**\n             * Callback for when a key press event is received for the field control.\n             *\n             * @param {Object} e keypress event\n             */\n            onKeyPress: function(e)\n            {\n                var self = this;\n\n                var refresh = false;\n\n                // if we're in edit mode\n                if (self.view.type && self.view.type === 'edit')\n                {\n                    // if the field is currently invalid, then we provide early feedback to the user as to when they enter\n                    // if the field was valid, we don't render invalidation feedback until they blur the field\n\n                    // was the control valid previously?\n                    var wasValid = this.isValid();\n                    if (!wasValid)\n                    {\n                        refresh = true;\n                    }\n                }\n                else if (self.view.type && self.view.type === 'create')\n                {\n                    var wasValid = this.isValid();\n                    if (!wasValid && self.wasBlurred)\n                    {\n                        refresh = true;\n                    }\n                }\n\n                if (refresh)\n                {\n                    // we use a timeout because at this exact moment, the value of the control is still the old value\n                    // jQuery raises the keypress event ahead of the input receiving the new data which would incorporate\n                    // the key that was pressed\n                    //\n                    // this timeout provides the browser with enough time to plug the value into the input control\n                    // which the validation logic uses to determine whether the control is now in a valid state\n                    //\n                    window.setTimeout(function () {\n                        self.refreshValidationState();\n                    }, 50);\n                }\n\n            },\n\n            /**\n             * Callback for when a key down event is received for the field control.\n             *\n             * @param {Object} e keydown event\n             */\n            onKeyDown: function(e)\n            {\n            },\n\n            /**\n             * Callback for when a key up event is received for the field control.\n             *\n             * @param {Object} e keyup event\n             */\n            onKeyUp: function(e)\n            {\n            },\n\n            /**\n             * Handler for click event.\n             *\n             * @param {Object} e Click event.\n             */\n            onClick: function(e)\n            {\n            },\n\n            /**\n             * @see Alpaca.Field#disable\n             */\n            disable: function()\n            {\n                if (this.options.readonly) {\n                    return;\n                }\n\n                this.base();\n\n                if (this.control && this.control.length > 0)\n                {\n                    $(this.control).prop(\"disabled\", true);\n                }\n            },\n\n            /**\n             * @see Alpaca.Field#enable\n             */\n            enable: function()\n            {\n                if (this.options.readonly) {\n                    return;\n                }\n\n                this.base();\n\n                if (this.control && this.control.length > 0)\n                {\n                    $(this.control).prop(\"disabled\", false);\n                }\n            },\n\n            /**\n             * @see Alpaca.Field#isDisabled\n             */\n            isDisabled: function()\n            {\n                return $(this.control).prop(\"disabled\");\n            },\n\n            /**\n             * @returns {array} the enum value to use for this field\n             */\n            getEnum: function()\n            {\n                var array = null;\n\n                if (this.schema && this.schema[\"enum\"])\n                {\n                    array = this.schema[\"enum\"];\n                }\n\n                return array;\n            },\n\n            /**\n             * Sets the enum value to use for this field\n             *\n             * @param {array} enumArray\n             */\n            setEnum: function(enumArray)\n            {\n                Alpaca.safeSetObjectArray(this.schema, \"enum\", enumArray);\n            },\n\n            /**\n             * @returns {array} the option labels to use for this field\n             */\n            getOptionLabels: function()\n            {\n                var array = null;\n\n                if (this.options && this.options[\"optionLabels\"])\n                {\n                    array = this.options[\"optionLabels\"];\n                }\n\n                return array;\n            },\n\n            /**\n             * Sets the option labels to use for this field.\n             *\n             * @param {array} optionLabelsArray\n             */\n            setOptionLabels: function(optionLabelsArray)\n            {\n                Alpaca.safeSetObjectArray(this.options, \"optionLabels\", optionLabelsArray);\n            },\n\n            /**\n             * Sorts the given enumerated values using the local sortSelectableOptions method.\n             */\n            sortEnum: function()\n            {\n                var enumValues = this.getEnum();\n                if (enumValues && enumValues.length > 0)\n                {\n                    var optionLabels = this.getOptionLabels();\n\n                    var selectableOptions = [];\n                    for (var i = 0; i < enumValues.length; i++)\n                    {\n                        var value = enumValues[i];\n                        var text = enumValues[i];\n\n                        if (optionLabels && optionLabels.length >= i + 1)\n                        {\n                            text = optionLabels[i];\n                        }\n\n                        selectableOptions.push({\n                            \"value\": value,\n                            \"text\": text\n                        });\n                    }\n\n                    // sort the options\n                    this.sortSelectableOptions(selectableOptions);\n\n                    // now set back\n                    var newEnumValues = [];\n                    var newOptionLabels = [];\n                    for (var i = 0; i < selectableOptions.length; i++)\n                    {\n                        newEnumValues.push(selectableOptions[i].value);\n\n                        if (Alpaca.isArray(optionLabels)) {\n                            newOptionLabels.push(selectableOptions[i].text);\n                        }\n                    }\n\n                    this.setEnum(newEnumValues);\n                    this.setOptionLabels(newOptionLabels);\n                }\n            },\n\n            /**\n             * Sorts a select options array by order of displayable text.\n             *\n             * If you're looking to provide a custom sort order, you may wish to override this function.\n             * Alternatively, you can provide an options.sort function - fn(a, b).\n             *\n             * @param selectableOptions\n             */\n            sortSelectableOptions: function(selectableOptions)\n            {\n                var self = this;\n\n                // if sort is false, just return\n                if (self.options.sort === false)\n                {\n                    return;\n                }\n\n                // assume a default sort function\n                var sortFn = Alpaca.defaultSort;\n\n                // if they provide a custom sort function, use that instead\n                if (self.options.sort) {\n                    if (typeof(self.options.sort) === \"function\") {\n                        sortFn = self.options.sort;\n                    }\n                }\n\n                // sort it\n                selectableOptions.sort(sortFn);\n            },\n\n            /**\n             * Helper function that invokes a datasource configured for this control.  The results are written into the\n             * given array and the onFinish method is then called with (err, array).\n             *\n             * @param array\n             * @param onFinish\n             */\n            invokeDataSource: function(array, model, onFinish)\n            {\n                var self = this;\n\n                var completionFunction = function(err)\n                {\n                    var self = this;\n\n                    if (err) {\n                        return onFinish(err);\n                    }\n\n                    self.afterLoadDataSourceOptions(array, model, function(err, array) {\n\n                        if (err) {\n                            return onFinish(err);\n                        }\n\n                        // apply sorting to whatever we produce\n                        self.sortSelectableOptions(array);\n\n                        onFinish(null, array);\n\n                    });\n\n                }.bind(self);\n\n                if (Alpaca.isFunction(self.options.dataSource))\n                {\n                    self.options.dataSource.call(self, function(values) {\n\n                        if (Alpaca.isArray(values))\n                        {\n                            for (var i = 0; i < values.length; i++)\n                            {\n                                if (typeof(values[i]) === \"string\")\n                                {\n                                    array.push({\n                                        \"text\": values[i],\n                                        \"value\": values[i]\n                                    });\n                                }\n                                else if (Alpaca.isObject(values[i]))\n                                {\n                                    array.push(values[i]);\n                                }\n                            }\n\n                            completionFunction();\n                        }\n                        else if (Alpaca.isObject(values))\n                        {\n                            for (var k in values)\n                            {\n                                array.push({\n                                    \"text\": k,\n                                    \"value\": values[k]\n                                });\n                            }\n\n                            completionFunction();\n                        }\n                        else\n                        {\n                            completionFunction();\n                        }\n                    });\n                }\n                else if (Alpaca.isUri(self.options.dataSource))\n                {\n                    var locale = self.view.locale;\n\n                    var url = \"\" + self.options.dataSource;\n\n                    if (locale)\n                    {\n                        url += ((url.indexOf(\"?\") === -1) ? \"?\" : \"&\");\n                        url += \"locale=\" + locale;\n                    }\n\n\n                    $.ajax({\n                        url: url,\n                        type: \"get\",\n                        dataType: \"json\",\n                        success: function(jsonDocument) {\n\n                            var ds = jsonDocument;\n                            if (self.options.dsTransformer && Alpaca.isFunction(self.options.dsTransformer))\n                            {\n                                ds = self.options.dsTransformer(ds);\n                            }\n\n                            if (ds)\n                            {\n                                if (Alpaca.isObject(ds))\n                                {\n                                    // for objects, we walk through one key at a time\n                                    // the insertion order is the order of the keys from the map\n                                    // to preserve order, consider using an array as below\n                                    $.each(ds, function(key, value) {\n                                        array.push({\n                                            \"value\": key,\n                                            \"text\": value\n                                        });\n                                    });\n\n                                    completionFunction();\n                                }\n                                else if (Alpaca.isArray(ds))\n                                {\n                                    // for arrays, we walk through one index at a time\n                                    // the insertion order is dictated by the order of the indices into the array\n                                    // this preserves order\n                                    $.each(ds, function(index, value) {\n                                        array.push({\n                                            \"value\": value.value,\n                                            \"text\": value.text\n                                        });\n                                    });\n\n                                    completionFunction();\n                                }\n                            }\n                        },\n                        \"error\": function(jqXHR, textStatus, errorThrown) {\n\n                            self.errorCallback({\n                                \"message\":\"Unable to load data from uri : \" + self.options.dataSource,\n                                \"stage\": \"DATASOURCE_LOADING_ERROR\",\n                                \"details\": {\n                                    \"jqXHR\" : jqXHR,\n                                    \"textStatus\" : textStatus,\n                                    \"errorThrown\" : errorThrown\n                                }\n                            });\n                        }\n                    });\n                }\n                else if (Alpaca.isArray(self.options.dataSource))\n                {\n                    var ds = self.options.dataSource;\n\n                    for (var i = 0; i < ds.length; i++)\n                    {\n                        if (typeof(ds[i]) === \"string\")\n                        {\n                            array.push({\n                                \"text\": ds[i],\n                                \"value\": ds[i]\n                            });\n                        }\n                        else if (Alpaca.isObject(ds[i]))\n                        {\n                            array.push(ds[i]);\n                        }\n                    }\n\n                    completionFunction();\n                }\n                else if (Alpaca.isObject(self.options.dataSource))\n                {\n                    if (self.options.dataSource.connector)\n                    {\n                        var connector = self.connector;\n\n                        if (Alpaca.isObject(self.options.dataSource.connector))\n                        {\n                            var connectorId = self.options.dataSource.connector.id;\n                            var connectorConfig = self.options.dataSource.connector.config;\n                            if (!connectorConfig) {\n                                connectorConfig = {};\n                            }\n\n                            var ConnectorClass = Alpaca.getConnectorClass(connectorId);\n                            if (ConnectorClass) {\n                                connector = new ConnectorClass(connectorId, connectorConfig);\n                            }\n                        }\n\n                        var config = self.options.dataSource.config;\n                        if (!config) {\n                            config = {};\n                        }\n\n                        // load using connector\n                        connector.loadDataSource(config, function(values) {\n\n                            for (var i = 0; i < values.length; i++)\n                            {\n                                if (typeof(values[i]) === \"string\")\n                                {\n                                    array.push({\n                                        \"text\": values[i],\n                                        \"value\": values[i]\n                                    });\n                                }\n                                else if (Alpaca.isObject(values[i]))\n                                {\n                                    array.push(values[i]);\n                                }\n                            }\n\n                            completionFunction();\n                        });\n                    }\n                    else\n                    {\n                        // load from standard object\n                        for (var k in self.options.dataSource)\n                        {\n                            array.push({\n                                \"text\": self.options.dataSource[k],\n                                \"value\": k\n                            });\n                        }\n\n                        completionFunction();\n                    }\n\n                }\n                else\n                {\n                    onFinish();\n                }\n            },\n\n            afterLoadDataSourceOptions: function(array, model, callback)\n            {\n                callback(null, array);\n            }\n\n\n            /* builder_helpers */\n            ,\n\n            /**\n             * @private\n             * @see Alpaca.Field#getSchemaOfSchema\n             */\n            getSchemaOfSchema: function() {\n                return Alpaca.merge(this.base(), {\n                    \"properties\": {\n                        \"enum\": {\n                            \"title\": \"Enumerated Values\",\n                            \"description\": \"List of specific values for this property\",\n                            \"type\": \"array\"\n                        }\n                    }\n                });\n            },\n\n            /**\n             * @private\n             * @see Alpaca.Field#getOptionsForSchema\n             */\n            getOptionsForSchema: function() {\n                return Alpaca.merge(this.base(), {\n                    \"fields\": {\n                        \"enum\": {\n                            \"itemLabel\":\"Value\",\n                            \"type\": \"array\"\n                        }\n                    }\n                });\n            },\n\n            /**\n             * @private\n             * @see Alpaca.Field#getSchemaOfOptions\n             */\n            getSchemaOfOptions: function() {\n                return Alpaca.merge(this.base(), {\n                    \"properties\": {\n                        \"name\": {\n                            \"title\": \"Field Name\",\n                            \"description\": \"Field Name.\",\n                            \"type\": \"string\"\n                        },\n                        \"sort\": {\n                            \"title\": \"Sort Function\",\n                            \"description\": \"Defines an f(a,b) sort function for the array of enumerated values [{text, value}].  This is used to sort enum and optionLabels as well as results that come back from any data sources (for select and radio controls).  By default the items are sorted alphabetically.   Don't apply any sorting if false.\",\n                            \"type\": \"function\"\n                        }\n                    }\n                });\n            },\n\n            /**\n             * @private\n             * @see Alpaca.Field#getOptionsForOptions\n             */\n            getOptionsForOptions: function() {\n                return Alpaca.merge(this.base(), {\n                    \"fields\": {\n                        \"name\": {\n                            \"type\": \"text\"\n                        }\n                    }\n                });\n            }\n            /* end_builder_helpers */\n        });\n\n    // Registers additional messages\n    Alpaca.registerMessages({\n        \"invalidValueOfEnum\": \"This field should have one of the values in {0}.  Current value is: {1}\"\n    });\n\n})(jQuery);\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.ContainerField = Alpaca.Field.extend(\n    /**\n     * @lends Alpaca.ContainerField.prototype\n     */\n    {\n        /**\n         * Called during construction to signal that this field is a container field.\n         */\n        onConstruct: function()\n        {\n            this.isContainerField = true;\n        },\n\n        /**\n         * @see Alpaca.Field#isContainer\n         */\n        isContainer: function()\n        {\n            return true;\n        },\n\n        getContainerEl: function()\n        {\n            return this.container;\n        },\n\n        /**\n         * For container fields, we use the \"container\" template as the primary.\n         *\n         * @see Alpaca.Field#getTemplateDescriptorId\n         * @returns {string}\n         */\n        getTemplateDescriptorId : function ()\n        {\n            return \"container\";\n        },\n\n        resolveContainerTemplateType: function()\n        {\n            // we assume the field type and then check the view to see if there is a template for this view\n            // if not, we walk the parent chain until we find a template type\n\n            var finished = false;\n            var selectedType = null;\n\n            var b = this;\n            do\n            {\n                if (!b.getFieldType)\n                {\n                    finished = true;\n                }\n                else\n                {\n                    var d = this.view.getTemplateDescriptor(\"container-\" + b.getFieldType(), this);\n                    if (d)\n                    {\n                        selectedType = b.getFieldType();\n                        finished = true;\n                    }\n                    else\n                    {\n                        b = b.constructor.ancestor.prototype;\n                    }\n                }\n            }\n            while (!finished);\n\n            return selectedType;\n        },\n\n        resolveContainerItemTemplateType: function()\n        {\n            // we assume the field type and then check the view to see if there is a template for this view\n            // if not, we walk the parent chain until we find a template type\n\n            var finished = false;\n            var selectedType = null;\n\n            var b = this;\n            do\n            {\n                if (!b.getFieldType)\n                {\n                    finished = true;\n                }\n                else\n                {\n                    var d = this.view.getTemplateDescriptor(\"container-\" + b.getFieldType() + \"-item\", this);\n                    if (d)\n                    {\n                        selectedType = b.getFieldType();\n                        finished = true;\n                    }\n                    else\n                    {\n                        b = b.constructor.ancestor.prototype;\n                    }\n                }\n            }\n            while (!finished);\n\n            return selectedType;\n        },\n\n        /**\n         * @see Alpaca.Field#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.base();\n\n            var containerTemplateType = self.resolveContainerTemplateType();\n            if (!containerTemplateType)\n            {\n                return Alpaca.throwErrorWithCallback(\"Unable to find template descriptor for container: \" + self.getFieldType());\n            }\n\n            this.containerDescriptor = this.view.getTemplateDescriptor(\"container-\" + containerTemplateType, self);\n\n            // default to false\n            var collapsible = false;\n\n            if (!Alpaca.isEmpty(this.view.collapsible)) {\n                collapsible = this.view.collapsible;\n            }\n\n            if (!Alpaca.isEmpty(this.options.collapsible)) {\n                collapsible = this.options.collapsible;\n            }\n\n            this.options.collapsible = collapsible;\n\n            var legendStyle = \"button\";\n\n            if (!Alpaca.isEmpty(this.view.legendStyle)) {\n                legendStyle = this.view.legendStyle;\n            }\n\n            if (!Alpaca.isEmpty(this.options.legendStyle)) {\n                legendStyle = this.options.legendStyle;\n            }\n\n            this.options.legendStyle = legendStyle;\n\n            //Lazy loading\n            this.lazyLoading = false;\n            if (!Alpaca.isEmpty(this.options.lazyLoading)) {\n                this.lazyLoading = this.options.lazyLoading;\n                if (this.lazyLoading) {\n                    this.options.collapsed = true;\n                }\n                //delete this.options.lazyLoading;\n            }\n            // holders of references to children\n            this.children = [];\n            this.childrenById = {};\n            this.childrenByPropertyId = {};\n        },\n\n        /**\n         * @see Alpaca.Field#destroy\n         */\n        destroy: function()\n        {\n            // if this container is DOM-wrapped with a form, then release the form\n            if (this.form)\n            {\n                this.form.destroy(true); // pass in true so that we don't call back recursively\n                delete this.form;\n            }\n\n            // destroy any child controls\n            Alpaca.each(this.children, function () {\n                this.destroy();\n            });\n\n            // call up to base method\n            this.base();\n        },\n\n        /**\n         * Add a \"container\" dom element inside of the field which houses our custom container.\n         *\n         * @see Alpaca.Field#renderField\n         */\n        renderFieldElements: function(callback) {\n\n            var self = this;\n\n            // find our insertion point\n            // this is marked by the handlebars helper\n            this.container = $(this.field).find(\".\" + Alpaca.MARKER_CLASS_CONTAINER_FIELD);\n            this.container.removeClass(Alpaca.MARKER_CLASS_CONTAINER_FIELD);\n\n            // render\n            self.prepareContainerModel(function(model) {\n                self.beforeRenderContainer(model, function() {\n                    self.renderContainer(model, function(containerField) {\n\n                        if (containerField)\n                        {\n                            self.container.replaceWith(containerField);\n                            self.container = containerField;\n\n                            self.container.addClass(Alpaca.CLASS_CONTAINER);\n                        }\n\n                        // mark the form field with \"alpaca-horizontal\" or \"alpaca-vertical\"\n                        if (self.view.horizontal)\n                        {\n                            self.container.addClass(\"alpaca-horizontal\");\n                        }\n                        else\n                        {\n                            self.container.addClass(\"alpaca-vertical\");\n                        }\n\n                        // CALLBACK: \"container\"\n                        self.fireCallback(\"container\");\n\n                        self.afterRenderContainer(model, function() {\n\n                            callback();\n                        });\n\n                    });\n                });\n            });\n        },\n\n        /**\n         * Prepares the model for use in rendering the container.\n         *\n         * @param callback function(model)\n         */\n        prepareContainerModel: function(callback)\n        {\n            var self = this;\n\n            var model = {\n                \"id\": this.getId(),\n                \"name\": this.name,\n                \"schema\": this.schema,\n                \"options\": this.options,\n                \"view\": this.view\n            };\n\n            // load items into array and store on model for future use\n            self.createItems(function(items) {\n\n                if (!items)\n                {\n                    items = [];\n                }\n\n                // legacy support: assume containerItemEl = fieldEl\n                for (var i = 0; i < items.length; i++)\n                {\n                    if (!items[i].containerItemEl) {\n                        items[i].containerItemEl = items[i].getFieldEl();\n                    }\n                }\n\n                model.items = items;\n\n                callback(model);\n\n            });\n        },\n\n        /**\n         * Called before the container is rendered.\n         *\n         * @extension-point\n         *\n         * @param model\n         * @param callback\n         */\n        beforeRenderContainer: function(model, callback)\n        {\n            var self = this;\n\n            callback();\n        },\n\n        /**\n         * Renders the container into the field container.\n         *\n         * @extension-point\n         *\n         * @param model\n         * @param callback\n         */\n        renderContainer: function(model, callback)\n        {\n            var container = null;\n\n            if (this.containerDescriptor)\n            {\n                container = Alpaca.tmpl(this.containerDescriptor, model);\n            }\n\n            callback(container);\n        },\n\n        /**\n         * Called after the container is rendered.\n         *\n         * @extension-point\n         *\n         * @param model\n         * @param callback\n         */\n        afterRenderContainer: function(model, callback)\n        {\n            var self = this;\n\n            self.beforeApplyCreatedItems(model, function() {\n                self.applyCreatedItems(model, function () {\n                    self.afterApplyCreatedItems(model, function () {\n                        callback();\n                    });\n                });\n            });\n        },\n\n        /**\n         * @see Alpaca.Field#postRender\n         */\n        postRender: function(callback)\n        {\n            var self = this;\n\n            this.base(function() {\n\n                callback();\n\n            });\n        },\n\n        /**\n         * @see Alpaca.Field#initEvents\n         */\n        initEvents: function()\n        {\n            var self = this;\n\n            this.base();\n\n            /*\n            if (self.options.collapsible)\n            {\n                // CALLBACK: \"collapsible\"\n                self.fireCallback(\"collapsible\");\n            }\n            */\n        },\n\n        /**\n         * Creates any sub-items for this container.\n         *\n         * @extension_point\n         *\n         * @param callback\n         */\n        createItems: function(callback)\n        {\n            callback();\n        },\n\n        beforeApplyCreatedItems: function(model, callback)\n        {\n            callback();\n        },\n\n        applyCreatedItems: function(model, callback)\n        {\n            var self = this;\n\n            var layoutBindings = null;\n            if (self.isTopLevel() && self.view.getLayout())\n            {\n                layoutBindings = self.view.getLayout().bindings;\n\n                // if layout and bindings not provided, assume a default strategy\n                if (!layoutBindings && self.view.getLayout().templateDescriptor && model.items.length > 0)\n                {\n                    layoutBindings = {};\n\n                    for (var i = 0; i < model.items.length; i++)\n                    {\n                        var name = model.items[i].name;\n\n                        layoutBindings[name] = \"[data-alpaca-layout-binding='\" + name + \"']\";\n                    }\n                }\n\n            }\n\n            if (model.items.length > 0)\n            {\n                $(self.container).addClass(\"alpaca-container-has-items\");\n                $(self.container).attr(\"data-alpaca-container-item-count\", model.items.length);\n            }\n            else\n            {\n                $(self.container).removeClass(\"alpaca-container-has-items\");\n                $(self.container).removeAttr(\"data-alpaca-container-item-count\");\n            }\n\n            for (var i = 0; i < model.items.length; i++)\n            {\n                var item = model.items[i];\n\n                // find the insertion point\n                var insertionPoint = $(self.container).find(\".\" + Alpaca.MARKER_CLASS_CONTAINER_FIELD_ITEM + \"[\" + Alpaca.MARKER_DATA_CONTAINER_FIELD_ITEM_KEY + \"='\" + item.name + \"']\");\n                if (!layoutBindings)\n                {\n                    var holder = $(insertionPoint).parent();\n\n                    $(insertionPoint).replaceWith(item.containerItemEl);\n\n                    // reset domEl to allow for refresh\n                    item.domEl = holder;\n                }\n                else\n                {\n                    // use a layout\n                    var bindingId = layoutBindings[item.name];\n                    if (bindingId)\n                    {\n                        var holder = $(bindingId, self.field);\n                        if (holder.length == 0)\n                        {\n                            // legacy support, fallback to ID based\n                            try {\n                                holder = $('#' + bindingId, self.field);\n                            } catch (e) { }\n                        }\n                        if (holder.length > 0)\n                        {\n                            // create a wrapper (which will serve as the domEl)\n                            item.domEl = $(\"<div></div>\");\n                            $(item.domEl).addClass(\"alpaca-layout-binding-holder\");\n                            $(item.domEl).attr(\"alpaca-layout-binding-field-name\", item.name);\n                            holder.append(item.domEl);\n                            item.domEl.append(item.containerItemEl);\n                        }\n                    }\n\n                    // remove insertion point\n                    $(insertionPoint).remove();\n                }\n\n                $(item.containerItemEl).addClass(\"alpaca-container-item\");\n\n                if (i === 0)\n                {\n                    $(item.containerItemEl).addClass(\"alpaca-container-item-first\");\n                }\n\n                if (i + 1 === model.items.length)\n                {\n                    $(item.containerItemEl).addClass(\"alpaca-container-item-last\");\n                }\n\n                $(item.containerItemEl).attr(\"data-alpaca-container-item-index\", i);\n                $(item.containerItemEl).attr(\"data-alpaca-container-item-name\", item.name);\n                $(item.containerItemEl).attr(\"data-alpaca-container-item-parent-field-id\", self.getId());\n\n                // register the child\n                self.registerChild(item, i);\n            }\n\n            if (self.options.collapsible)\n            {\n                // CALLBACK: \"collapsible\"\n                self.fireCallback(\"collapsible\");\n            }\n\n            self.triggerUpdate();\n\n            callback();\n        },\n\n        afterApplyCreatedItems: function(model, callback)\n        {\n            callback();\n        },\n\n        /**\n         * Helper method to add child field.\n         *\n         * @param {Alpaca.Control} child Child field to be added.\n         * @param {Integer} index Index of the new child.\n         */\n        registerChild: function(child, index)\n        {\n            if (!Alpaca.isEmpty(index))\n            {\n                this.children.splice(index, 0, child);\n            }\n            else\n            {\n                this.children.push(child);\n            }\n\n            this.childrenById[child.getId()] = child;\n            if (child.propertyId)\n            {\n                this.childrenByPropertyId[child.propertyId] = child;\n            }\n\n            child.parent = this;\n        },\n\n        /**\n         * Helper method to remove child field.\n         *\n         * @param index\n         */\n        unregisterChild: function(index)\n        {\n            var child = this.children[index];\n            if (!child)\n            {\n                return;\n            }\n\n            if (!Alpaca.isEmpty(index))\n            {\n                this.children.splice(index, 1);\n            }\n\n            delete this.childrenById[child.getId()];\n            if (child.propertyId)\n            {\n                delete this.childrenByPropertyId[child.propertyId];\n            }\n\n            child.parent = null;\n        },\n\n        /**\n         * This method gets invoked after items are dynamically added, removed or moved around in the child chain.\n         * It adjusts classes on child DOM elements to make sure they're correct.\n         */\n        updateDOMElement: function()\n        {\n            var self = this;\n\n            this.base();\n\n            if (self.children.length > 0)\n            {\n                $(self.getContainerEl()).addClass(\"alpaca-container-has-items\");\n                $(self.getContainerEl()).attr(\"data-alpaca-container-item-count\", self.children.length);\n            }\n            else\n            {\n                $(self.getContainerEl()).removeClass(\"alpaca-container-has-items\");\n                $(self.getContainerEl()).removeAttr(\"data-alpaca-container-item-count\");\n            }\n\n            for (var i = 0; i < self.children.length; i++)\n            {\n                var child = self.children[i];\n\n                // set path if not set\n                if (!child.path)\n                {\n                    if (child.schema.type === \"array\")\n                    {\n                        child.path = self.path + \"[\" + i + \"]\";\n                    }\n                    else\n                    {\n                        child.path = self.path + \"/\" + child.propertyId;\n                    }\n                }\n\n                child.calculateName();\n\n                $(child.containerItemEl).removeClass(\"alpaca-container-item-first\");\n                $(child.containerItemEl).removeClass(\"alpaca-container-item-last\");\n                $(child.containerItemEl).removeClass(\"alpaca-container-item-index\");\n                $(child.containerItemEl).removeClass(\"alpaca-container-item-key\");\n\n                $(child.containerItemEl).addClass(\"alpaca-container-item\");\n\n                if (i === 0)\n                {\n                    $(child.containerItemEl).addClass(\"alpaca-container-item-first\");\n                }\n                if (i + 1 === self.children.length)\n                {\n                    $(child.containerItemEl).addClass(\"alpaca-container-item-last\");\n                }\n\n                $(child.containerItemEl).attr(\"data-alpaca-container-item-index\", i);\n                $(child.containerItemEl).attr(\"data-alpaca-container-item-name\", child.name);\n                $(child.containerItemEl).attr(\"data-alpaca-container-item-parent-field-id\", self.getId());\n\n                self.updateChildDOMWrapperElement(i, child);\n\n                child.updateDOMElement();\n            }\n        },\n\n        /**\n         * EXTENSION POINT that allows containers to update any custom wrapper elements for child controls.\n         *\n         * @param i\n         * @param child\n         */\n        updateChildDOMWrapperElement: function(i, child)\n        {\n\n        },\n\n        /**\n         * Gets called whenever an item is dynamically added or removed from a container.  This allows all of the\n         * container markers to refresh on the DOM.\n         */\n        handleRepositionDOMRefresh: function()\n        {\n            var self = this;\n\n            if (self.getParent())\n            {\n                // call update dom markers for parent which will trickle down to to cover this field and our siblings\n                self.getParent().updateDOMElement();\n            }\n            else\n            {\n                // just ourselves\n                self.updateDOMElement();\n            }\n        },\n\n        /**\n         * Propagates signal down to all children.\n         * @override\n         */\n        onDependentReveal: function()\n        {\n            for (var i = 0; i < this.children.length; i++)\n            {\n                this.children[i].onDependentReveal();\n            }\n        },\n\n        /**\n         * Propagates signal down to all children.\n         * @override\n         */\n        onDependentConceal: function()\n        {\n            for (var i = 0; i < this.children.length; i++)\n            {\n                this.children[i].onDependentConceal();\n            }\n        },\n\n        /**\n         * Focus an element in the container.  Find the first invalid element or if no invalid elements, pick\n         * the first child.  If a callback is provided, the callback is fired and passed the control element\n         * that received the focus.\n         */\n        focus: function(onFocusCallback)\n        {\n            var self = this;\n\n            if (this.isDisplayOnly())\n            {\n                if (onFocusCallback) {\n                    onFocusCallback();\n                }\n                return;\n            }\n\n            this.base();\n\n            var invalidIndex = -1;\n\n            // use the dom to create an array that orders things as they are laid out on the page\n            var pageOrderedChildren = [];\n            var el = this.getContainerEl();\n            if (this.form) {\n                el = this.form.getFormEl();\n            }\n            $(el).find(\".alpaca-container-item[data-alpaca-container-item-parent-field-id='\" + this.getId() + \"']\").each(function() {\n                var childIndex = $(this).attr(\"data-alpaca-container-item-index\");\n                pageOrderedChildren.push(self.children[childIndex]);\n            });\n\n            // walk the ordered children and find first invalid\n            for (var i = 0; i < pageOrderedChildren.length; i++)\n            {\n                if (pageOrderedChildren[i])\n                {\n                    if (!pageOrderedChildren[i].isValid(true) &&\n                        pageOrderedChildren[i].isControlField &&\n                        pageOrderedChildren[i].isAutoFocusable() &&\n                        !pageOrderedChildren[i].options.readonly)\n                    {\n                        invalidIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            // if we didn't find anything invalid, just focus on first item\n            if (invalidIndex === -1 && pageOrderedChildren.length > 0)\n            {\n                invalidIndex = 0;\n            }\n\n            // do the focus if we found something\n            if (invalidIndex > -1)\n            {\n                pageOrderedChildren[invalidIndex].focus();\n\n                if (onFocusCallback)\n                {\n                    onFocusCallback(pageOrderedChildren[invalidIndex]);\n                }\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#disable\n         */\n        disable: function()\n        {\n            if (this.options.readonly) {\n                return;\n            }\n\n            this.base();\n\n            for (var i = 0; i < this.children.length; i++)\n            {\n                this.children[i].disable();\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#enable\n         */\n        enable: function()\n        {\n            if (this.options.readonly) {\n                return;\n            }\n\n            this.base();\n\n            for (var i = 0; i < this.children.length; i++)\n            {\n                this.children[i].enable();\n            }\n        },\n\n        /**\n         * Returns the value of this field.\n         *\n         * @returns {Any} value Field value.\n         */\n        getValue: function()\n        {\n            var self = this;\n\n            var value = self.getContainerValue();\n\n            /*\n            if (self.isDisplayOnly())\n            {\n                if (value)\n                {\n                    value = JSON.stringify(value, null, \"  \");\n                }\n            }\n            */\n\n            return value;\n        },\n\n        /**\n         * Extension point\n         */\n        getContainerValue: function()\n        {\n            return null;\n        },\n\n        firstChild: function() {\n            var child = null;\n\n            if (this.children.length > 0) {\n                child = this.children[0];\n            }\n\n            return child;\n        },\n\n        lastChild: function() {\n            var child = null;\n\n            if (this.children.length > 0) {\n                child = this.children[this.children.length - 1];\n            }\n\n            return child;\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @private\n         * @see Alpaca.Field#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"lazyLoading\": {\n                        \"title\": \"Lazy Loading\",\n                        \"description\": \"Child fields will only be rendered when the fieldset is expanded if this option is set true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"collapsible\": {\n                        \"title\": \"Collapsible\",\n                        \"description\": \"Field set is collapsible if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"collapsed\": {\n                        \"title\": \"Collapsed\",\n                        \"description\": \"Field set is initially collapsed if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"legendStyle\": {\n                        \"title\": \"Legend Style\",\n                        \"description\": \"Field set legend style.\",\n                        \"type\": \"string\",\n                        \"enum\":[\"button\",\"link\"],\n                        \"default\": \"button\"\n                    },\n                    \"animate\": {\n                        \"title\": \"Animate movements and transitions\",\n                        \"description\": \"Up and down transitions will be animated\",\n                        \"type\": \"boolean\",\n                        \"default\": true\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Field#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"lazyLoading\": {\n                        \"rightLabel\": \"Lazy loading child fields ?\",\n                        \"helper\": \"Lazy loading will be enabled if checked.\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"collapsible\": {\n                        \"rightLabel\": \"Field set collapsible ?\",\n                        \"helper\": \"Field set is collapsible if checked.\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"collapsed\": {\n                        \"rightLabel\": \"Field set initially collapsed ?\",\n                        \"description\": \"Field set is initially collapsed if checked.\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"legendStyle\": {\n                        \"type\":\"select\"\n                    },\n                    \"animate\": {\n                        \"rightLabel\": \"Animate movements and transitions\",\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        }\n        /* end_builder_helpers */\n    });\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Form = Base.extend(\n    /**\n     * @lends Alpaca.Form.prototype\n     */\n    {\n        /**\n         * @constructs\n         *\n         * @class This class is for managing HTML form control.\n         *\n         * @param {Object} domEl Field container.\n         * @param {Object} options Field options.\n         * @param {Object|String} view Field view.\n         * @param {Alpaca.Connector} connector Field connector.\n         * @param {Function} errorCallback Error callback.\n         */\n        constructor: function(domEl, options, viewId, connector, errorCallback) {\n\n            // container\n            this.domEl = domEl;\n\n            // parent\n            this.parent = null;\n\n            this.connector = connector;\n            this.errorCallback = errorCallback;\n\n            // options\n            this.options = options;\n\n            if (this.options.attributes)\n            {\n                this.attributes = this.options.attributes;\n            }\n            else\n            {\n                this.attributes = {};\n            }\n\n            if (this.options.buttons)\n            {\n                if (this.options.buttons.submit)\n                {\n                    if (!this.options.buttons.submit.type)\n                    {\n                        this.options.buttons.submit.type = 'submit';\n                    }\n\n                    if (!this.options.buttons.submit.name)\n                    {\n                        this.options.buttons.submit.name = 'submit';\n                    }\n\n                    if (!this.options.buttons.submit.value)\n                    {\n                        this.options.buttons.submit.value = 'Submit';\n                    }\n                }\n\n                if (this.options.buttons.reset)\n                {\n                    if (!this.options.buttons.reset.type)\n                    {\n                        this.options.buttons.reset.type = 'reset';\n                    }\n                    if (!this.options.buttons.reset.name)\n                    {\n                        this.options.buttons.reset.name = 'reset';\n                    }\n                    if (!this.options.buttons.reset.value)\n                    {\n                        this.options.buttons.reset.value = 'Reset';\n                    }\n                }\n\n                // some general correction\n                for (var k in this.options.buttons)\n                {\n                    if (this.options.buttons[k].label)\n                    {\n                        this.options.buttons[k].value = this.options.buttons[k].label;\n                    }\n                    if (this.options.buttons[k].title)\n                    {\n                        this.options.buttons[k].value = this.options.buttons[k].title;\n                    }\n                    if (!this.options.buttons[k].type)\n                    {\n                        this.options.buttons[k].type = \"button\";\n                    }\n                }\n            }\n\n            if (this.attributes.id)\n            {\n                this.id = this.attributes.id;\n            }\n            else\n            {\n                this.id = Alpaca.generateId();\n                this.attributes.id = this.id;\n            }\n\n            // if we have a submit button specified, and toggleSubmitValidState isn't defined, set to true by default\n            // don't allow the form to submit unless valid\n            if (this.options.buttons && this.options.buttons.submit && Alpaca.isUndefined(this.options.toggleSubmitValidState))\n            {\n                this.options.toggleSubmitValidState = true;\n            }\n\n            this.viewType = options.viewType;\n\n            // set a runtime view\n            this.view = new Alpaca.RuntimeView(viewId, this);\n\n            // for each button, make sure that classes is set minimally to view.styles.button\n            for (var k in this.options.buttons)\n            {\n                if (!this.options.buttons[k].styles) {\n                    this.options.buttons[k].styles = this.view.styles.button;\n                }\n            }\n\n        },\n\n        /**\n         * Renders this form into the container.\n         *\n         * @param {Function} callback\n         */\n        render: function(callback)\n        {\n            var self = this;\n\n            // load the appropriate template and render it\n            this.processRender(this.domEl, function() {\n\n                // bind our field dom element into the domEl\n                self.form.appendTo(self.domEl);\n\n                // add default class\n                self.form.addClass(\"alpaca-form\");\n\n                // CALLBACK: \"form\"\n                self.fireCallback(\"form\");\n\n                // execute callback\n                callback(self);\n            });\n        },\n\n        afterInitialize: function()\n        {\n            var self = this;\n\n            if (self.options.toggleSubmitValidState) {\n\n                // adjust submit button state\n                self.adjustSubmitButtonState();\n\n            }\n\n        },\n\n        /**\n         * Determines whether the top control is entirely valid.\n         *\n         * @return {*}\n         */\n        isFormValid: function()\n        {\n            // re-compute validation for the full control set\n            this.topControl.validate(true);\n\n            var valid = this.topControl.isValid(true);\n            //this.refreshValidationState(true);\n\n            return valid;\n        },\n\n        isValid: function()\n        {\n            return this.isFormValid();\n        },\n\n        validate: function(children)\n        {\n            return this.topControl.validate(children);\n        },\n\n        enableSubmitButton: function()\n        {\n            $(\".alpaca-form-button-submit\").attrProp(\"disabled\", false);\n\n            if ($.mobile)\n            {\n                try { $(\".alpaca-form-button-submit\").button('refresh'); } catch (e) { }\n            }\n        },\n\n        disableSubmitButton: function()\n        {\n            $(\".alpaca-form-button-submit\").attrProp(\"disabled\", true);\n\n            if ($.mobile)\n            {\n                try { $(\".alpaca-form-button-submit\").button('refresh'); } catch (e) { }\n            }\n        },\n\n        adjustSubmitButtonState: function()\n        {\n            this.disableSubmitButton();\n\n            if (this.isFormValid())\n            {\n                this.enableSubmitButton();\n            }\n        },\n\n        /**\n         * Responsible for fetching any templates needed so as to render the\n         * current mode for this field.\n         *\n         * Once completed, the onSuccess method is called.\n         *\n         * @param {Object} parentEl Field container.\n         * @param {Function} callback\n         */\n        processRender: function(parentEl, callback)\n        {\n            var self = this;\n\n            // lookup the template we should use to render\n            this.formDescriptor = this.view.getTemplateDescriptor(\"form\");\n            if (!this.formDescriptor)\n            {\n                return Alpaca.throwErrorWithCallback(\"Could not find template descriptor: form\");\n            }\n\n            var renderedDomElement = Alpaca.tmpl(this.formDescriptor, {\n                id: this.getId(),\n                options: this.options,\n                view: this.view\n            });\n            renderedDomElement.appendTo(parentEl);\n\n            this.form = renderedDomElement;\n\n            // find our insertion point\n            // this is marked by the handlebars helper\n            this.formFieldsContainer = $(this.form).find(\".\" + Alpaca.MARKER_CLASS_FORM_ITEMS_FIELD);\n            this.formFieldsContainer.removeClass(Alpaca.MARKER_CLASS_FORM_ITEMS_FIELD);\n\n            if (Alpaca.isEmpty(this.form.attr(\"id\")))\n            {\n                this.form.attr(\"id\", this.getId() + \"-form-outer\");\n            }\n            if (Alpaca.isEmpty(this.form.attr(\"data-alpaca-form-id\")))\n            {\n                this.form.attr(\"data-alpaca-form-id\", this.getId());\n            }\n\n            // the form field\n            $(parentEl).find(\"form\").attr(this.attributes);\n\n            // populate the buttons as well\n            this.buttons = {};\n            $(parentEl).find(\".alpaca-form-button\").each(function() {\n\n                $(this).click(function(e) {\n                    $(this).attr(\"button-pushed\", true);\n                });\n\n                // custom click handler?\n                var key = $(this).attr(\"data-key\");\n                if (key)\n                {\n                    var buttonConfig = self.options.buttons[key];\n                    if (buttonConfig)\n                    {\n                        if (buttonConfig.click)\n                        {\n                            $(this).click(function(form, handler) {\n                                return function(e) {\n                                    e.preventDefault();\n                                    handler.call(form, e);\n                                }\n                            }(self, buttonConfig.click));\n                        }\n                    }\n                }\n            });\n\n            callback();\n        },\n\n        /**\n         * Returns the id of the form.\n         *\n         * @returns {String} Form id\n         */\n        getId: function()\n        {\n            return this.id;\n        },\n\n        /**\n         * Returns form type.\n         *\n         * @returns {String} Form type.\n         */\n        getType: function()\n        {\n            return this.type;\n        },\n\n        /**\n         * Returns this form's parent.\n         *\n         * @returns {Object} Form parent.\n         */\n        getParent: function()\n        {\n            return this.parent;\n        },\n\n        /**\n         * Returns the value of the JSON rendered by this form.\n         *\n         * @returns {Any} Value of the JSON rendered by this form.\n         */\n        getValue: function()\n        {\n            return this.topControl.getValue();\n        },\n\n        /**\n         * Sets the value of the JSON to be rendered by this form.\n         *\n         * @param {Any} value Value to be set.\n         */\n        setValue: function(value)\n        {\n            this.topControl.setValue(value);\n        },\n\n        /**\n         * Initializes events handling (Form Submission) for this form.\n         */\n        initEvents: function()\n        {\n            var _this = this;\n\n            var formTag = $(this.domEl).find(\"form\");\n\n            var v = this.getValue();\n            $(formTag).submit(v, function(e) {\n                return _this.onSubmit(e, _this);\n            });\n\n            // listen for fieldupdates and determine whether the form is valid.\n            // if so, enable the submit button...\n            // otherwise, disable it\n            if (this.options.toggleSubmitValidState)\n            {\n                $(_this.topControl.getFieldEl()).bind(\"fieldupdate\", function() {\n                    _this.adjustSubmitButtonState();\n                });\n\n                $(_this.topControl.getFieldEl()).bind(\"fieldkeyup\", function() {\n                    _this.adjustSubmitButtonState();\n                });\n\n                $(_this.topControl.getFieldEl()).bind(\"fieldblur\", function() {\n                    _this.adjustSubmitButtonState();\n                });\n\n            }\n        },\n\n        getButtonEl: function(buttonId)\n        {\n            return $(this.domEl).find(\".alpaca-form-button-\" + buttonId);\n        },\n\n        /**\n         * Handles form submit events.\n         *\n         * @param {Object} e Submit event.\n         * @param {Object} form the form\n         */\n        onSubmit: function(e, form)\n        {\n            if (!this.isFormValid())\n            {\n                e.stopPropagation();\n\n                this.refreshValidationState(true);\n\n                return false;\n            }\n\n            if (this.submitHandler)\n            {\n                e.stopPropagation();\n\n                var v = this.submitHandler(e, form);\n                if (Alpaca.isUndefined(v)) {\n                    v = false;\n                }\n\n                return v;\n            }\n        },\n\n        /**\n         * Registers a custom submit handler.\n         *\n         * @param {Object} func Submit handler to be registered.\n         */\n        registerSubmitHandler: function (func)\n        {\n            if (Alpaca.isFunction(func))\n            {\n                this.submitHandler = func;\n            }\n        },\n\n        /**\n         * Displays validation information of all fields of this form.\n         *\n         * @param {Boolean} children whether to render validation state for child fields\n         *\n         * @returns {Object} Form validation state.\n         */\n        refreshValidationState: function(children, callback)\n        {\n            this.topControl.refreshValidationState(children, callback);\n        },\n\n        /**\n         * Disables this form.\n         */\n        disable: function()\n        {\n            this.topControl.disable();\n        },\n\n        /**\n         * Enables this form.\n         */\n        enable: function()\n        {\n            this.topControl.enable();\n        },\n\n        /**\n         * Focuses on this form.\n         *\n         * If a callback is provided, the callback receives the focused control.\n         */\n        focus: function(onFocusCallback)\n        {\n            this.topControl.focus(function(controlWithFocus) {\n                if (onFocusCallback)\n                {\n                    onFocusCallback(controlWithFocus);\n                }\n            });\n        },\n\n        /**\n         * Purge any event listeners and remove the form from the DOM.\n         *\n         * @param [Boolean] skipParent when true, the form cleans up without traversing through parent child controls\n         */\n        destroy: function(skipParent)\n        {\n            this.getFormEl().remove();\n\n            // we allow form.destroy() which tells parent control to destroy\n            // if skipParent == true, then we do not call up (invoked from container)\n            if (!skipParent && this.parent)\n            {\n                this.parent.destroy();\n            }\n        },\n\n        /**\n         * Shows the form.\n         */\n        show: function()\n        {\n            this.getFormEl().css({\n                \"display\": \"\"\n            });\n        },\n\n        /**\n         * Hides the form.\n         */\n        hide: function()\n        {\n            this.getFormEl().css({\n                \"display\": \"none\"\n            });\n        },\n\n        /**\n         * Clears the form and resets values of its fields.\n         *\n         * @param stopUpdateTrigger If false, triggers the update event of this event.\n         */\n        clear: function(stopUpdateTrigger)\n        {\n            this.topControl.clear(stopUpdateTrigger);\n        },\n\n        /**\n         * Checks if form is empty.\n         *\n         * @returns {Boolean} True if the form is empty, false otherwise.\n         */\n        isEmpty: function()\n        {\n            return this.topControl.isEmpty();\n        },\n\n        /**\n         * Fires a view callback for the current form.\n         *\n         * @param id\n         * @param arg1\n         * @param arg2\n         * @param arg3\n         * @param arg4\n         * @param arg5\n         */\n        fireCallback: function(id, arg1, arg2, arg3, arg4, arg5)\n        {\n            this.view.fireCallback(this, id, arg1, arg2, arg3, arg4, arg5);\n        },\n\n        /**\n         * Retrieves the form element.\n         *\n         * @returns {Object} The rendered DOM element.\n         */\n        getFormEl: function() {\n            return this.form;\n        },\n\n        /**\n         * Performs a regular old submit.\n         */\n        submit: function()\n        {\n            this.form.submit();\n        },\n\n        /**\n         * Fires the submit in the background and hands back the jQuery promise.\n         *\n         * An optional config can be passed in to control the underlying jQuery ajax XHR.\n         *\n         * @returns {*}\n         */\n        ajaxSubmit: function(config)\n        {\n            var self = this;\n\n            if (!config) {\n                config = {};\n            }\n\n            config.url = self.options.attributes.action;\n            config.type = self.options.attributes.method;\n\n            if (!config.data) {\n                config.data = this.getValue();\n            }\n\n            if (!config.dataType) {\n                config.dataType = \"json\";\n            }\n            if (!config.headers) {\n                config.headers = {};\n            }\n\n            // support CSRF here\n            var csrfToken = self.determineCsrfToken();\n            if (csrfToken) {\n                config.headers[Alpaca.CSRF_HEADER_NAME] = csrfToken;\n            }\n\n            return $.ajax(config);\n        },\n\n        determineCsrfToken: function()\n        {\n            // is there a direct token specified?\n            var csrfToken = Alpaca.CSRF_TOKEN;\n            if (!csrfToken)\n            {\n                // is there a cookie that we can pull the value from?\n                for (var t = 0; t < Alpaca.CSRF_COOKIE_NAMES.length; t++)\n                {\n                    var cookieName = Alpaca.CSRF_COOKIE_NAMES[t];\n\n                    var cookieValue = Alpaca.readCookie(cookieName);\n                    if (cookieValue)\n                    {\n                        csrfToken = cookieValue;\n                        break;\n                    }\n                }\n            }\n\n            return csrfToken;\n        }\n\n    });\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    var ONE_HOUR = 3600000;\n\n    Alpaca.Connector = Base.extend(\n    /**\n     * @lends Alpaca.Connector.prototype\n     */\n    {\n        /**\n         * @constructs\n         * @class Connects Alpaca to remote data stores.\n\n         * @param {String} id Connector ID\n         * @param {Object} config Connector Config\n         */\n        constructor: function(id, config)\n        {\n            this.id = id;\n            this.config = config;\n\n            // helper function to determine if a resource is a uri\n            this.isUri = function(resource)\n            {\n                return !Alpaca.isEmpty(resource) && Alpaca.isUri(resource);\n            };\n\n            this.cache = new AjaxCache('URL', true, ONE_HOUR);\n        },\n\n        /**\n         * Makes initial connections to data source.\n         *\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        connect: function (onSuccess, onError)\n        {\n            onSuccess();\n        },\n\n        /**\n         * Loads a template (HTML or Text).\n         *\n         * If the source is a URI, then it is loaded.\n         * If it is not a URI, then the source is simply handed back.\n         *\n         * @param {Object|String} source Source to be loaded.\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadTemplate : function (source, onSuccess, onError)\n        {\n            if (!Alpaca.isEmpty(source))\n            {\n                if (Alpaca.isUri(source))\n                {\n                    this.loadUri(source, false, function(loadedData) {\n\n                        if (onSuccess && Alpaca.isFunction(onSuccess))\n                        {\n                            onSuccess(loadedData);\n                        }\n\n                    }, function (loadError) {\n\n                        if (onError && Alpaca.isFunction(onError))\n                        {\n                            onError(loadError);\n                        }\n                    });\n                }\n                else\n                {\n                    onSuccess(source);\n                }\n            }\n            else\n            {\n                onError({\n                    \"message\":\"Empty data source.\",\n                    \"reason\": \"TEMPLATE_LOADING_ERROR\"\n                });\n            }\n        },\n\n        /**\n         * Loads JSON data.\n         *\n         * @param {Object|String} resource Resource to be loaded\n         * @param {Object} resources Map of resources\n         * @param {Function} onSuccess onSuccess callback\n         * @param {Function} onError onError callback\n         */\n        loadData: function (resource, resources, successCallback, errorCallback)\n        {\n            return this._handleLoadJsonResource(resource, successCallback, errorCallback);\n        },\n\n        /**\n         * Loads JSON schema.\n         *\n         * @param {Object|String} resource Resource to be loaded\n         * @param {Object} resources Map of resources\n         * @param {Function} onSuccess onSuccess callback\n         * @param {Function} onError onError callback\n         */\n        loadSchema: function (resource, resources, successCallback, errorCallback)\n        {\n            return this._handleLoadJsonResource(resource, successCallback, errorCallback);\n        },\n\n        /**\n         * Loads JSON options.\n         *\n         * @param {Object|String} resource Resource to be loaded\n         * @param {Object} resources Map of resources\n         * @param {Function} onSuccess onSuccess callback\n         * @param {Function} onError onError callback\n         */\n        loadOptions: function (resource, resources, successCallback, errorCallback)\n        {\n            return this._handleLoadJsonResource(resource, successCallback, errorCallback);\n        },\n\n        /**\n         * Loads JSON view.\n         *\n         * @param {Object|String} resource Resource to be loaded\n         * @param {Object} resources Map of resources\n         * @param {Function} onSuccess onSuccess callback\n         * @param {Function} onError onError callback\n         */\n        loadView: function (resource, resources, successCallback, errorCallback)\n        {\n            return this._handleLoadJsonResource(resource, successCallback, errorCallback);\n        },\n\n        /**\n         * Loads schema, form, view and data in a single call.\n         *\n         * @param {Object} resources resources\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadAll: function (resources, onSuccess, onError)\n        {\n            var self = this;\n\n            var onConnectSuccess = function() {\n\n                var dataSource = resources.dataSource;\n                var schemaSource = resources.schemaSource;\n                var optionsSource = resources.optionsSource;\n                var viewSource = resources.viewSource;\n\n                // we allow \"schema\" to contain a URI as well (backwards-compatibility)\n                if (!schemaSource && typeof(resources.schema) === \"string\")\n                {\n                    schemaSource = resources.schema;\n                }\n\n                // we allow \"options\" to contain a URI as well (backwards-compatibility)\n                if (!optionsSource && typeof(resources.options) === \"string\")\n                {\n                    optionsSource = resources.options;\n                }\n\n                // we allow \"view\" to contain a URI as well (backwards-compatibility)\n                if (!viewSource && typeof(resources.view) === \"string\")\n                {\n                    viewSource = resources.view;\n                }\n\n                var loaded = {};\n\n                var loadCounter = 0;\n                var invocationCount = 0;\n\n                var successCallback = function()\n                {\n                    if (loadCounter === invocationCount)\n                    {\n                        if (onSuccess && Alpaca.isFunction(onSuccess))\n                        {\n                            onSuccess(loaded.data, loaded.options, loaded.schema, loaded.view);\n                        }\n                    }\n                };\n\n                var errorCallback = function (loadError)\n                {\n                    if (onError && Alpaca.isFunction(onError))\n                    {\n                        onError(loadError);\n                    }\n                };\n\n                // count out the total # of invokes we're going to fire off\n                if (dataSource)\n                {\n                    invocationCount++;\n                }\n                if (schemaSource)\n                {\n                    invocationCount++;\n                }\n                if (optionsSource)\n                {\n                    invocationCount++;\n                }\n                if (viewSource)\n                {\n                    invocationCount++;\n                }\n                if (invocationCount === 0)\n                {\n                    // nothing to invoke, so just hand back\n                    successCallback();\n                    return;\n                }\n\n                var doMerge = function(p, v1, v2)\n                {\n                    loaded[p] = v1;\n\n                    if (v2)\n                    {\n                        if ((typeof(loaded[p]) === \"object\") && (typeof(v2) === \"object\"))\n                        {\n                            Alpaca.mergeObject(loaded[p], v2);\n                        }\n                        else\n                        {\n                            loaded[p] = v2;\n                        }\n                    }\n                };\n\n                // fire off all of the invokes\n                if (dataSource)\n                {\n                    self.loadData(dataSource, resources, function(data) {\n\n                        doMerge(\"data\", resources.data, data);\n\n                        loadCounter++;\n                        successCallback();\n                    }, errorCallback);\n                }\n                if (schemaSource)\n                {\n                    self.loadSchema(schemaSource, resources, function(schema) {\n\n                        doMerge(\"schema\", resources.schema, schema);\n\n                        loadCounter++;\n                        successCallback();\n                    }, errorCallback);\n                }\n                if (optionsSource)\n                {\n                    self.loadOptions(optionsSource, resources, function(options) {\n\n                        doMerge(\"options\", resources.options, options);\n\n                        loadCounter++;\n                        successCallback();\n                    }, errorCallback);\n                }\n                if (viewSource)\n                {\n                    self.loadView(viewSource, resources, function(view) {\n\n                        doMerge(\"view\", resources.view, view);\n\n                        loadCounter++;\n                        successCallback();\n                    }, errorCallback);\n                }\n\n            };\n\n            var onConnectError  = function(err) {\n                if (onError && Alpaca.isFunction(onError)) {\n                    onError(err);\n                }\n            };\n\n            self.connect(onConnectSuccess, onConnectError);\n        },\n\n        /**\n         * Loads a JSON through Ajax call.\n         *\n         * @param {String} uri location of the json document\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadJson : function(uri, onSuccess, onError) {\n            this.loadUri(uri, true, onSuccess, onError);\n        } ,\n\n        /**\n         * Extension point.  Set up default ajax configuration for URL retrieval.\n         *\n         * @param uri\n         * @param isJson\n         * @returns {{url: *, type: string}}\n         */\n        buildAjaxConfig: function(uri, isJson)\n        {\n            var ajaxConfig = {\n                \"url\": uri,\n                \"type\": \"get\"\n            };\n\n            if (isJson) {\n                ajaxConfig.dataType = \"json\";\n            } else {\n                ajaxConfig.dataType = \"text\";\n            }\n\n            return ajaxConfig;\n        },\n\n        /**\n         * Loads a general document through Ajax call.\n         *\n         * This uses jQuery to perform the Ajax call.  If you need to customize connectivity to your own remote server,\n         * this would be the appropriate place to do so.\n         *\n         * @param {String} uri uri to be loaded\n         * @param {Boolean} isJson Whether the document is a JSON or not.\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadUri : function(uri, isJson, onSuccess, onError) {\n\n            var self = this;\n\n            var ajaxConfig = self.buildAjaxConfig(uri, isJson);\n\n            ajaxConfig[\"success\"] = function(jsonDocument) {\n\n                self.cache.put(uri, jsonDocument);\n\n                if (onSuccess && Alpaca.isFunction(onSuccess)) {\n                    onSuccess(jsonDocument);\n                }\n            };\n            ajaxConfig[\"error\"] = function(jqXHR, textStatus, errorThrown) {\n                if (onError && Alpaca.isFunction(onError)) {\n                    onError({\n                        \"message\":\"Unable to load data from uri : \" + uri,\n                        \"stage\": \"DATA_LOADING_ERROR\",\n                        \"details\": {\n                            \"jqXHR\" : jqXHR,\n                            \"textStatus\" : textStatus,\n                            \"errorThrown\" : errorThrown\n                        }\n                    });\n                }\n            };\n\n            var cachedDocument = self.cache.get(uri);\n\n            if (cachedDocument !== false && onSuccess && Alpaca.isFunction(onSuccess)) {\n                onSuccess(cachedDocument);\n            } else {\n                $.ajax(ajaxConfig);\n            }\n        },\n\n        /**\n         * Loads referenced JSON schema.\n         *\n         * @param {Object|String} resource Resource to be loaded.\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadReferenceSchema: function (resource, successCallback, errorCallback)\n        {\n            return this._handleLoadJsonResource(resource, successCallback, errorCallback);\n        },\n\n        /**\n         * Loads referenced JSON options.\n         *\n         * @param {Object|String} resource Resource to be loaded.\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadReferenceOptions: function (resource, successCallback, errorCallback)\n        {\n            return this._handleLoadJsonResource(resource, successCallback, errorCallback);\n        },\n\n        _handleLoadJsonResource: function (resource, successCallback, errorCallback)\n        {\n            if (this.isUri(resource))\n            {\n                this.loadJson(resource, function(loadedResource) {\n                    successCallback(loadedResource);\n                }, errorCallback);\n            }\n            else\n            {\n                successCallback(resource);\n            }\n        },\n\n        /**\n         * Loads data source (value/text) pairs from a remote source.\n         * This default implementation allows for config to be a string identifying a URL.\n         *\n         * @param config\n         * @param successCallback\n         * @param errorCallback\n         * @returns {*}\n         */\n        loadDataSource: function (config, successCallback, errorCallback)\n        {\n            return this._handleLoadDataSource(config, successCallback, errorCallback);\n        },\n\n        _handleLoadDataSource: function(config, successCallback, errorCallback)\n        {\n            var url = config;\n            if (Alpaca.isObject(url)) {\n                url = config.url;\n            }\n\n            return this._handleLoadJsonResource(url, successCallback, errorCallback);\n        }\n\n    });\n\n    Alpaca.registerConnectorClass(\"default\", Alpaca.Connector);\n\n\n\n\n\n\n\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // AJAX CACHE\n    //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n    /*!\n     * ajax-cache JavaScript Library v0.2.1\n     * http://code.google.com/p/ajax-cache/\n     *\n     * Includes few JSON methods (open source)\n     * http://www.json.org/js.html\n     *\n     * Date: 2010-08-03\n     */\n    var AjaxCache = function AjaxCache(type, on, lifetime) {\n        if (on) {\n            this.on = true;\n        } else {\n            this.on = false;\n        }\n\n        // set default cache lifetime\n        if (lifetime != null) {\n            this.defaultLifetime = lifetime;\n        }\n\n        // set type\n        this.type = type;\n\n        // set cache functions according to type\n        switch (this.type) {\n            case 'URL':\n                this.put = this.put_url;\n                break;\n            case 'GET':\n                this.put = this.put_GET;\n                break;\n        }\n\n    };\n\n    AjaxCache.prototype.on = false;\n    AjaxCache.prototype.type = undefined;\n    AjaxCache.prototype.defaultLifetime = 1800000; // 1800000=30min, 300000=5min, 30000=30sec\n    AjaxCache.prototype.items = {};\n\n    /**\n     * Caches the request and its response. Type: url\n     *\n     * @param url - url of ajax response\n     * @param response - ajax response\n     * @param lifetime - (optional) sets cache lifetime in miliseconds\n     * @return true on success\n     */\n    AjaxCache.prototype.put_url = function(url, response, lifetime) {\n        if (lifetime == null) {\n            lifetime = this.defaultLifetime;\n        }\n        var key = this.make_key(url);\n        this.items[key] = {};\n        this.items[key].key = key;\n        this.items[key].url = url;\n        this.items[key].response = response;\n        this.items[key].expire = (new Date().getTime()) + lifetime;\n        return true;\n    };\n\n    /**\n     * Caches the request and its response. Type: GET\n     *\n     * @param url - url of ajax response\n     * @param data - data params (query)\n     * @param response - ajax response\n     * @param lifetime - (optional) sets cache lifetime in miliseconds\n     * @return true on success\n     */\n    AjaxCache.prototype.put_GET = function(url, data, response, lifetime) {\n        if (lifetime == null) {\n            lifetime = this.defaultLifetime;\n        }\n        var key = this.make_key(url, [ data ]);\n        this.items[key] = {};\n        this.items[key].key = key;\n        this.items[key].url = url;\n        this.items[key].data = data;\n        this.items[key].response = response;\n        this.items[key].expire = (new Date().getTime()) + lifetime;\n        return true;\n    };\n\n    /**\n     * Get cached ajax response\n     *\n     * @param url - url of ajax response\n     * @param params - Array of additional parameters, to make key\n     * @return ajax response or false if such does not exist or is expired\n     */\n    AjaxCache.prototype.get = function(url, params) {\n        var key = this.make_key(url, params);\n\n        // if cache does not exist\n        if (this.items[key] == null) {\n            return false;\n        }\n\n        // if cache expired\n        if (this.items[key].expire < (new Date().getTime())) {\n            return false;\n        }\n\n        // everything is passed - lets return the response\n        return this.items[key].response;\n    };\n\n    /**\n     * Make unique key for each request depending on url and additional parameters\n     *\n     * @param url - url of ajax response\n     * @param params - Array of additional parameters, to make key\n     * @return unique key\n     */\n    AjaxCache.prototype.make_key = function(url, params) {\n        var key = url;\n        switch (this.type) {\n            case 'URL':\n                break;\n            case 'GET':\n                key += this.stringify(params[0]);\n                break;\n        }\n\n        return key;\n    };\n\n    /**\n     * Flush cache\n     *\n     * @return true on success\n     */\n    AjaxCache.prototype.flush = function() {\n        // flush all cache\n        cache.items = {};\n        return true;\n    };\n\n    /*\n     * Methods to stringify JavaScript/JSON objects.\n     *\n     * Taken from: http://www.json.org/js.html to be more exact, this file:\n     * http://www.json.org/json2.js copied on 2010-07-19\n     *\n     * Taken methods: stringify, quote and str\n     *\n     * Methods are slightly modified to best fit ajax-cache functionality\n     *\n     */\n    AjaxCache.prototype.stringify = function(value, replacer, space) {\n\n        // The stringify method takes a value and an optional replacer, and an\n        // optional\n        // space parameter, and returns a JSON text. The replacer can be a function\n        // that can replace values, or an array of strings that will select the\n        // keys.\n        // A default replacer method can be provided. Use of the space parameter can\n        // produce text that is more easily readable.\n\n        var i;\n        gap = '';\n        indent = '';\n\n        // If the space parameter is a number, make an indent string containing that\n        // many spaces.\n\n        if (typeof space === 'number') {\n            for (i = 0; i < space; i += 1) {\n                indent += ' ';\n            }\n\n            // If the space parameter is a string, it will be used as the indent\n            // string.\n\n        } else if (typeof space === 'string') {\n            indent = space;\n        }\n\n        // If there is a replacer, it must be a function or an array.\n        // Otherwise, throw an error.\n\n        rep = replacer;\n        if (replacer &&\n              typeof replacer !== 'function' &&\n              (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n            throw new Error('JSON.stringify');\n        }\n\n        // Make a fake root object containing our value under the key of ''.\n        // Return the result of stringifying the value.\n\n        return this.str('', {\n            '' : value\n        });\n    };\n\n    AjaxCache.prototype.quote = function(string) {\n\n        // If the string contains no control characters, no quote characters, and no\n        // backslash characters, then we can safely slap some quotes around it.\n        // Otherwise we must also replace the offending characters with safe escape\n        // sequences.\n\n        var escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n        escapable.lastIndex = 0;\n        return escapable.test(string) ? '\"' + string.replace(escapable,\n            function(a) {\n                var c = meta[a];\n                return typeof c === 'string' ? c : '\\\\u' + ('0000' + a\n                    .charCodeAt(0).toString(16)).slice(-4);\n            }) + '\"' : '\"' + string + '\"';\n    };\n\n    AjaxCache.prototype.str = function(key, holder) {\n\n        // Produce a string from holder[key].\n\n        var i, // The loop counter.\n            k, // The member key.\n            v, // The member value.\n            length, mind = gap, partial, value = holder[key];\n\n        // If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value &&\n            typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n            value = value.toJSON(key);\n        }\n\n        // If we were called with a replacer function, then call the replacer to\n        // obtain a replacement value.\n\n        if (typeof rep === 'function') {\n            value = rep.call(holder, key, value);\n        }\n\n        // What happens next depends on the value's type.\n\n        switch (typeof value) {\n            case 'string':\n                return this.quote(value);\n\n            case 'number':\n\n                // JSON numbers must be finite. Encode non-finite numbers as null.\n\n                return isFinite(value) ? String(value) : 'null';\n\n            case 'boolean':\n            case 'null':\n\n                // If the value is a boolean or null, convert it to a string. Note:\n                // typeof null does not produce 'null'. The case is included here in\n                // the remote chance that this gets fixed someday.\n\n                return String(value);\n\n            // If the type is 'object', we might be dealing with an object or an\n            // array or\n            // null.\n\n            case 'object':\n\n                // Due to a specification blunder in ECMAScript, typeof null is\n                // 'object',\n                // so watch out for that case.\n\n                if (!value) {\n                    return 'null';\n                }\n\n                // Make an array to hold the partial results of stringifying this object\n                // value.\n\n                gap += indent;\n                partial = [];\n\n                // Is the value an array?\n\n                if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n                    // The value is an array. Stringify every element. Use null as a\n                    // placeholder\n                    // for non-JSON values.\n\n                    length = value.length;\n                    for (i = 0; i < length; i += 1) {\n                        partial[i] = this.str(i, value) || 'null';\n                    }\n\n                    // Join all of the elements together, separated with commas, and\n                    // wrap them in\n                    // brackets.\n\n                    v = partial.length === 0 ? '[]' : gap ? '[\\n' + gap +\n                        partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                        '[' + partial.join(',') + ']';\n                    gap = mind;\n                    return v;\n                }\n\n                // If the replacer is an array, use it to select the members to be\n                // stringified.\n\n                if (rep && typeof rep === 'object') {\n                    length = rep.length;\n                    for (i = 0; i < length; i += 1) {\n                        k = rep[i];\n                        if (typeof k === 'string') {\n                            v = this.str(k, value);\n                            if (v) {\n                                partial.push(this.quote(k) + (gap ? ': ' : ':') + v);\n                            }\n                        }\n                    }\n                } else {\n\n                    // Otherwise, iterate through all of the keys in the object.\n\n                    for (k in value) {\n                        if (Object.hasOwnProperty.call(value, k)) {\n                            v = this.str(k, value);\n                            if (v) {\n                                partial.push(this.quote(k) + (gap ? ': ' : ':') + v);\n                            }\n                        }\n                    }\n                }\n\n                // Join all of the member texts together, separated with commas,\n                // and wrap them in braces.\n\n                v = partial.length === 0 ?\n                  '{}' : gap ?\n                    '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n                    '{' + partial.join(',') + '}';\n                gap = mind;\n                return v;\n        }\n    };\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.CloudCmsConnector = Alpaca.Connector.extend(\n    /**\n     * @lends Alpaca.CloudCmsConnector.prototype\n     */\n    {\n        /**\n         * Makes initial connections to data source.\n         *\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        connect: function (onSuccess, onError)\n        {\n            var self = this;\n\n            var cfn = function(err, branch)\n            {\n                if (err)\n                {\n                    onError(err);\n                    return;\n                }\n\n                if (branch)\n                {\n                    self.branch = Chain(branch);\n\n                    self.bindHelperFunctions(self.branch);\n                }\n\n                onSuccess();\n            };\n\n            if (Alpaca.globalContext && Alpaca.globalContext.branch)\n            {\n                cfn(null, Alpaca.globalContext.branch);\n            }\n            else\n            {\n                self.branch = null;\n\n                self.doConnect(function (err, branch) {\n                    cfn(err, branch);\n                });\n            }\n        },\n\n        doConnect: function(callback)\n        {\n            var self = this;\n\n            if (!this.config.key) {\n                this.config.key = \"default\";\n            }\n\n            Gitana.connect(this.config, function(err) {\n\n                if (err) {\n                    callback(err);\n                    return;\n                }\n\n                if (this.getDriver().getOriginalConfiguration().loadAppHelper)\n                {\n                    this.datastore(\"content\").readBranch(\"master\").then(function() {\n                        callback(null, this);\n                    });\n                }\n                else\n                {\n                    callback();\n                }\n            });\n        },\n\n        bindHelperFunctions: function(branch)\n        {\n            if (!branch.loadAlpacaSchema)\n            {\n                branch.loadAlpacaSchema = function(schemaIdentifier, resources, callback)\n                {\n                    var uriFunction = function()\n                    {\n                        return branch.getUri() + \"/alpaca/schema\";\n                    };\n\n                    var params = {};\n                    params[\"id\"] = schemaIdentifier;\n\n                    return this.chainGetResponse(this, uriFunction, params).then(function(response) {\n                        callback.call(this, null, response);\n                    });\n                };\n            }\n\n            if (!branch.loadAlpacaOptions)\n            {\n                branch.loadAlpacaOptions = function(optionsIdentifier, resources, callback)\n                {\n                    var uriFunction = function()\n                    {\n                        return branch.getUri() + \"/alpaca/options\";\n                    };\n\n                    var params = {};\n                    params[\"schemaId\"] = resources.schemaSource;\n                    params[\"id\"] = optionsIdentifier;\n\n                    return this.chainGetResponse(this, uriFunction, params).then(function(response) {\n                        callback.call(this, null, response);\n                    });\n                };\n            }\n\n            if (!branch.loadAlpacaData)\n            {\n                branch.loadAlpacaData = function(dataIdentifier, resources, callback)\n                {\n                    var uriFunction = function()\n                    {\n                        return branch.getUri() + \"/alpaca/data\";\n                    };\n\n                    var params = {};\n                    params[\"id\"] = dataIdentifier;\n\n                    return this.chainGetResponse(this, uriFunction, params).then(function(response) {\n                        callback.call(this, null, response);\n                    });\n                };\n            }\n\n            if (!branch.loadAlpacaDataSource)\n            {\n                branch.loadAlpacaDataSource = function(config, pagination, callback)\n                {\n                    var params = {};\n                    if (pagination)\n                    {\n                        Alpaca.copyInto(params, pagination);\n                    }\n\n                    var uriFunction = function()\n                    {\n                        return branch.getUri() + \"/alpaca/datasource\";\n                    };\n\n                    return this.chainPostResponse(this, uriFunction, params, config).then(function(response) {\n                        callback.call(this, null, response.datasource);\n                    });\n                };\n            }\n\n        },\n\n        /**\n         * Loads data from Cloud CMS.\n         *\n         * @param {String} nodeId the node id to load\n         * @param {Object} resources Map of resources\n         * @param {Function} onSuccess onSuccess callback\n         * @param {Function} onError onError callback\n         */\n        loadData: function (nodeId, resources, successCallback, errorCallback)\n        {\n            var self = this;\n\n            // if we didn't connect to a branch, then use the default method\n            if (!self.branch)\n            {\n                return this.base(nodeId, resources, successCallback, errorCallback);\n            }\n\n            // load from cloud cms\n            self.branch.loadAlpacaData(nodeId, resources, function(err, data) {\n\n                if (err)\n                {\n                    errorCallback(err);\n                    return;\n                }\n\n                var obj = null;\n\n                if (data)\n                {\n                    obj = JSON.parse(JSON.stringify(data));\n                }\n\n                successCallback(obj);\n            });\n        },\n\n        /**\n         * Loads json schema from Cloud CMS.\n         *\n         * @param {Object|String} schemaIdentifier the definition qname to load\n         * @param {Object} resources Map of resources\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadSchema: function (schemaIdentifier, resources, successCallback, errorCallback)\n        {\n            var self = this;\n\n            // if we didn't connect to a branch, then use the default method\n            if (!self.branch)\n            {\n                return this.base(schemaIdentifier, resources, successCallback, errorCallback);\n            }\n\n            // load from cloud cms\n            self.branch.loadAlpacaSchema(schemaIdentifier, resources, function(err, schema) {\n\n                if (err)\n                {\n                    errorCallback(err);\n                    return;\n                }\n\n                // TODO: cleanup schema\n\n                successCallback(schema);\n            });\n        },\n\n        /**\n         * Loads json options from Cloud CMS.\n         *\n         * @param {Object|String} optionsIdentifier the form key to load\n         * @param {Object} resources Map of resources\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadOptions: function (optionsIdentifier, resources, successCallback, errorCallback)\n        {\n            var self = this;\n\n            // if we didn't connect to a branch, then use the default method\n            if (!self.branch)\n            {\n                return this.base(optionsIdentifier, resources, successCallback, errorCallback);\n            }\n\n            // load from cloud cms\n            self.branch.loadAlpacaOptions(optionsIdentifier, resources, function(err, options) {\n\n                if (err)\n                {\n                    errorCallback(err);\n                    return;\n                }\n\n                if (!options) {\n                    options = {};\n                }\n\n                // TODO: cleanup options\n\n                // mix in buttons onto form\n                options.form.buttons = {\n                    \"submit\": {\n                        \"title\": \"Submit\",\n                        \"click\": function(e) {\n\n                            var form = this;\n\n                            var value = this.getValue();\n                            if (!value) {\n                                value = {};\n                            }\n\n                            var promise = this.ajaxSubmit({\n                                \"xhrFields\": {\n                                    \"withCredentials\": true\n                                },\n                                \"crossDomain\": true,\n                                \"processData\": false,\n                                \"data\": JSON.stringify(value),\n                                \"contentType\": \"application/json; charset=utf-8\"\n                            });\n                            promise.done(function () {\n                                form.topControl.trigger(\"formSubmitSuccess\");\n                            });\n                            promise.fail(function () {\n                                form.topControl.trigger(\"formSubmitFail\");\n                            });\n                        }\n                    }\n                };\n\n                if (typeof(options.focus) === \"undefined\")\n                {\n                    options.focus = Alpaca.defaultFocus;\n                }\n\n                // adjust the action handler relative to baseURL\n                options.form.attributes.action = self.config.baseURL + options.form.attributes.action;\n\n                successCallback(options);\n            });\n        },\n\n        /**\n         * Loads a referenced JSON schema by it's qname from Cloud CMS.\n         *\n         * @param {Object|String} schemaIdentifier schema to load\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadReferenceSchema: function (schemaIdentifier, successCallback, errorCallback)\n        {\n            var self = this;\n\n            return self.loadSchema(schemaIdentifier, successCallback, errorCallback);\n        },\n\n        /**\n         * Loads referenced JSON options by it's form key from Cloud CMS.\n         *\n         * @param {Object|String} optionsIdentifier form to load.\n         * @param {Function} onSuccess onSuccess callback.\n         * @param {Function} onError onError callback.\n         */\n        loadReferenceOptions: function (optionsIdentifier, successCallback, errorCallback)\n        {\n            var self = this;\n\n            return self.loadOptions(optionsIdentifier, successCallback, errorCallback);\n        },\n\n        /**\n         * Loads data source elements based on a content query to Cloud CMS.\n         *\n         * @param config\n         * @param successCallback\n         * @param errorCallback\n         * @returns {*}\n         */\n        loadDataSource: function (config, successCallback, errorCallback)\n        {\n            var self = this;\n\n            // if we didn't connect to a branch, then use the default method\n            if (!self.branch)\n            {\n                return this.base(config, successCallback, errorCallback);\n            }\n\n            var pagination = config.pagination;\n            delete config.pagination;\n\n            return self.branch.loadAlpacaDataSource(config, pagination, function(err, array) {\n                if (err) {\n                    errorCallback(err);\n                    return;\n                }\n\n                successCallback(array);\n            });\n        }\n\n    });\n\n    Alpaca.registerConnectorClass(\"cloudcms\", Alpaca.CloudCmsConnector);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.TextField = Alpaca.ControlField.extend(\n    /**\n     * @lends Alpaca.Fields.TextField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.ControlField#getFieldType\n         */\n        getFieldType: function()\n        {\n            return \"text\";\n        },\n\n        /**\n         * @see Alpaca.Field#setup\n         */\n        setup: function()\n        {\n            this.base();\n\n            /*\n            if (!this.options.size) {\n                this.options.size = 40;\n            }\n            */\n\n            // assume html5 input type = \"text\"\n            if (!this.inputType)\n            {\n                this.inputType = \"text\";\n            }\n\n            if (this.options.inputType)\n            {\n                this.inputType = this.options.inputType;\n            }\n\n            // DOM data-* attributes support\n            if (!this.options.data)\n            {\n                this.options.data = {};\n            }\n\n            // DOM * attributes support\n            if (!this.options.attributes)\n            {\n                this.options.attributes = {};\n            }\n\n            if (typeof(this.options.allowOptionalEmpty) === \"undefined\")\n            {\n                this.options.allowOptionalEmpty = true;\n            }\n\n            // DOM \"autocomplete\"\n            if (this.options.autocomplete && typeof(this.options.autocomplete) === \"string\")\n            {\n                if (this.options.autocomplete.toLowerCase() === \"on\")\n                {\n                    this.options.autocomplete = true;\n                }\n                else if (this.options.autocomplete.toLowerCase() === \"true\")\n                {\n                    this.options.autocomplete = true;\n                }\n                else if (this.options.autocomplete.toLowerCase() === \"yes\")\n                {\n                    this.options.autocomplete = true;\n                }\n                else\n                {\n                    this.options.autocomplete = false;\n                }\n            }\n\n            if (typeof(this.options.autocomplete) === \"undefined\")\n            {\n                this.options.autocomplete = false;\n            }\n\n            if (typeof(this.options.disallowEmptySpaces) === \"undefined\")\n            {\n                this.options.disallowEmptySpaces = false;\n            }\n\n            if (typeof(this.options.disallowOnlyEmptySpaces) === \"undefined\")\n            {\n                this.options.disallowOnlyEmptySpaces = false;\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#destroy\n         */\n        destroy: function()\n        {\n            this.base();\n\n            // clean up typeahead\n            if ( this.control && this.control.typeahead && this.options.typeahead)\n            {\n                $(this.control).typeahead('destroy');\n            }\n        },\n\n        /**\n         * @see Alpaca.ControlField#postRender\n         */\n        postRender: function(callback) {\n\n            var self = this;\n\n            this.base(function() {\n\n                if (self.control)\n                {\n                    // autocomplete\n                    self.applyAutocomplete();\n\n                    // mask\n                    self.applyMask();\n\n                    // typeahead\n                    self.applyTypeAhead();\n\n                    // update max length indicator\n                    self.updateMaxLengthIndicator();\n                }\n\n                callback();\n            });\n        },\n\n        applyAutocomplete: function()\n        {\n            var self = this;\n\n            // autocomplete\n            if (typeof(self.options.autocomplete) !== \"undefined\")\n            {\n                $(self.field).addClass(\"alpaca-autocomplete\");\n                $(self.control).attr(\"autocomplete\", (self.options.autocomplete ? \"on\" : \"off\"));\n\n                // CALLBACK: \"autocomplete\"\n                self.fireCallback(\"autocomplete\");\n            }\n        },\n\n        applyMask: function()\n        {\n            var self = this;\n\n            // mask it\n            if (self.control.mask && self.options.maskString)\n            {\n                self.control.mask(self.options.maskString);\n            }\n        },\n\n        applyTypeAhead: function()\n        {\n            var self = this;\n\n            if (self.control.typeahead && self.options.typeahead && !Alpaca.isEmpty(self.options.typeahead))\n            {\n                var tConfig = self.options.typeahead.config;\n                if (!tConfig) {\n                    tConfig = {};\n                }\n\n                var tDatasets = self.options.typeahead.datasets;\n                if (!tDatasets) {\n                    tDatasets = {};\n                }\n\n                if (!tDatasets.name) {\n                    tDatasets.name = self.getId();\n                }\n\n                var tEvents = self.options.typeahead.events;\n                if (!tEvents) {\n                    tEvents = {};\n                }\n\n                // support for each datasets (local, remote, prefetch)\n                if (tDatasets.type === \"local\" || tDatasets.type === \"remote\" || tDatasets.type === \"prefetch\")\n                {\n                    var bloodHoundConfig = {\n                        datumTokenizer: function(d) {\n                            var tokens = \"\";\n                            for (var k in d) {\n                                if (d.hasOwnProperty(k) || d[k]) {\n                                    tokens += \" \" + d[k];\n                                }\n                            }\n                            return Bloodhound.tokenizers.whitespace(tokens);\n                        },\n                        queryTokenizer: Bloodhound.tokenizers.whitespace\n                    };\n\n                    if (tDatasets.type === \"local\" )\n                    {\n                        var local = [];\n\n                        if (typeof(tDatasets.source) === \"function\")\n                        {\n                            bloodHoundConfig.local = tDatasets.source;\n                        }\n                        else\n                        {\n                            // array\n                            for (var i = 0; i < tDatasets.source.length; i++)\n                            {\n                                var localElement = tDatasets.source[i];\n                                if (typeof(localElement) === \"string\")\n                                {\n                                    localElement = {\n                                        \"value\": localElement\n                                    };\n                                }\n\n                                local.push(localElement);\n                            }\n\n                            bloodHoundConfig.local = local;\n                        }\n\n                        if (tDatasets.local)\n                        {\n                            bloodHoundConfig.local = tDatasets.local;\n                        }\n                    }\n\n                    if (tDatasets.type === \"prefetch\")\n                    {\n                        bloodHoundConfig.prefetch = {\n                            url: tDatasets.source\n                        };\n\n                        if (tDatasets.filter)\n                        {\n                            bloodHoundConfig.prefetch.filter = tDatasets.filter;\n                        }\n                    }\n\n                    if (tDatasets.type === \"remote\")\n                    {\n                        bloodHoundConfig.remote = {\n                            url: tDatasets.source\n                        };\n\n                        if (tDatasets.filter)\n                        {\n                            bloodHoundConfig.remote.filter = tDatasets.filter;\n                        }\n\n                        if (tDatasets.replace)\n                        {\n                            bloodHoundConfig.remote.replace = tDatasets.replace;\n                        }\n                    }\n\n                    // include any additional dataset config params in the Bloodhound config\n                    $.each(tDatasets, function( index, value ) {\n                        if (index !== 'type' \n                            && index !== 'source' \n                            && index !== 'filter' \n                            && index !== 'replace' \n                            && index !== 'local' \n                            && index !== 'templates')\n                        {\n                            bloodHoundConfig[index] = value;\n                        }\n                    });\n\n                    var engine = new Bloodhound(bloodHoundConfig);\n                    engine.initialize();\n                    tDatasets.source = engine.ttAdapter();\n                }\n\n                // compile templates\n                if (tDatasets.templates)\n                {\n                    for (var k in tDatasets.templates)\n                    {\n                        var template = tDatasets.templates[k];\n                        if (typeof(template) === \"string\")\n                        {\n                            tDatasets.templates[k] = Handlebars.compile(template);\n                        }\n                    }\n                }\n\n                // process typeahead\n                $(self.control).typeahead(tConfig, tDatasets);\n\n                // listen for \"autocompleted\" event and set the value of the field\n                $(self.control).on(\"typeahead:autocompleted\", function(event, datum) {\n                    self.setValue(datum.value);\n                    $(self.control).change();\n                });\n\n                // listen for \"selected\" event and set the value of the field\n                $(self.control).on(\"typeahead:selected\", function(event, datum) {\n                    self.setValue(datum.value);\n                    $(self.control).change();\n                });\n\n                // custom events\n                if (tEvents)\n                {\n                    if (tEvents.autocompleted) {\n                        $(self.control).on(\"typeahead:autocompleted\", function(event, datum) {\n                            tEvents.autocompleted(event, datum);\n                        });\n                    }\n                    if (tEvents.selected) {\n                        $(self.control).on(\"typeahead:selected\", function(event, datum) {\n                            tEvents.selected(event, datum);\n                        });\n                    }\n                }\n\n                // when the input value changes, change the query in typeahead\n                // this is to keep the typeahead control sync'd with the actual dom value\n                // only do this if the query doesn't already match\n                var fi = $(self.control);\n                $(self.control).change(function() {\n\n                    var value = $(this).val();\n\n                    var newValue = $(fi).typeahead('val');\n                    if (newValue !== value)\n                    {\n                        $(fi).typeahead('val', newValue);\n                    }\n\n                });\n\n                // some UI cleanup (we don't want typeahead to restyle)\n                $(self.field).find(\"span.twitter-typeahead\").first().css(\"display\", \"block\"); // SPAN to behave more like DIV, next line\n                $(self.field).find(\"span.twitter-typeahead input.tt-input\").first().css(\"background-color\", \"\");\n            }\n        },\n\n        prepareControlModel: function(callback)\n        {\n            var self = this;\n\n            this.base(function(model) {\n\n                model.inputType = self.inputType;\n\n                callback(model);\n            });\n        },\n\n        updateMaxLengthIndicator: function()\n        {\n            var self = this;\n\n            var errState = false;\n\n            var message = \"\";\n            if (!Alpaca.isEmpty(self.schema.maxLength) && self.options.showMaxLengthIndicator)\n            {\n                var val = self.getValue() || \"\";\n\n                var diff = self.schema.maxLength - val.length;\n                if (diff >= 0)\n                {\n                    message = \"You have \" + diff + \" characters remaining\";\n                }\n                else\n                {\n                    message = \"Your message is too long by \" + (diff*-1) + \" characters\";\n                    errState = true;\n                }\n\n                var indicator = $(self.field).find(\".alpaca-field-text-max-length-indicator\");\n                if (indicator.length === 0)\n                {\n                    indicator = $(\"<p class='alpaca-field-text-max-length-indicator'></p>\");\n                    $(self.control).after(indicator);\n                }\n\n                $(indicator).html(message);\n                $(indicator).removeClass(\"err\");\n                if (errState)\n                {\n                    $(indicator).addClass(\"err\");\n                }\n            }\n\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            var self = this;\n\n            var value = this._getControlVal(true);\n\n            if (self.control.mask && self.options.maskString)\n            {\n                // get unmasked value\n                var fn = $(this.control).data($.mask.dataName);\n                if (fn)\n                {\n                    value = fn();\n                    value = self.ensureProperType(value);\n                }\n            }\n\n            return value;\n        },\n\n        /**\n         * @see Alpaca.Field#setValue\n         */\n        setValue: function(value)\n        {\n            if (this.control && this.control.length > 0)\n            {\n                if (Alpaca.isEmpty(value))\n                {\n                    this.control.val(\"\");\n                }\n                else\n                {\n                    this.control.val(value);\n                }\n            }\n\n            // be sure to call into base method\n            this.base(value);\n\n            // if applicable, update the max length indicator\n            this.updateMaxLengthIndicator();\n        },\n\n        /**\n         * @see Alpaca.ControlField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var status =  this._validatePattern();\n            valInfo[\"invalidPattern\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"invalidPattern\"), [this.schema.pattern]),\n                \"status\": status\n            };\n\n            status = this._validateMaxLength();\n            valInfo[\"stringTooLong\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"stringTooLong\"), [this.schema.maxLength]),\n                \"status\": status\n            };\n\n            status = this._validateMinLength();\n            valInfo[\"stringTooShort\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"stringTooShort\"), [this.schema.minLength]),\n                \"status\": status\n            };\n\n            return baseStatus && valInfo[\"invalidPattern\"][\"status\"] && valInfo[\"stringTooLong\"][\"status\"] && valInfo[\"stringTooShort\"][\"status\"];\n        },\n\n        /**\n         * Validates against the schema pattern property.\n         *\n         * @returns {Boolean} True if it matches the pattern, false otherwise.\n         */\n        _validatePattern: function()\n        {\n            if (this.schema.pattern)\n            {\n                var val = this.getValue();\n\n                if (val === \"\" && this.options.allowOptionalEmpty && !this.isRequired())\n                {\n                    return true;\n                }\n\n                if (Alpaca.isEmpty(val))\n                {\n                    val = \"\";\n                }\n\n                if (typeof(val) === \"string\")\n                {\n                    if (!val.match(this.schema.pattern))\n                    {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates against the schema minLength property.\n         *\n         * @returns {Boolean} True if its size is greater than minLength, false otherwise.\n         */\n        _validateMinLength: function()\n        {\n            if (!Alpaca.isEmpty(this.schema.minLength))\n            {\n                var val = this.getValue();\n                if(val !== val) {\n                    // NaN\n                    val = \"\";\n                }\n                if (val === \"\" && this.options.allowOptionalEmpty && !this.isRequired())\n                {\n                    return true;\n                }\n                if (Alpaca.isEmpty(val))\n                {\n                    val = \"\";\n                }\n                if ((\"\"+val).length < this.schema.minLength)\n                {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /**\n         * Validates against the schema maxLength property.\n         *\n         * @returns {Boolean} True if its size is less than maxLength , false otherwise.\n         */\n        _validateMaxLength: function()\n        {\n            if (!Alpaca.isEmpty(this.schema.maxLength))\n            {\n                var val = this.getValue();\n                if (val === \"\" && this.options.allowOptionalEmpty && !this.isRequired())\n                {\n                    return true;\n                }\n                if (Alpaca.isEmpty(val))\n                {\n                    val = \"\";\n                }\n                if ((\"\"+val).length > this.schema.maxLength)\n                {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /**\n         * @see Alpaca.Field#focus\n         */\n        focus: function(onFocusCallback)\n        {\n            if (this.control && this.control.length > 0)\n            {\n                // focuses the control and also positions the input at the end\n\n                var el = $(this.control).get(0);\n\n                try {\n                    var elemLen = el.value ? el.value.length : 0;\n                    el.selectionStart = elemLen;\n                    el.selectionEnd = elemLen;\n                }\n                catch (e) {\n                    // field type doesn't support selection start and end\n                }\n\n                el.focus();\n\n                if (onFocusCallback)\n                {\n                    onFocusCallback(this);\n                }\n\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#getType\n         */\n        getType: function() {\n            return \"string\";\n        },\n\n        /**\n         * @see Alpaca.ControlField#onKeyPress\n         */\n        onKeyPress: function(e)\n        {\n            var self = this;\n\n            // ignore tab and arrow keys\n            if (e.keyCode === 9 || e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40 ) {\n                return;\n            }\n\n            if (e.keyCode === 8) // backspace\n            {\n                if (!Alpaca.isEmpty(self.schema.minLength) && (self.options.constrainLengths || self.options.constrainMinLength))\n                {\n                    var newValue = self.getValue() || \"\";\n                    if (newValue.length <= self.schema.minLength)\n                    {\n                        // kill event\n                        e.preventDefault();\n                        e.stopImmediatePropagation();\n                    }\n                }\n            }\n            else\n            {\n                if (!Alpaca.isEmpty(self.schema.maxLength) && (self.options.constrainLengths || self.options.constrainMaxLength))\n                {\n                    var newValue = self.getValue() || \"\";\n                    if (newValue.length >= self.schema.maxLength)\n                    {\n                        // kill event\n                        e.preventDefault();\n                        e.stopImmediatePropagation();\n                    }\n                }\n            }\n\n            if (e.keyCode === 32) // space\n            {\n                if (self.options.disallowEmptySpaces)\n                {\n                    // kill event\n                    e.preventDefault();\n                    e.stopImmediatePropagation();\n                }\n            }\n        },\n\n        onKeyUp: function(e)\n        {\n            var self = this;\n\n            // if applicable, update the max length indicator\n            self.updateMaxLengthIndicator();\n\n            // trigger \"fieldkeyup\"\n            $(this.field).trigger(\"fieldkeyup\");\n        }\n\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Field#getTitle\n         */\n        getTitle: function() {\n            return \"Single-Line Text\";\n        },\n\n        /**\n         * @see Alpaca.Field#getDescription\n         */\n        getDescription: function() {\n            return \"Text field for single-line text.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"minLength\": {\n                        \"title\": \"Minimal Length\",\n                        \"description\": \"Minimal length of the property value.\",\n                        \"type\": \"number\"\n                    },\n                    \"maxLength\": {\n                        \"title\": \"Maximum Length\",\n                        \"description\": \"Maximum length of the property value.\",\n                        \"type\": \"number\"\n                    },\n                    \"pattern\": {\n                        \"title\": \"Pattern\",\n                        \"description\": \"Regular expression for the property value.\",\n                        \"type\": \"string\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getOptionsForSchema\n         */\n        getOptionsForSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"default\": {\n                        \"helper\": \"Field default value\",\n                        \"type\": \"text\"\n                    },\n                    \"minLength\": {\n                        \"type\": \"integer\"\n                    },\n                    \"maxLength\": {\n                        \"type\": \"integer\"\n                    },\n                    \"pattern\": {\n                        \"type\": \"text\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"size\": {\n                        \"title\": \"Field Size\",\n                        \"description\": \"Field size.\",\n                        \"type\": \"number\",\n                        \"default\":40\n                    },\n                    \"maskString\": {\n                        \"title\": \"Mask Expression\",\n                        \"description\": \"Expression for the field mask. Field masking will be enabled if not empty.\",\n                        \"type\": \"string\"\n                    },\n                    \"placeholder\": {\n                        \"title\": \"Field Placeholder\",\n                        \"description\": \"Field placeholder.\",\n                        \"type\": \"string\"\n                    },\n                    \"typeahead\": {\n                        \"title\": \"Type Ahead\",\n                        \"description\": \"Provides configuration for the $.typeahead plugin if it is available.  For full configuration options, see: https://github.com/twitter/typeahead.js\"\n                    },\n                    \"allowOptionalEmpty\": {\n                        \"title\": \"Allow Optional Empty\",\n                        \"description\": \"Allows this non-required field to validate when the value is empty\"\n                    },\n                    \"inputType\": {\n                        \"title\": \"HTML5 Input Type\",\n                        \"description\": \"Allows for the override of the underlying HTML5 input type.  If not specified, an assumed value is provided based on the kind of input control (i.e. 'text', 'date', 'email' and so forth)\",\n                        \"type\": \"string\"\n                    },\n                    \"data\": {\n                        \"title\": \"Data attributes for the underlying DOM input control\",\n                        \"description\": \"Allows you to specify a key/value map of data attributes that will be added as DOM attribuets for the underlying input control.  The data attributes will be added as data-{name}='{value}'.\",\n                        \"type\": \"object\"\n                    },\n                    \"autocomplete\": {\n                        \"title\": \"HTML autocomplete attribute for the underlying DOM input control\",\n                        \"description\": \"Allows you to specify the autocomplete attribute for the underlying input control whether or not field should have autocomplete enabled.\",\n                        \"type\": \"string\"\n                    },\n                    \"disallowEmptySpaces\": {\n                        \"title\": \"Disallow Empty Spaces\",\n                        \"description\": \"Whether to disallow the entry of empty spaces in the text\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"disallowOnlyEmptySpaces\": {\n                        \"title\": \"Disallow Only Empty Spaces\",\n                        \"description\": \"Whether to disallow the entry of only empty spaces in the text\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"size\": {\n                        \"type\": \"integer\"\n                    },\n                    \"maskString\": {\n                        \"helper\": \"a - an alpha character;9 - a numeric character;* - an alphanumeric character\",\n                        \"type\": \"text\"\n                    },\n                    \"typeahead\": {\n                        \"type\": \"object\"\n                    },\n                    \"allowOptionalEmpty\": {\n                        \"type\": \"checkbox\"\n                    },\n                    \"inputType\": {\n                        \"type\": \"text\"\n                    },\n                    \"data\": {\n                        \"type\": \"object\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n\n    });\n\n    Alpaca.registerMessages({\n        \"invalidPattern\": \"This field should have pattern {0}\",\n        \"stringTooShort\": \"This field should contain at least {0} numbers or characters\",\n        \"stringTooLong\": \"This field should contain at most {0} numbers or characters\"\n    });\n    Alpaca.registerFieldClass(\"text\", Alpaca.Fields.TextField);\n    Alpaca.registerDefaultSchemaFieldMapping(\"string\", \"text\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.TextAreaField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.TextAreaField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function()\n        {\n            return \"textarea\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            this.base();\n\n            if (!this.options.rows) {\n                this.options.rows = 5;\n            }\n\n            if (!this.options.cols) {\n                this.options.cols = 40;\n            }\n        },\n\n        /**\n         * @see Alpaca.ControlField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var status =  this._validateWordCount();\n            valInfo[\"wordLimitExceeded\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"wordLimitExceeded\"), [this.options.wordlimit]),\n                \"status\": status\n            };\n\n            return baseStatus && valInfo[\"wordLimitExceeded\"][\"status\"];\n        },\n\n        /**\n         * Validate for word limit.\n         *\n         * @returns {Boolean} True if the number of words is equal to or less than the word limit.\n         */\n        _validateWordCount: function()\n        {\n            if (this.options.wordlimit && this.options.wordlimit > -1)\n            {\n                var val = this.data;\n\n                if (val)\n                {\n                    var wordcount = val.split(\" \").length;\n                    if (wordcount > this.options.wordlimit)\n                    {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Multi-Line Text\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Textarea field for multiple line text.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"rows\": {\n                        \"title\": \"Rows\",\n                        \"description\": \"Number of rows\",\n                        \"type\": \"number\",\n                        \"default\": 5\n                    },\n                    \"cols\": {\n                        \"title\": \"Columns\",\n                        \"description\": \"Number of columns\",\n                        \"type\": \"number\",\n                        \"default\": 40\n                    },\n                    \"wordlimit\": {\n                        \"title\": \"Word Limit\",\n                        \"description\": \"Limits the number of words allowed in the text area.\",\n                        \"type\": \"number\",\n                        \"default\": -1\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"rows\": {\n                        \"type\": \"integer\"\n                    },\n                    \"cols\": {\n                        \"type\": \"integer\"\n                    },\n                    \"wordlimit\": {\n                        \"type\": \"integer\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n\n    });\n\n    Alpaca.registerMessages({\n        \"wordLimitExceeded\": \"The maximum word limit of {0} has been exceeded.\"\n    });\n\n    Alpaca.registerFieldClass(\"textarea\", Alpaca.Fields.TextAreaField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.CheckBoxField = Alpaca.ControlField.extend(\n        /**\n         * @lends Alpaca.Fields.CheckBoxField.prototype\n         */\n        {\n            /**\n             * @see Alpaca.Field#getFieldType\n             */\n            getFieldType: function() {\n                return \"checkbox\";\n            },\n\n            /**\n             * @see Alpaca.Field#setup\n             */\n            setup: function() {\n\n                var self = this;\n\n                self.base();\n\n                if (typeof(self.options.multiple) == \"undefined\")\n                {\n                    if (self.schema.type === \"array\")\n                    {\n                        self.options.multiple = true;\n                    }\n                    else if (typeof(self.schema[\"enum\"]) !== \"undefined\")\n                    {\n                        self.options.multiple = true;\n                    }\n                }\n\n                if (self.options.multiple)\n                {\n                    // multiple mode\n\n                    self.checkboxOptions = [];\n\n                    // if we have enum values, copy them into checkbox options\n                    if (self.getEnum())\n                    {\n                        // sort the enumerated values\n                        self.sortEnum();\n\n                        var optionLabels = self.getOptionLabels();\n\n                        $.each(self.getEnum(), function (index, value) {\n\n                            var text = value;\n                            if (optionLabels)\n                            {\n                                if (!Alpaca.isEmpty(optionLabels[index]))\n                                {\n                                    text = optionLabels[index];\n                                }\n                                else if (!Alpaca.isEmpty(optionLabels[value]))\n                                {\n                                    text = optionLabels[value];\n                                }\n                            }\n\n                            self.checkboxOptions.push({\n                                \"value\": value,\n                                \"text\": text\n                            });\n                        });\n                    }\n\n                    // if they provided \"datasource\", we copy to \"dataSource\"\n                    if (self.options.datasource && !self.options.dataSource) {\n                        self.options.dataSource = self.options.datasource;\n                        delete self.options.datasource;\n                    }\n\n                    // we optionally allow the data source return values to override the schema and options\n                    if (typeof(self.options.useDataSourceAsEnum) === \"undefined\")\n                    {\n                        self.options.useDataSourceAsEnum = true;\n                    }\n                }\n                else\n                {\n                    // single mode\n\n                    if (!this.options.rightLabel) {\n                        this.options.rightLabel = \"\";\n                    }\n                }\n            },\n\n            prepareControlModel: function(callback)\n            {\n                var self = this;\n\n                this.base(function(model) {\n\n                    if (self.checkboxOptions)\n                    {\n                        model.checkboxOptions = self.checkboxOptions;\n                    }\n\n                    callback(model);\n                });\n            },\n\n            /**\n             * @OVERRIDE\n             */\n            getEnum: function()\n            {\n                var values = this.base();\n                if (!values)\n                {\n                    if (this.schema && this.schema.items && this.schema.items.enum)\n                    {\n                        values = this.schema.items.enum;\n                    }\n                }\n\n                return values;\n            },\n\n            /**\n             * @OVERRIDE\n             */\n            getOptionLabels: function()\n            {\n                var values = this.base();\n                if (!values)\n                {\n                    if (this.options && this.options.items && this.options.items.optionLabels)\n                    {\n                        values = this.options.items.optionLabels;\n                    }\n                }\n\n                return values;\n            },\n\n            /**\n             * Handler for the event that the checkbox is clicked.\n             *\n             * @param e Event.\n             */\n            onClick: function(e)\n            {\n                this.refreshValidationState();\n            },\n\n            /**\n             * @see Alpaca.ControlField#beforeRenderControl\n             */\n            beforeRenderControl: function(model, callback)\n            {\n                var self = this;\n\n                this.base(model, function() {\n\n                    if (self.options.dataSource)\n                    {\n                        // switch to multiple mode\n                        self.options.multiple = true;\n\n                        if (!self.checkboxOptions) {\n                            model.checkboxOptions = self.checkboxOptions = [];\n                        }\n\n                        // clear the array\n                        self.checkboxOptions.length = 0;\n\n                        self.invokeDataSource(self.checkboxOptions, model, function(err) {\n\n                            if (self.options.useDataSourceAsEnum)\n                            {\n                                // now build out the enum and optionLabels\n                                var _enum = [];\n                                var _optionLabels = [];\n                                for (var i = 0; i < self.checkboxOptions.length; i++)\n                                {\n                                    _enum.push(self.checkboxOptions[i].value);\n                                    _optionLabels.push(self.checkboxOptions[i].text);\n                                }\n\n                                self.setEnum(_enum);\n                                self.setOptionLabels(_optionLabels);\n                            }\n\n                            callback();\n                        });\n                    }\n                    else\n                    {\n                        callback();\n                    }\n\n                });\n            },\n\n\n            /**\n             * @see Alpaca.ControlField#postRender\n             */\n            postRender: function(callback) {\n\n                var self = this;\n\n                this.base(function() {\n\n                    // do this little trick so that if we have a default value, it gets set during first render\n                    // this causes the checked state of the control to update\n                    if (self.data && typeof(self.data) !== \"undefined\")\n                    {\n                        self.setValue(self.data);\n                    }\n\n                    // for multiple mode, mark values\n                    if (self.options.multiple)\n                    {\n                        // none checked\n                        $(self.getFieldEl()).find(\"input:checkbox\").prop(\"checked\", false);\n\n                        if (self.data)\n                        {\n                            var dataArray = self.data;\n                            if (typeof(self.data) === \"string\")\n                            {\n                                dataArray = self.data.split(\",\");\n                                for (var a = 0; a < dataArray.length; a++)\n                                {\n                                    dataArray[a] = $.trim(dataArray[a]);\n                                }\n                            }\n\n                            for (var k in dataArray)\n                            {\n                                $(self.getFieldEl()).find(\"input:checkbox[data-checkbox-value=\\\"\" + dataArray[k] + \"\\\"]\").prop(\"checked\", true);\n                            }\n                        }\n                    }\n\n                    // single mode\n\n                    // whenever the state of one of our input:checkbox controls is changed (either via a click or programmatically),\n                    // we signal to the top-level field to fire up a change\n                    //\n                    // this allows the dependency system to recalculate and such\n                    //\n                    $(self.getFieldEl()).find(\"input:checkbox\").change(function(evt) {\n                        self.triggerWithPropagation(\"change\");\n                    });\n\n                    callback();\n                });\n            },\n\n            /**\n             * @see Alpaca.Field#getValue\n             */\n            getControlValue: function()\n            {\n                var self = this;\n\n                var value = null;\n\n                if (!self.options.multiple)\n                {\n                    // single scalar value\n                    var input = $(self.getFieldEl()).find(\"input\");\n                    if (input.length > 0)\n                    {\n                        value = Alpaca.checked($(input[0]));\n                    }\n                    else\n                    {\n                        value = false;\n                    }\n                }\n                else\n                {\n                    // multiple values\n                    var values = [];\n                    for (var i = 0; i < self.checkboxOptions.length; i++)\n                    {\n                        var inputField = $(self.getFieldEl()).find(\"input[data-checkbox-index='\" + i + \"']\");\n                        if (Alpaca.checked(inputField))\n                        {\n                            var v = $(inputField).attr(\"data-checkbox-value\");\n                            values.push(v);\n                        }\n                    }\n\n                    // determine how we're going to hand this value back\n\n                    // if type == \"array\", we just hand back the array\n                    // if type == \"string\", we build a comma-delimited list\n                    if (self.schema.type === \"array\")\n                    {\n                        value = values;\n                    }\n                    else if (self.schema.type === \"string\")\n                    {\n                        value = values.join(\",\");\n                    }\n                }\n\n                return value;\n            },\n\n            /**\n             * @see Alpaca.Field#setValue\n             */\n            setValue: function(value)\n            {\n                var self = this;\n\n                // value can be a boolean, string (\"true\"), string (\"a,b,c\") or an array of values\n\n                var applyScalarValue = function(value)\n                {\n                    if (Alpaca.isString(value)) {\n                        value = (value === \"true\");\n                    }\n\n                    var input = $(self.getFieldEl()).find(\"input\");\n                    if (input.length > 0)\n                    {\n                        Alpaca.checked($(input[0]), value);\n                    }\n                };\n\n                var applyMultiValue = function(values)\n                {\n                    // allow for comma-delimited strings\n                    if (typeof(values) === \"string\")\n                    {\n                        values = values.split(\",\");\n                    }\n\n                    // trim things to remove any excess white space\n                    for (var i = 0; i < values.length; i++)\n                    {\n                        values[i] = Alpaca.trim(values[i]);\n                    }\n\n                    // walk through values and assign into appropriate inputs\n                    Alpaca.checked($(self.getFieldEl()).find(\"input[data-checkbox-value]\"), false);\n                    for (var j = 0; j < values.length; j++)\n                    {\n                        var input = $(self.getFieldEl()).find(\"input[data-checkbox-value=\\\"\" + values[j] + \"\\\"]\");\n                        if (input.length > 0)\n                        {\n                            Alpaca.checked($(input[0]), value);\n                        }\n                    }\n                };\n\n                var applied = false;\n\n                if (!self.options.multiple)\n                {\n                    // single value mode\n\n                    // boolean\n                    if (typeof(value) === \"boolean\")\n                    {\n                        applyScalarValue(value);\n                        applied = true;\n                    }\n                    else if (typeof(value) === \"string\")\n                    {\n                        applyScalarValue(value);\n                        applied = true;\n                    }\n                }\n                else\n                {\n                    // multiple value mode\n\n                    if (typeof(value) === \"string\")\n                    {\n                        applyMultiValue(value);\n                        applied = true;\n                    }\n                    else if (Alpaca.isArray(value))\n                    {\n                        applyMultiValue(value);\n                        applied = true;\n                    }\n                }\n\n                if (!applied && value)\n                {\n                    Alpaca.logError(\"CheckboxField cannot set value for schema.type=\" + self.schema.type + \" and value=\" + value);\n                }\n\n                // be sure to call into base method\n                this.base(value);\n            },\n\n            /**\n             * Validate against enum property in the case that the checkbox field is in multiple mode.\n             *\n             * @returns {Boolean} True if the element value is part of the enum list, false otherwise.\n             */\n            _validateEnum: function()\n            {\n                var self = this;\n\n                if (!self.options.multiple)\n                {\n                    return true;\n                }\n\n                var val = self.getValue();\n                if (!self.isRequired() && Alpaca.isValEmpty(val))\n                {\n                    return true;\n                }\n\n                // if val is a string, convert to array\n                if (typeof(val) === \"string\")\n                {\n                    val = val.split(\",\");\n                }\n\n                return Alpaca.anyEquality(val, self.getEnum());\n            },\n\n            /**\n             * @see Alpaca.Field#disable\n             */\n            disable: function()\n            {\n                $(this.control).find(\"input\").each(function() {\n                    $(this).disabled = true;\n                    $(this).prop(\"disabled\", true);\n                });\n            },\n\n            /**\n             * @see Alpaca.Field#enable\n             */\n            enable: function()\n            {\n                $(this.control).find(\"input\").each(function() {\n                    $(this).disabled = false;\n                    $(this).prop(\"disabled\", false);\n                });\n            },\n\n            /**\n             * @see Alpaca.Field#getType\n             */\n            getType: function() {\n                return \"boolean\";\n            },\n\n\n            /* builder_helpers */\n\n            /**\n             * @see Alpaca.Field#getTitle\n             */\n            getTitle: function() {\n                return \"Checkbox Field\";\n            },\n\n            /**\n             * @see Alpaca.Field#getDescription\n             */\n            getDescription: function() {\n                return \"Checkbox Field for boolean (true/false), string ('true', 'false' or comma-delimited string of values) or data array.\";\n            },\n\n            /**\n             * @private\n             * @see Alpaca.ControlField#getSchemaOfOptions\n             */\n            getSchemaOfOptions: function() {\n                return Alpaca.merge(this.base(), {\n                    \"properties\": {\n                        \"rightLabel\": {\n                            \"title\": \"Option Label\",\n                            \"description\": \"Optional right-hand side label for single checkbox field.\",\n                            \"type\": \"string\"\n                        },\n                        \"multiple\": {\n                            \"title\": \"Multiple\",\n                            \"description\": \"Whether to render multiple checkboxes for multi-valued type (such as an array or a comma-delimited string)\",\n                            \"type\": \"boolean\"\n                        },\n                        \"dataSource\": {\n                            \"title\": \"Option DataSource\",\n                            \"description\": \"Data source for generating list of options.  This can be a string or a function.  If a string, it is considered to be a URI to a service that produces a object containing key/value pairs or an array of elements of structure {'text': '', 'value': ''}.  This can also be a function that is called to produce the same list.\",\n                            \"type\": \"string\"\n                        },\n                        \"useDataSourceAsEnum\": {\n                            \"title\": \"Use Data Source as Enumerated Values\",\n                            \"description\": \"Whether to constrain the field's schema enum property to the values that come back from the data source.\",\n                            \"type\": \"boolean\",\n                            \"default\": true\n                        }\n                    }\n                });\n            },\n\n            /**\n             * @private\n             * @see Alpaca.ControlField#getOptionsForOptions\n             */\n            getOptionsForOptions: function() {\n                return Alpaca.merge(this.base(), {\n                    \"fields\": {\n                        \"rightLabel\": {\n                            \"type\": \"text\"\n                        },\n                        \"multiple\": {\n                            \"type\": \"checkbox\"\n                        },\n                        \"dataSource\": {\n                            \"type\": \"text\"\n                        }\n                    }\n                });\n            }\n\n            /* end_builder_helpers */\n\n        });\n\n    Alpaca.registerFieldClass(\"checkbox\", Alpaca.Fields.CheckBoxField);\n    Alpaca.registerDefaultSchemaFieldMapping(\"boolean\", \"checkbox\");\n\n})(jQuery);\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.FileField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.FileField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.ControlField#getFieldType\n         */\n        getFieldType: function()\n        {\n            return \"file\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setValue\n         */\n        setValue: function(value)\n        {\n            this.data = value;\n\n            this.data = value;\n\n            this.updateObservable();\n\n            this.triggerUpdate();\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            return this.data;\n        },\n\n        onChange: function(e)\n        {\n            this.base(e);\n\n            if (this.options.selectionHandler)\n            {\n                this.processSelectionHandler(e.target.files);\n            }\n        },\n\n        processSelectionHandler: function(files)\n        {\n            if (files && files.length > 0)\n            {\n                // if the browser supports HTML5 FileReader, we can pull in the stream for preview\n                if (typeof(FileReader) !== \"undefined\")\n                {\n                    // clear out previous loaded data\n                    var loadedData = [];\n                    var loadCount = 0;\n\n                    var fileReader = new FileReader();\n                    fileReader.onload = (function() {\n                        var field = this;\n                        return function(event)\n                        {\n                            var dataUri = event.target.result;\n\n                            loadedData.push(dataUri);\n                            loadCount++;\n\n                            if (loadCount === files.length)\n                            {\n                                field.options.selectionHandler.call(field, files, loadedData);\n                            }\n                        };\n                    }).call(this);\n\n                    for (var i = 0; i < files.length; i++)\n                    {\n                        fileReader.readAsDataURL(files[i]);\n                    }\n                }\n            }\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"File Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Field for uploading files.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"selectionHandler\": {\n                        \"title\": \"Selection Handler\",\n                        \"description\": \"Function that should be called when files are selected.  Requires HTML5.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"selectionHandler\": {\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"file\", Alpaca.Fields.FileField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.ListField = Alpaca.ControlField.extend(\n    /**\n     * @lends Alpaca.Fields.ListField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Field#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            self.base();\n\n            self.selectOptions = [];\n\n            if (self.getEnum())\n            {\n                // sort the enumerated values\n                self.sortEnum();\n\n                var optionLabels = self.getOptionLabels();\n\n                $.each(self.getEnum(), function(index, value)\n                {\n                    var text = value;\n                    if (optionLabels)\n                    {\n                        if (!Alpaca.isEmpty(optionLabels[index]))\n                        {\n                            text = optionLabels[index];\n                        }\n                        else if (!Alpaca.isEmpty(optionLabels[value]))\n                        {\n                            text = optionLabels[value];\n                        }\n                    }\n\n                    self.selectOptions.push({\n                        \"value\": value,\n                        \"text\": text\n                    });\n                });\n            }\n\n            /**\n             * Auto assign data if we have data and the field is required and removeDefaultNone is either unspecified or true\n             */\n            if (self.isRequired() && !self.data)\n            {\n                if ((self.options.removeDefaultNone === true))\n                {\n                    var enumValues = self.getEnum();\n                    if (enumValues && enumValues.length > 0)\n                    {\n                        self.data = enumValues[0];\n                    }\n                }\n            }\n\n            // if they provided \"datasource\", we copy to \"dataSource\"\n            if (self.options.datasource && !self.options.dataSource) {\n                self.options.dataSource = self.options.datasource;\n                delete self.options.datasource;\n            }\n\n            // we optionally allow the data source return values to override the schema and options\n            if (typeof(self.options.useDataSourceAsEnum) === \"undefined\")\n            {\n                self.options.useDataSourceAsEnum = true;\n            }\n        },\n\n        prepareControlModel: function(callback)\n        {\n            var self = this;\n\n            this.base(function(model) {\n\n                if (typeof(self.options.noneLabel) === \"undefined\")\n                {\n                    self.options.noneLabel = self.getMessage(\"noneLabel\");\n                }\n\n                if (typeof(self.options.hideNone) === \"undefined\")\n                {\n                    if (typeof(self.options.removeDefaultNone) !== \"undefined\")\n                    {\n                        self.options.hideNone = self.options.removeDefaultNone;\n                    }\n                    else\n                    {\n                        self.options.hideNone = self.isRequired();\n                    }\n                }\n\n                callback(model);\n            });\n        },\n\n        /**\n         * @see Alpaca.ControlField#beforeRenderControl\n         */\n        beforeRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            var completionFn = function()\n            {\n                var scalarValue = self.convertToScalarValue(self.data);\n\n                for (var i = 0; i < self.selectOptions.length; i++)\n                {\n                    if (scalarValue === self.selectOptions[i].value)\n                    {\n                        self.selectOptions[i].selected = true;\n                        break;\n                    }\n                }\n\n                callback();\n            };\n\n            this.base(model, function() {\n\n                if (self.options.dataSource)\n                {\n                    // clear the array\n                    self.selectOptions.length = 0;\n\n                    self.invokeDataSource(self.selectOptions, model, function() {\n\n                        if (self.options.useDataSourceAsEnum)\n                        {\n                            // now build out the enum and optionLabels\n                            var _enum = [];\n                            var _optionLabels = [];\n                            for (var i = 0; i < self.selectOptions.length; i++)\n                            {\n                                _enum.push(self.selectOptions[i].value);\n                                _optionLabels.push(self.selectOptions[i].text);\n                            }\n\n                            self.setEnum(_enum);\n                            self.setOptionLabels(_optionLabels);\n                        }\n\n                        completionFn();\n\n                    });\n                }\n                else\n                {\n                    completionFn();\n                }\n\n            });\n        },\n\n        convertToScalarValue: function(data)\n        {\n            return data;\n        },\n\n        convertToDataValue: function(scalarValue, callback)\n        {\n            callback(null, scalarValue);\n        }\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"enum\": {\n                        \"title\": \"Enumeration\",\n                        \"description\": \"List of field value options\",\n                        \"type\": \"array\",\n                        \"required\": true\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"dataSource\": {\n                        \"title\": \"Option Datasource\",\n                        \"description\": \"Datasource for generating list of options.  This can be a string or a function.  If a string, it is considered to be a URI to a service that produces a object containing key/value pairs or an array of elements of structure {'text': '', 'value': ''}.  This can also be a function that is called to produce the same list.\",\n                        \"type\": \"string\"\n                    },\n                    \"removeDefaultNone\": {\n                        \"title\": \"Remove Default None\",\n                        \"description\": \"If true, the default 'None' option will not be shown.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"noneLabel\": {\n                        \"title\": \"None Label\",\n                        \"description\": \"The label to use for the 'None' option in a list (select, radio or otherwise).\",\n                        \"type\": \"string\",\n                        \"default\": \"None\"\n                    },\n                    \"hideNone\": {\n                        \"title\": \"Hide None\",\n                        \"description\": \"Whether to hide the None option from a list (select, radio or otherwise).  This will be true if the field is required and false otherwise.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"useDataSourceAsEnum\": {\n                        \"title\": \"Use Data Source as Enumerated Values\",\n                        \"description\": \"Whether to constrain the field's schema enum property to the values that come back from the data source.\",\n                        \"type\": \"boolean\",\n                        \"default\": true\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"dataSource\": {\n                        \"type\": \"text\"\n                    },\n                    \"removeDefaultNone\": {\n                        \"type\": \"checkbox\",\n                        \"rightLabel\": \"Remove Default None\"\n                    },\n                    \"noneLabel\": {\n                        \"type\": \"text\"\n                    },\n                    \"hideNone\": {\n                        \"type\": \"checkbox\",\n                        \"rightLabel\": \"Hide the 'None' option from the list\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    // Registers additional messages\n    Alpaca.registerMessages({\n        \"noneLabel\": \"None\"\n    });\n\n})(jQuery);\n\n(function($){\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.RadioField = Alpaca.Fields.ListField.extend(\n    /**\n     * @lends Alpaca.Fields.RadioField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Field#getFieldType\n         */\n        getFieldType: function() {\n            return \"radio\";\n        },\n\n        /**\n         * @see Alpaca.Fields.ListField#setup\n         */\n        setup: function()\n        {\n            this.base();\n            \n            if (this.options.name)\n            {\n\t\t\t\tthis.name = this.options.name;\n\t\t\t}\n\t\t\telse if (!this.name)\n            {\n\t\t\t\tthis.name = this.getId() + \"-name\";\n\t\t\t}\n\n            // empty select first to false by default\n            if (Alpaca.isUndefined(this.options.emptySelectFirst))\n            {\n                this.options.emptySelectFirst = false;\n            }\n\n            // assume vertical orientation\n            // empty select first to false by default\n            if (Alpaca.isUndefined(this.options.vertical))\n            {\n                this.options.vertical = true;\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            var self = this;\n\n            var val = null;\n\n            $(this.control).find(\":checked\").each(function() {\n                val = $(this).val();\n\n                val = self.ensureProperType(val);\n            });\n\n            return val;\n        },\n        \n        /**\n         * @see Alpaca.Field#setValue\n         */\n        setValue: function(val)\n        {\n            var self = this;\n\n            // clear all\n            $(this.control).find(\"input\").each(function() {\n                Alpaca.checked($(this), null);\n            });\n\n            // mark selected value\n            if (typeof(val) != \"undefined\")\n            {\n                Alpaca.checked($(self.control).find(\"input[value=\\\"\" + val + \"\\\"]\"), \"checked\");\n            }\n\n            // if none selected and \"emptySelectFirst\", then select\n            if (this.options.emptySelectFirst)\n            {\n                if ($(this.control).find(\"input:checked\").length === 0)\n                {\n                    Alpaca.checked($(self.control).find(\"input:radio\").first(), \"checked\");\n                }\n            }\n\n            this.base(val);\n        },\n\n        initControlEvents: function()\n        {\n            var self = this;\n\n            self.base();\n\n            var inputs = $(this.control).find(\"input\");\n\n            inputs.focus(function(e) {\n                if (!self.suspendBlurFocus)\n                {\n                    self.onFocus.call(self, e);\n                    self.trigger(\"focus\", e);\n                }\n            });\n\n            inputs.blur(function(e) {\n                if (!self.suspendBlurFocus)\n                {\n                    self.onBlur.call(self, e);\n                    self.trigger(\"blur\", e);\n                }\n            });\n        },\n\n        prepareControlModel: function(callback)\n        {\n            var self = this;\n\n            this.base(function(model) {\n\n                model.selectOptions = self.selectOptions;\n                model.removeDefaultNone = self.options.removeDefaultNone;\n\n                callback(model);\n            });\n        },\n        \n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                // if emptySelectFirst and nothing currently checked, then pick first item in the value list\n                // set data and visually select it\n                if (self.options.emptySelectFirst && self.selectOptions && self.selectOptions.length > 0)\n                {\n                    self.data = self.selectOptions[0].value;\n\n                    if ($(\"input:radio:checked\", self.control).length === 0)\n                    {\n                        Alpaca.checked($(self.control).find(\"input:radio[value=\\\"\" + self.data + \"\\\"]\"), \"checked\");\n                    }\n                }\n\n                // stack radio selectors vertically\n                if (self.options.vertical)\n                {\n                    $(self.control).css(\"display\", \"block\");\n                }\n                else\n                {\n                    $(self.control).css(\"display\", \"inline-block\");\n                }\n\n                callback();\n\n            });\n        },\n\n        /**\n         * Ensures that the \"name\" property on the control is kept in sync.\n         */\n        updateDOMElement: function()\n        {\n            this.base();\n\n            $(this.control).find(\"input:radio\").attr(\"name\", this.getName());\n        },\n\n        /**\n         * @see Alpaca.ControlField#onClick\n         */\n        onClick: function(e)\n        {\n            var self = this;\n            var currentValue = self.getValue();\n\n            this.base(e);\n\n            var val = $(e.currentTarget).find(\"input\").val();\n            if (typeof(val) !== \"undefined\")\n            {\n                self.setValue(val);\n                self.refreshValidationState();\n\n                // manually trigger change event\n                if (currentValue !== val) {\n\n                    self.trigger(\"change\");\n                }\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#disable\n         */\n        disable: function()\n        {\n            this.base();\n\n            // for radio buttons, we also mark the outer DIV as disabled to prevent label clicks\n            // and apply some CSS styling\n            this.getFieldEl().addClass(\"disabled\");\n        },\n\n        /**\n         * @see Alpaca.Field#enable\n         */\n        enable: function()\n        {\n            this.base();\n\n            this.getFieldEl().removeClass(\"disabled\");\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Field#getTitle\n         */\n        getTitle: function() {\n            return \"Radio Group Field\";\n        },\n\n        /**\n         * @see Alpaca.Field#getDescription\n         */\n        getDescription: function() {\n            return \"Radio Group Field with list of options.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.ListField#getSchemaOfOptions\n         */\n\t\tgetSchemaOfOptions: function()\n        {\n            return Alpaca.merge(this.base(),{\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"title\": \"Field name\",\n\t\t\t\t\t\t\"description\": \"Field name.\",\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n                    \"emptySelectFirst\": {\n                        \"title\": \"Empty Select First\",\n                        \"description\": \"If the data is empty, then automatically select the first item in the list.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"vertical\": {\n                        \"title\": \"Position the radio selector items vertically\",\n                        \"description\": \"By default, radio controls are stacked vertically.  Set to false if you'd like radio controls to lay out horizontally.\",\n                        \"type\": \"boolean\",\n                        \"default\": true\n                    }\n\t\t\t\t}\n\t\t\t});\n        }\n\n        /* end_builder_helpers */\n        \n    });\n    \n    Alpaca.registerFieldClass(\"radio\", Alpaca.Fields.RadioField);\n    \n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.SelectField = Alpaca.Fields.ListField.extend(\n    /**\n     * @lends Alpaca.Fields.SelectField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Field#getFieldType\n         */\n        getFieldType: function()\n        {\n            return \"select\";\n        },\n\n        /**\n         * @see Alpaca.Fields.ListField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.base();\n\n            if (self.schema[\"type\"] && self.schema[\"type\"] === \"array\")\n            {\n                self.options.multiple = true;\n            }\n\n            // automatically turn on \"hideNone\" if we're in multiselect mode and have the multiselect plugin\n            if (self.options.multiple && $.fn.multiselect)\n            {\n                if (typeof(self.options.hideNone) === \"undefined\")\n                {\n                    self.options.hideNone = true;\n                }\n            }\n\n            // offer some backward compability here as older version of Alpaca used to incorrectly look for\n            // maxItems and minItems on the schema.items subobject.\n            // if not defined properly, we offer some automatic forward migration of these properties\n            if (this.schema.items && this.schema.items.maxItems && typeof(this.schema.maxItems) === \"undefined\") {\n                this.schema.maxItems = this.schema.items.maxItems;\n                delete this.schema.items.maxItems;\n            }\n            if (this.schema.items && this.schema.items.minItems && typeof(this.schema.minItems) === \"undefined\") {\n                this.schema.minItems = this.schema.items.minItems;\n                delete this.schema.items.minItems;\n            }\n\n            if (!self.options.multiselect && $.fn.multiselect)\n            {\n                self.options.multiselect = {};\n            }\n\n            if (self.options.multiselect && typeof(self.options.multiselect.disableIfEmpty) === \"undefined\")\n            {\n                self.options.multiselect.disableIfEmpty = true;\n            }\n        },\n\n        getValue: function()\n        {\n            var self = this;\n\n            if (self.schema.type === \"object\")\n            {\n                return this.data;\n            }\n\n            return this.base();\n        },\n\n\n        /**\n         * @see Alpaca.Field#setValue\n         */\n        setValue: function(val)\n        {\n            var self = this;\n\n            var newScalarVal = self.convertToScalarValue(val);\n            var currentScalarVal = self.convertToScalarValue(self.getValue());\n\n            if (Alpaca.isArray(val))\n            {\n                // if values are different, then set\n                if (!Alpaca.compareArrayContent(newScalarVal, currentScalarVal))\n                {\n                    if (!Alpaca.isEmpty(newScalarVal) && this.control)\n                    {\n                        this.control.val(newScalarVal);\n                    }\n\n                    this.base(val);\n                }\n            }\n            else\n            {\n                var apply = false;\n                if (Alpaca.isEmpty(newScalarVal) && Alpaca.isEmpty(currentScalarVal))\n                {\n                    apply = true;\n                }\n                else if (newScalarVal !== currentScalarVal)\n                {\n                    apply = true;\n                }\n\n                if (apply)\n                {\n                    if (self.control && typeof(newScalarVal) !== \"undefined\" && newScalarVal !== null)\n                    {\n                        self.control.val(newScalarVal);\n                    }\n\n                    this.base(val);\n                }\n            }\n        },\n\n        /**\n         * @see Alpaca.ListField#getEnum\n         */\n        getEnum: function()\n        {\n            if (this.schema)\n            {\n                if (this.schema[\"enum\"])\n                {\n                    return this.schema[\"enum\"];\n                }\n                else if (this.schema[\"type\"] && this.schema[\"type\"] === \"array\" && this.schema[\"items\"] && this.schema[\"items\"][\"enum\"])\n                {\n                    return this.schema[\"items\"][\"enum\"];\n                }\n            }\n        },\n\n        initControlEvents: function()\n        {\n            var self = this;\n\n            self.base();\n\n            if (self.options.multiple)\n            {\n                var button = this.control.parent().find(\"button.multiselect\");\n\n                button.focus(function(e) {\n                    if (!self.suspendBlurFocus)\n                    {\n                        self.onFocus.call(self, e);\n                        self.trigger(\"focus\", e);\n                    }\n                });\n\n                button.blur(function(e) {\n                    if (!self.suspendBlurFocus)\n                    {\n                        self.onBlur.call(self, e);\n                        self.trigger(\"blur\", e);\n                    }\n                });\n            }\n        },\n\n        prepareControlModel: function(callback) {\n            var self = this;\n\n            this.base(function (model) {\n\n                model.selectOptions = self.selectOptions;\n\n                callback(model);\n            });\n        },\n\n        beforeRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                // build out \"displayableText\"\n                var displayableTexts = [];\n                var map = {};\n                for (var i = 0; i < model.selectOptions.length; i++)\n                {\n                    map[model.selectOptions[i].value] = model.selectOptions[i].text;\n                }\n\n                if (Alpaca.isArray(model.data))\n                {\n                    for (var i = 0; i < model.data.length; i++)\n                    {\n                        var text = map[model.data[i]];\n                        if (text)\n                        {\n                            displayableTexts.push(text);\n                        }\n                    }\n                }\n                else\n                {\n                    var text = map[model.data];\n                    if (text)\n                    {\n                        displayableTexts.push(text);\n                    }\n                }\n\n                model.displayableText = displayableTexts.join(\", \");\n\n                callback();\n\n            });\n        },\n\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                // if emptySelectFirst and nothing currently checked, then pick first item in the value list\n                // set data and visually select it\n                if (Alpaca.isUndefined(self.data) && self.options.emptySelectFirst && self.selectOptions && self.selectOptions.length > 0)\n                {\n                    self.data = self.selectOptions[0].value;\n                }\n\n                // do this little trick so that if we have a default value, it gets set during first render\n                // this causes the state of the control\n                if (self.data)\n                {\n                    self.setValue(self.data);\n                }\n\n                // if we are in multiple mode and the bootstrap multiselect plugin is available, bind it in\n                if (self.options.multiple && $.fn.multiselect && !self.isDisplayOnly())\n                {\n                    var settings = null;\n                    if (self.options.multiselect) {\n                        settings = self.options.multiselect;\n                    }\n                    else\n                    {\n                        settings = {};\n                    }\n                    if (!settings.nonSelectedText)\n                    {\n                        settings.nonSelectedText = \"None\";\n                        if (self.options.noneLabel)\n                        {\n                            settings.nonSelectedText = self.options.noneLabel;\n                        }\n                    }\n\n                    $(self.getControlEl()).multiselect(settings);\n                }\n\n                callback();\n\n            });\n        },\n\n        /**\n         * Validate against enum property.\n         *\n         * @returns {Boolean} True if the element value is part of the enum list, false otherwise.\n         */\n        _validateEnum: function()\n        {\n            var _this = this;\n\n            if (this.schema[\"enum\"])\n            {\n                var val = this.data;\n\n                if (!this.isRequired() && Alpaca.isValEmpty(val))\n                {\n                    return true;\n                }\n\n                if (this.options.multiple)\n                {\n                    var isValid = true;\n\n                    if (!val)\n                    {\n                        val = [];\n                    }\n\n                    if (!Alpaca.isArray(val) && !Alpaca.isObject(val))\n                    {\n                        val = [val];\n                    }\n\n                    $.each(val, function(i,v) {\n\n                        var scalarValue = _this.convertToScalarValue(v);\n\n                        var inArray = Alpaca.inArray(_this.schema[\"enum\"], scalarValue);\n                        if (!inArray)\n                        {\n                            isValid = false;\n                        }\n\n                    });\n\n                    return isValid;\n                }\n                else\n                {\n                    // in case we're an array modeled on a single select, just use the 0th element\n                    if (Alpaca.isArray(val)) {\n                        val = val[0];\n                    }\n\n                    var scalarValue = _this.convertToScalarValue(val);\n\n                    return Alpaca.inArray(this.schema[\"enum\"], scalarValue);\n                }\n            }\n            else\n            {\n                return true;\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#onChange\n         */\n        onChange: function(e) {\n\n            var self = this;\n\n            var scalarValue = self.getControlValue();\n\n            self.convertToDataValue(scalarValue, function(err, data) {\n\n                // store back into data element\n                self.data = data;\n\n                // store scalar value onto control\n                self.control.val(scalarValue);\n\n                // trigger observables and updates\n                self.updateObservable();\n                self.triggerUpdate();\n                self.refreshValidationState();\n\n            });\n        },\n\n        /**\n         * Validates if number of items has been less than minItems.\n         * @returns {Boolean} true if number of items has been less than minItems\n         */\n        _validateMinItems: function()\n        {\n            if (this.schema.minItems && this.schema.minItems >= 0)\n            {\n                if ($(\":selected\",this.control).length < this.schema.minItems)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates if number of items has been over maxItems.\n         * @returns {Boolean} true if number of items has been over maxItems\n         */\n        _validateMaxItems: function()\n        {\n            if (this.schema.maxItems && this.schema.maxItems >= 0)\n            {\n                if ($(\":selected\",this.control).length > this.schema.maxItems)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * @see Alpaca.ContainerField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var status = this._validateMaxItems();\n            valInfo[\"tooManyItems\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"tooManyItems\"), [this.schema.maxItems]),\n                \"status\": status\n            };\n\n            status = this._validateMinItems();\n            valInfo[\"notEnoughItems\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"notEnoughItems\"), [this.schema.minItems]),\n                \"status\": status\n            };\n\n            return baseStatus && valInfo[\"tooManyItems\"][\"status\"] && valInfo[\"notEnoughItems\"][\"status\"];\n        },\n\n        /**\n         * @see Alpaca.Field#focus\n         */\n        focus: function(onFocusCallback)\n        {\n            if (this.control && this.control.length > 0)\n            {\n                // set focus onto the select\n                var el = $(this.control).get(0);\n\n                el.focus();\n\n                if (onFocusCallback)\n                {\n                    onFocusCallback(this);\n                }\n            }\n        },\n\n        /**\n         * @override\n         */\n        disable: function()\n        {\n            var self = this;\n\n            this.base();\n\n            if (self.options.multiselect)\n            {\n                $(self.getControlEl()).multiselect(\"disable\");\n            }\n        },\n\n        /**\n         * @override\n         */\n        enable: function()\n        {\n            var self = this;\n\n            this.base();\n\n            if (self.options.multiselect)\n            {\n                $(self.getControlEl()).multiselect(\"enable\");\n            }\n        }\n\n\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Field#getTitle\n         */\n        getTitle: function() {\n            return \"Select Field\";\n        },\n\n        /**\n         * @see Alpaca.Field#getDescription\n         */\n        getDescription: function() {\n            return \"Select Field\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.ListField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"multiple\": {\n                        \"title\": \"Mulitple Selection\",\n                        \"description\": \"Allow multiple selection if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"size\": {\n                        \"title\": \"Displayed Options\",\n                        \"description\": \"Number of options to be shown.\",\n                        \"type\": \"number\"\n                    },\n                    \"emptySelectFirst\": {\n                        \"title\": \"Empty Select First\",\n                        \"description\": \"If the data is empty, then automatically select the first item in the list.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"multiselect\": {\n                        \"title\": \"Multiselect Plugin Settings\",\n                        \"description\": \"Multiselect plugin properties - http://davidstutz.github.io/bootstrap-multiselect\",\n                        \"type\": \"any\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.ListField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"multiple\": {\n                        \"rightLabel\": \"Allow multiple selection ?\",\n                        \"helper\": \"Allow multiple selection if checked\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"size\": {\n                        \"type\": \"integer\"\n                    },\n                    \"emptySelectFirst\": {\n                        \"type\": \"checkbox\",\n                        \"rightLabel\": \"Empty Select First\"\n                    },\n                    \"multiselect\": {\n                        \"type\": \"object\",\n                        \"rightLabel\": \"Multiselect plugin properties - http://davidstutz.github.io/bootstrap-multiselect\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n\n    });\n\n    Alpaca.registerFieldClass(\"select\", Alpaca.Fields.SelectField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.NumberField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.NumberField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            // default html5 input type = \"number\";\n            //this.inputType = \"number\";\n            // TODO: we can't do this because Chrome screws up it's handling of number type\n            // and prevents us from validating properly\n            // @see http://stackoverflow.com/questions/16420828/jquery-val-refuses-to-return-non-numeric-input-from-a-number-field-under-chrome\n\n            this.base();\n\n            if (typeof(this.options.numericEntry) === \"undefined\")\n            {\n                this.options.numericEntry = false;\n            }\n\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"number\";\n        },\n\n        /**\n         * @see Alpaca.ControlField#postRender\n         */\n        postRender: function(callback) {\n\n            var self = this;\n\n            this.base(function() {\n\n                if (self.control)\n                {\n                    self.on(\"keypress\", function(e) {\n\n                        var key = e.charCode || e.keyCode || 0;\n\n                        var valid = true;\n\n                        if (self.options.numericEntry) {\n                            valid = valid && (key >= 48 && key <= 57);\n                        }\n\n                        if(!valid) {\n                            // don't even allow entry of invalid characters\n                            e.preventDefault();\n                            e.stopImmediatePropagation();\n                        }\n\n                        return valid;\n                    });\n                }\n\n                callback();\n            });\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            var val = this._getControlVal(true);\n\n            if (typeof(val) == \"undefined\" || \"\" == val)\n            {\n                return val;\n            }\n\n            return parseFloat(val);\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function() {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var status = this._validateNumber();\n            valInfo[\"stringNotANumber\"] = {\n                \"message\": status ? \"\" : this.getMessage(\"stringNotANumber\"),\n                \"status\": status\n            };\n\n            status = this._validateDivisibleBy();\n            valInfo[\"stringDivisibleBy\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"stringDivisibleBy\"), [this.schema.divisibleBy]),\n                \"status\": status\n            };\n\n            status = this._validateMaximum();\n            valInfo[\"stringValueTooLarge\"] = {\n                \"message\": \"\",\n                \"status\": status\n            };\n            if (!status) {\n                if (this.schema.exclusiveMaximum) {\n                    valInfo[\"stringValueTooLarge\"][\"message\"] = Alpaca.substituteTokens(this.getMessage(\"stringValueTooLargeExclusive\"), [this.schema.maximum]);\n                } else {\n                    valInfo[\"stringValueTooLarge\"][\"message\"] = Alpaca.substituteTokens(this.getMessage(\"stringValueTooLarge\"), [this.schema.maximum]);\n                }\n            }\n\n            status = this._validateMinimum();\n            valInfo[\"stringValueTooSmall\"] = {\n                \"message\": \"\",\n                \"status\": status\n            };\n            if (!status) {\n                if (this.schema.exclusiveMinimum) {\n                    valInfo[\"stringValueTooSmall\"][\"message\"] = Alpaca.substituteTokens(this.getMessage(\"stringValueTooSmallExclusive\"), [this.schema.minimum]);\n                } else {\n                    valInfo[\"stringValueTooSmall\"][\"message\"] = Alpaca.substituteTokens(this.getMessage(\"stringValueTooSmall\"), [this.schema.minimum]);\n                }\n            }\n\n            status = this._validateMultipleOf();\n            valInfo[\"stringValueNotMultipleOf\"] = {\n                \"message\": \"\",\n                \"status\": status\n            };\n            if (!status)\n            {\n                valInfo[\"stringValueNotMultipleOf\"][\"message\"] = Alpaca.substituteTokens(this.getMessage(\"stringValueNotMultipleOf\"), [this.schema.multipleOf]);\n            }\n\n            // hand back a true/false\n            return baseStatus && valInfo[\"stringNotANumber\"][\"status\"] && valInfo[\"stringDivisibleBy\"][\"status\"] && valInfo[\"stringValueTooLarge\"][\"status\"] && valInfo[\"stringValueTooSmall\"][\"status\"] && valInfo[\"stringValueNotMultipleOf\"][\"status\"] && valInfo[\"invalidPattern\"][\"status\"] && valInfo[\"stringTooLong\"][\"status\"] && valInfo[\"stringTooShort\"][\"status\"];\n        },\n\n        /**\n         * Validates against required property.\n         *\n         * @returns {Boolean} False if this field value is empty but required, true otherwise.\n         */\n        _validateOptional: function() {\n\n            if (!this.isDisplayOnly())\n            {\n                if (this.isRequired() && Alpaca.isValEmpty($(this.control).val()))\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates if it is a float number.\n         * @returns {Boolean} true if it is a float number\n         */\n        _validateNumber: function() {\n\n            // get value as text\n            var textValue = this._getControlVal();\n            if (typeof(textValue) === \"number\")\n            {\n                textValue = \"\" + textValue;\n            }\n\n            // allow empty\n            if (Alpaca.isValEmpty(textValue)) {\n                return true;\n            }\n\n            // check if valid number format\n            var validNumber = Alpaca.testRegex(Alpaca.regexps.number, textValue);\n            if (!validNumber)\n            {\n                return false;\n            }\n\n            // quick check to see if what they entered was a number\n            var floatValue = this.getValue();\n            if (isNaN(floatValue)) {\n                return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates divisibleBy constraint.\n         * @returns {Boolean} true if it passes the divisibleBy constraint.\n         */\n        _validateDivisibleBy: function() {\n            var floatValue = this.getValue();\n            if (!Alpaca.isEmpty(this.schema.divisibleBy)) {\n\n                // mod\n                if (floatValue % this.schema.divisibleBy !== 0)\n                {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /**\n         * Validates maximum constraint.\n         * @returns {Boolean} true if it passes the maximum constraint.\n         */\n        _validateMaximum: function() {\n            var floatValue = this.getValue();\n\n            if (!Alpaca.isEmpty(this.schema.maximum)) {\n                if (floatValue > this.schema.maximum) {\n                    return false;\n                }\n\n                if (!Alpaca.isEmpty(this.schema.exclusiveMaximum)) {\n                    if (floatValue == this.schema.maximum && this.schema.exclusiveMaximum) { // jshint ignore:line\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates maximum constraint.\n         * @returns {Boolean} true if it passes the minimum constraint.\n         */\n        _validateMinimum: function() {\n            var floatValue = this.getValue();\n\n            if (!Alpaca.isEmpty(this.schema.minimum)) {\n                if (floatValue < this.schema.minimum) {\n                    return false;\n                }\n\n                if (!Alpaca.isEmpty(this.schema.exclusiveMinimum)) {\n                    if (floatValue == this.schema.minimum && this.schema.exclusiveMinimum) { // jshint ignore:line\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates multipleOf constraint.\n         * @returns {Boolean} true if it passes the multipleOf constraint.\n         */\n        _validateMultipleOf: function() {\n            var floatValue = this.getValue();\n\n            if (!Alpaca.isEmpty(this.schema.multipleOf)) {\n                if (floatValue && this.schema.multipleOf !== 0)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getType\n         */\n        getType: function() {\n            return \"number\";\n        },\n\n        /**\n         * @see Alpaca.ControlField#onKeyPress\n         */\n        onKeyPress: function(e)\n        {\n            var self = this;\n\n            // ignore tab and arrow keys\n            if (e.keyCode === 9 || e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40 ) {\n                return;\n            }\n\n            if (e.keyCode === 8) // backspace\n            {\n                if (!Alpaca.isEmpty(self.schema.minLength) && (self.options.constrainLengths || self.options.constrainMinLength))\n                {\n                    var newValue = self.getValue() || \"\";\n                    if(Alpaca.isNumber(newValue)) {\n                        newValue = newValue.toString();\n                    }\n                    if (newValue.length <= self.schema.minLength)\n                    {\n                        // kill event\n                        e.preventDefault();\n                        e.stopImmediatePropagation();\n                    }\n                }\n            }\n            else\n            {\n                if (!Alpaca.isEmpty(self.schema.maxLength) && (self.options.constrainLengths || self.options.constrainMaxLength))\n                {\n                    var newValue = self.getValue() || \"\";\n                    if(Alpaca.isNumber(newValue)) {\n                        newValue = newValue.toString();\n                    }\n                    if (newValue.length >= self.schema.maxLength)\n                    {\n                        // kill event\n                        e.preventDefault();\n                        e.stopImmediatePropagation();\n                    }\n                }\n            }\n\n            if (e.keyCode === 32) // space\n            {\n                if (self.options.disallowEmptySpaces)\n                {\n                    // kill event\n                    e.preventDefault();\n                    e.stopImmediatePropagation();\n                }\n            }\n        },\n\n        onKeyUp: function(e)\n        {\n            var self = this;\n\n            // if applicable, update the max length indicator\n            self.updateMaxLengthIndicator();\n\n            // trigger \"fieldkeyup\"\n            $(this.field).trigger(\"fieldkeyup\");\n        },\n\n        /* builder_helpers */\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"multipleOf\": {\n                        \"title\": \"Multiple Of\",\n                        \"description\": \"Property value must be a multiple of the multipleOf schema property such that division by this value yields an interger (mod zero).\",\n                        \"type\": \"number\"\n                    },\n                    \"minimum\": {\n                        \"title\": \"Minimum\",\n                        \"description\": \"Minimum value of the property.\",\n                        \"type\": \"number\"\n                    },\n                    \"maximum\": {\n                        \"title\": \"Maximum\",\n                        \"description\": \"Maximum value of the property.\",\n                        \"type\": \"number\"\n                    },\n                    \"exclusiveMinimum\": {\n                        \"title\": \"Exclusive Minimum\",\n                        \"description\": \"Property value can not equal the number defined by the minimum schema property.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"exclusiveMaximum\": {\n                        \"title\": \"Exclusive Maximum\",\n                        \"description\": \"Property value can not equal the number defined by the maximum schema property.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsSchema\n         */\n        getOptionsForSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"multipleOf\": {\n                        \"title\": \"Multiple Of\",\n                        \"description\": \"The value must be a integral multiple of the property\",\n                        \"type\": \"number\"\n                    },\n                    \"minimum\": {\n                        \"title\": \"Minimum\",\n                        \"description\": \"Minimum value of the property\",\n                        \"type\": \"number\"\n                    },\n                    \"maximum\": {\n                        \"title\": \"Maximum\",\n                        \"description\": \"Maximum value of the property\",\n                        \"type\": \"number\"\n                    },\n                    \"exclusiveMinimum\": {\n                        \"rightLabel\": \"Exclusive minimum ?\",\n                        \"helper\": \"Field value must be greater than but not equal to this number if checked\",\n                        \"type\": \"checkbox\"\n                    },\n                    \"exclusiveMaximum\": {\n                        \"rightLabel\": \"Exclusive Maximum ?\",\n                        \"helper\": \"Field value must be less than but not equal to this number if checked\",\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.NumberField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"numericEntry\": {\n                        \"title\": \"Numeric Entry\",\n                        \"description\": \"Whether to constrain data entry key presses to numeric values (0-9)\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    }\n                }\n            });\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Number Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Field for float numbers.\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    // Additional Registrations\n    Alpaca.registerMessages({\n        \"stringValueTooSmall\": \"The minimum value for this field is {0}\",\n        \"stringValueTooLarge\": \"The maximum value for this field is {0}\",\n        \"stringValueTooSmallExclusive\": \"Value of this field must be greater than {0}\",\n        \"stringValueTooLargeExclusive\": \"Value of this field must be less than {0}\",\n        \"stringDivisibleBy\": \"The value must be divisible by {0}\",\n        \"stringNotANumber\": \"This value is not a number.\",\n        \"stringValueNotMultipleOf\": \"This value is not a multiple of {0}\"\n    });\n    Alpaca.registerFieldClass(\"number\", Alpaca.Fields.NumberField);\n    Alpaca.registerDefaultSchemaFieldMapping(\"number\", \"number\");\n\n})(jQuery);\n\n/*jshint -W083 */ // inline functions are used safely\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.ArrayField = Alpaca.ContainerField.extend(\n    /**\n     * @lends Alpaca.Fields.ArrayField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Field#getFieldType\n         */\n        getFieldType: function() {\n            return \"array\";\n        },\n\n        /**\n         * @see Alpaca.ContainerField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.base();\n\n            var containerItemTemplateType = self.resolveContainerItemTemplateType();\n            if (!containerItemTemplateType)\n            {\n                return Alpaca.throwErrorWithCallback(\"Unable to find template descriptor for container item: \" + self.getFieldType());\n            }\n\n            this.containerItemTemplateDescriptor = self.view.getTemplateDescriptor(\"container-\" + containerItemTemplateType + \"-item\", self);\n\n            if (!this.options.toolbarStyle) {\n                this.options.toolbarStyle = Alpaca.isEmpty(this.view.toolbarStyle) ? \"button\" : this.view.toolbarStyle;\n            }\n            if (!this.options.toolbarStyle) {\n                this.options.toolbarStyle = \"button\";\n            }\n\n            if (!this.options.actionbarStyle) {\n                this.options.actionbarStyle = Alpaca.isEmpty(this.view.actionbarStyle) ? \"top\" : this.view.actionbarStyle;\n            }\n            if (!this.options.actionbarStyle) {\n                this.options.actionbarStyle = \"top\";\n            }\n\n            if (!this.schema.items)\n            {\n                this.schema.items = {};\n            }\n\n            if (!this.options.items)\n            {\n                this.options.items = {};\n            }\n\n            // offer some backward compability here as older version of Alpaca used to incorrectly look for\n            // maxItems, minItems and uniqueItems on the schema.items subobject.\n            // if not defined properly, we offer some automatic forward migration of these properties\n            if (this.schema.items && this.schema.items.maxItems && typeof(this.schema.maxItems) === \"undefined\") {\n                this.schema.maxItems = this.schema.items.maxItems;\n                delete this.schema.items.maxItems;\n            }\n            if (this.schema.items && this.schema.items.minItems && typeof(this.schema.minItems) === \"undefined\") {\n                this.schema.minItems = this.schema.items.minItems;\n                delete this.schema.items.minItems;\n            }\n            if (this.schema.items && this.schema.items.uniqueItems && typeof(this.schema.uniqueItems) === \"undefined\") {\n                this.schema.uniqueItems = this.schema.items.uniqueItems;\n                delete this.schema.items.uniqueItems;\n            }\n\n            // determine whether we are using \"ruby on rails\" compatibility mode\n            this.options.rubyrails = false;\n            if (this.parent && this.parent.options && this.parent.options.form && this.parent.options.form.attributes)\n            {\n                if (!Alpaca.isEmpty(this.parent.options.form.attributes.rubyrails))\n                {\n                    this.options.rubyrails = true;\n                }\n            }\n\n            var toolbarSticky = Alpaca.defaultToolbarSticky;\n\n            if (!Alpaca.isEmpty(this.view.toolbarSticky))\n            {\n                toolbarSticky = this.view.toolbarSticky;\n            }\n\n            if (!Alpaca.isEmpty(this.options.toolbarSticky))\n            {\n                toolbarSticky = this.options.toolbarSticky;\n            }\n\n            this.options.toolbarSticky = toolbarSticky;\n\n            // by default, hide toolbar when children.count > 0\n            if (typeof(self.options.hideToolbarWithChildren) === \"undefined\")\n            {\n                self.options.hideToolbarWithChildren = true;\n            }\n\n            // Enable forceRevalidation option so that any change in children will trigger parent's revalidation.\n            if (this.schema.items && this.schema.uniqueItems)\n            {\n                Alpaca.mergeObject(this.options, {\n                    \"forceRevalidation\" : true\n                });\n            }\n\n            if (typeof(this.data) == \"undefined\")\n            {\n                this.data = [];\n            }\n\n            if (this.data == null)\n            {\n                this.data = [];\n            }\n\n            if (\"\" == this.data)\n            {\n                this.data = [];\n            }\n\n            if (Alpaca.isString(this.data))\n            {\n                // assume to be a serialized array or object, convert\n                try\n                {\n                    var parsedJSON = Alpaca.parseJSON(this.data);\n\n                    if (!Alpaca.isArray(parsedJSON) && !Alpaca.isObject(parsedJSON))\n                    {\n                        Alpaca.logWarn(\"ArrayField parsed string data but it was not an array: \" + this.data);\n                        return;\n                    }\n\n                    this.data = parsedJSON;\n                }\n                catch (e)\n                {\n                    // assume just a string value, put into array\n                    this.data = [this.data];\n                }\n            }\n\n            if (!Alpaca.isArray(this.data) && !Alpaca.isObject(this.data))\n            {\n                Alpaca.logWarn(\"ArrayField data is not an array: \" + JSON.stringify(this.data, null, \"  \"));\n                return;\n            }\n\n            //\n            // ACTIONS\n            //\n            var applyAction = function(actions, key, actionConfig) {\n                var action = self.findAction(actions, key);\n                if (!action) {\n                    action = {\n                        \"core\": true\n                    };\n                    actions.push(action);\n                }\n                for (var k in actionConfig) {\n                    if (!action[k]) {\n                        action[k] = actionConfig[k];\n                    }\n                }\n            };\n            var cleanupActions = function(actions, showLabels) {\n                var i = 0;\n                do {\n\n                    // assume enabled by default\n                    if (typeof(actions[i].enabled) === \"undefined\") {\n                        actions[i].enabled = true;\n                    }\n\n                    // hide label if global disable\n                    if (!showLabels) {\n                        delete actions[i].label;\n                    }\n\n                    if (!actions[i].enabled) {\n                        actions.splice(i, 1);\n                    } else {\n                        i++;\n                    }\n\n                } while (i < actions.length);\n\n                // sort so that core actions appear first\n                actions.sort(function(a, b) {\n                    if (a.core && !b.core) {\n                        return -1;\n                    }\n                    if (!a.core && b.core) {\n                        return 1;\n                    }\n                    return 0;\n                });\n            };\n\n            // set up default actions for the top array toolbar\n            self.toolbar = {};\n            if (self.options.toolbar)\n            {\n                for (var k in self.options.toolbar) {\n                    self.toolbar[k] = Alpaca.copyOf(self.options.toolbar[k]);\n                }\n            }\n            if (typeof(self.toolbar.showLabels) === \"undefined\") {\n                self.toolbar.showLabels = true;\n            }\n            if (!self.toolbar.actions) {\n                self.toolbar.actions = [];\n            }\n            applyAction(self.toolbar.actions, \"add\", {\n                \"label\": self.getMessage(\"addItemButtonLabel\"),\n                \"action\": \"add\",\n                \"iconClass\": self.view.getStyle(\"addIcon\"),\n                \"click\": function(key, action) {\n\n                    self.handleToolBarAddItemClick(function(item) {\n                        // done\n                    });\n                }\n            });\n            cleanupActions(self.toolbar.actions, self.toolbar.showLabels);\n\n            // determine which actions to add into the per-item actionbar\n            self.actionbar = {};\n            if (self.options.actionbar)\n            {\n                for (var k2 in self.options.actionbar) {\n                    self.actionbar[k2] = Alpaca.copyOf(self.options.actionbar[k2]);\n                }\n            }\n            if (typeof(self.actionbar.showLabels) === \"undefined\") {\n                self.actionbar.showLabels = false;\n            }\n            if (!self.actionbar.actions) {\n                self.actionbar.actions = [];\n            }\n            applyAction(self.actionbar.actions, \"add\", {\n                \"label\": self.getMessage(\"addButtonLabel\"),\n                \"action\": \"add\",\n                \"iconClass\": self.view.getStyle(\"addIcon\"),\n                \"click\": function(key, action, itemIndex) {\n\n                    self.handleActionBarAddItemClick(itemIndex, function(item) {\n                        // done\n                    });\n                }\n            });\n            applyAction(self.actionbar.actions, \"remove\", {\n                \"label\": self.getMessage(\"removeButtonLabel\"),\n                \"action\": \"remove\",\n                \"iconClass\": self.view.getStyle(\"removeIcon\"),\n                \"click\": function(key, action, itemIndex) {\n\n                    self.handleActionBarRemoveItemClick(itemIndex, function(item) {\n                        // done\n                    });\n                }\n            });\n            applyAction(self.actionbar.actions, \"up\", {\n                \"label\": self.getMessage(\"upButtonLabel\"),\n                \"action\": \"up\",\n                \"iconClass\": self.view.getStyle(\"upIcon\"),\n                \"click\": function(key, action, itemIndex) {\n\n                    self.handleActionBarMoveItemUpClick(itemIndex, function() {\n                        // done\n                    });\n                }\n            });\n            applyAction(self.actionbar.actions, \"down\", {\n                \"label\": self.getMessage(\"downButtonLabel\"),\n                \"action\": \"down\",\n                \"iconClass\": self.view.getStyle(\"downIcon\"),\n                \"click\": function(key, action, itemIndex) {\n\n                    self.handleActionBarMoveItemDownClick(itemIndex, function() {\n                        // done\n                    });\n                }\n            });\n            cleanupActions(self.actionbar.actions, self.actionbar.showLabels);\n\n            var len = this.data.length;\n            var data = $.extend(true, {}, this.data);\n            data.length = len;\n\n            this.data = Array.prototype.slice.call(data);\n        },\n\n        /**\n         * Picks apart the array and set onto child fields.\n         * @see Alpaca.ContainerField#setup\n         */\n        setValue: function(data)\n        {\n            var self = this;\n\n            if (!data || !Alpaca.isArray(data))\n            {\n                return;\n            }\n\n            // set fields\n            var i = 0;\n            do\n            {\n                if (i < self.children.length)\n                {\n                    var childField = self.children[i];\n\n                    if (data.length > i)\n                    {\n                        childField.setValue(data[i]);\n                        i++;\n                    }\n                    else\n                    {\n                        self.removeItem(i);\n                    }\n                }\n            }\n            while (i < self.children.length);\n\n            // if the number of items in the data is greater than the number of existing child elements\n            // then we need to add the new fields\n            if (i < data.length)\n            {\n                self.resolveItemSchemaOptions(function(itemSchema, itemOptions, circular) {\n\n                    if (!itemSchema)\n                    {\n                        Alpaca.logDebug(\"Unable to resolve schema for item: \" + i);\n                    }\n\n                    // we only allow addition if the resolved schema isn't circularly referenced\n                    // or the schema is optional\n                    if (circular)\n                    {\n                        return Alpaca.throwErrorWithCallback(\"Circular reference detected for schema: \" + JSON.stringify(itemSchema), self.errorCallback);\n                    }\n\n                    // waterfall functions\n                    var funcs = [];\n\n                    while (i < data.length)\n                    {\n                        var f = (function(i, data)\n                        {\n                            return function(callback)\n                            {\n                                self.addItem(i, itemSchema, itemOptions, data[i], function() {\n\n                                    // by the time we get here, we may have constructed a very large child chain of\n                                    // sub-dependencies and so we use nextTick() instead of a straight callback so as to\n                                    // avoid blowing out the stack size\n                                    Alpaca.nextTick(function() {\n                                        callback();\n                                    });\n\n                                });\n                            };\n                        })(i, data);\n\n                        funcs.push(f);\n\n                        i++;\n                    }\n\n                    Alpaca.series(funcs, function() {\n                        // nothing\n                    });\n                });\n            }\n\n        },\n\n        /**\n         * @see Alpaca.ContainerField#getContainerValue\n         */\n        getContainerValue: function()\n        {\n            // if we're empty and we're also not required, then we hand back undefined\n            if (this.children.length === 0 && !this.isRequired())\n            {\n                return [];\n            }\n\n            // otherwise, construct an array and hand it back\n            var o = [];\n            for (var i = 0; i < this.children.length; i++)\n            {\n                var v = this.children[i].getValue();\n\n                if(v !== v) {\n                    // NaN\n                    v = undefined;\n                }\n\n                if (typeof(v) !== \"undefined\")\n                {\n                    o.push(v);\n                }\n            }\n            return o;\n        },\n\n        /**\n         * @override\n         *\n         * Creates sub-items for this object.\n         *\n         * @param callback\n         */\n        createItems: function(callback)\n        {\n            var self = this;\n\n            var items = [];\n\n            if (self.data && self.data.length > 0)\n            {\n                // all items within the array have the same schema and options\n                // so we only need to load this once\n                self.resolveItemSchemaOptions(function(itemSchema, itemOptions, circular) {\n\n                    // we only allow addition if the resolved schema isn't circularly referenced\n                    // or the schema is optional\n                    if (circular)\n                    {\n                        return Alpaca.throwErrorWithCallback(\"Circular reference detected for schema: \" + JSON.stringify(itemSchema), self.errorCallback);\n                    }\n\n                    // waterfall functions\n                    var funcs = [];\n                    for (var index = 0; index < self.data.length; index++)\n                    {\n                        var value = self.data[index];\n\n                        var pf = (function(index, value)\n                        {\n                            return function(_done)\n                            {\n                                self.createItem(index, itemSchema, itemOptions, value, function(item) {\n\n                                    items.push(item);\n\n                                    // by the time we get here, we may have constructed a very large child chain of\n                                    // sub-dependencies and so we use nextTick() instead of a straight callback so as to\n                                    // avoid blowing out the stack size\n                                    //Alpaca.nextTick(function() {\n                                    //    callback();\n                                    //});\n\n                                    _done();\n                                });\n                            };\n\n                        })(index, value);\n\n                        funcs.push(pf);\n                    }\n\n                    // run on the next-tick\n                    Alpaca.nextTick(function() {\n                        Alpaca.series(funcs, function(err) {\n                            callback(items);\n                        });\n                    });\n\n                });\n            }\n            else\n            {\n                callback(items);\n            }\n        },\n\n        /**\n         * Workhorse method for createItem.\n         *\n         * @param index\n         * @param itemSchema\n         * @param itemOptions\n         * @param itemData\n         * @param postRenderCallback\n         * @return {*}\n         * @private\n         */\n        createItem: function(index, itemSchema, itemOptions, itemData, postRenderCallback)\n        {\n            var self = this;\n\n            if (self._validateEqualMaxItems())\n            {\n                var formEl = $(\"<div></div>\");\n                formEl.alpaca({\n                    \"data\" : itemData,\n                    \"options\": itemOptions,\n                    \"schema\" : itemSchema,\n                    \"view\" : this.view.id ? this.view.id : this.view,\n                    \"connector\": this.connector,\n                    \"error\": function(err)\n                    {\n                        self.destroy();\n\n                        self.errorCallback.call(self, err);\n                    },\n                    \"notTopLevel\":true,\n                    \"render\": function(fieldControl, cb) {\n                        // render\n                        fieldControl.parent = self;\n                        // setup item path\n                        fieldControl.path = self.path + \"[\" + index + \"]\";\n                        //fieldControl.nameCalculated = true;\n                        fieldControl.render(null, function() {\n                            if (cb) {\n                                cb();\n                            }\n                        });\n                    },\n                    \"postRender\": function(control)\n                    {\n                        // alpaca finished\n\n                        // render the outer container\n                        var containerItemEl = Alpaca.tmpl(self.containerItemTemplateDescriptor, {\n                            \"id\": self.getId(),\n                            \"name\": control.name,\n                            \"parentFieldId\": self.getId(),\n                            \"actionbarStyle\": self.options.actionbarStyle,\n                            \"view\": self.view,\n                            \"data\": itemData\n                        });\n\n                        // find the insertion point\n                        var insertionPointEl = $(containerItemEl).find(\".\" + Alpaca.MARKER_CLASS_CONTAINER_FIELD_ITEM_FIELD);\n                        if (insertionPointEl.length === 0)\n                        {\n                            if ($(containerItemEl).hasClass(Alpaca.MARKER_CLASS_CONTAINER_FIELD_ITEM_FIELD)) {\n                                insertionPointEl = $(containerItemEl);\n                            }\n                        }\n                        if (insertionPointEl.length === 0)\n                        {\n                            self.errorCallback.call(self, {\n                                \"message\": \"Cannot find insertion point for field: \" + self.getId()\n                            });\n                            return;\n                        }\n\n                        // copy into place\n                        $(insertionPointEl).before(control.getFieldEl());\n                        $(insertionPointEl).remove();\n\n                        control.containerItemEl = containerItemEl;\n\n                        // TODO: verify, as per: https://github.com/emircal/alpaca/commit/4061c33787bd7a2b86fb613317374d365d9acc92\n                        // Reset hideInitValidationError after render\n                        Alpaca.fieldApplyFieldAndChildren(control, function(_control) {\n                            _control.hideInitValidationError = false;\n                        });\n\n                        // PR: https://github.com/gitana/alpaca/pull/124\n                        if (Alpaca.isFunction(self.options.items.postRender))\n                        {\n                            self.options.items.postRender.call(control, insertionPointEl);\n                        }\n\n                        if (postRenderCallback)\n                        {\n                            postRenderCallback(control);\n                        }\n                    }\n                });\n            }\n        },\n\n        /**\n         * Determines the schema and options to utilize for items within this array.\n         *\n         * @param callback\n         */\n        resolveItemSchemaOptions: function(callback)\n        {\n            var _this = this;\n\n            var completionFunction = function(resolvedItemSchema, resolvedItemOptions, circular)\n            {\n                // special caveat:  if we're in read-only mode, the child must also be in read-only mode\n                if (_this.options.readonly) {\n                    resolvedItemOptions.readonly = true;\n                }\n\n                callback(resolvedItemSchema, resolvedItemOptions, circular);\n            };\n\n            var itemOptions;\n            // legacy support for options.fields.item\n            if (!itemOptions && _this.options && _this.options.fields && _this.options.fields.item) {\n                itemOptions = _this.options.fields.item;\n            }\n            if (!itemOptions && _this.options && _this.options.items) {\n                itemOptions = _this.options.items;\n            }\n            var itemSchema;\n            if (_this.schema && _this.schema.items) {\n                itemSchema = _this.schema.items;\n            }\n\n            // handle $ref\n            if (itemSchema && itemSchema[\"$ref\"])\n            {\n                var referenceId = itemSchema[\"$ref\"];\n\n                var topField = this;\n                var fieldChain = [topField];\n                while (topField.parent)\n                {\n                    topField = topField.parent;\n                    fieldChain.push(topField);\n                }\n\n                var originalItemSchema = itemSchema;\n                var originalItemOptions = itemOptions;\n\n                Alpaca.loadRefSchemaOptions(topField, referenceId, function(itemSchema, itemOptions) {\n\n                    // walk the field chain to see if we have any circularity\n                    var refCount = 0;\n                    for (var i = 0; i < fieldChain.length; i++)\n                    {\n                        if (fieldChain[i].schema)\n                        {\n                            if ( (fieldChain[i].schema.id === referenceId) || (fieldChain[i].schema.id === \"#\" + referenceId))\n                            {\n                                refCount++;\n                            }\n                            else if ( (fieldChain[i].schema[\"$ref\"] === referenceId))\n                            {\n                                refCount++;\n                            }\n                        }\n                    }\n\n                    // use a higher limit for arrays, perhaps 10\n                    //var circular = (refCount > 1);\n                    var circular = (refCount > 10);\n\n                    var resolvedItemSchema = {};\n                    if (originalItemSchema) {\n                        Alpaca.mergeObject(resolvedItemSchema, originalItemSchema);\n                    }\n                    if (itemSchema)\n                    {\n                        Alpaca.mergeObject(resolvedItemSchema, itemSchema);\n                    }\n                    delete resolvedItemSchema.id;\n\n                    var resolvedItemOptions = {};\n                    if (originalItemOptions) {\n                        Alpaca.mergeObject(resolvedItemOptions, originalItemOptions);\n                    }\n                    if (itemOptions)\n                    {\n                        Alpaca.mergeObject(resolvedItemOptions, itemOptions);\n                    }\n\n                    Alpaca.nextTick(function() {\n                        completionFunction(resolvedItemSchema, resolvedItemOptions, circular);\n                    });\n                });\n            }\n            else\n            {\n                Alpaca.nextTick(function() {\n                    completionFunction(itemSchema, itemOptions);\n                });\n            }\n        },\n\n        /**\n         * @see Alpaca.ContainerField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var status = this._validateUniqueItems();\n            valInfo[\"valueNotUnique\"] = {\n                \"message\": status ? \"\" : this.getMessage(\"valueNotUnique\"),\n                \"status\": status\n            };\n\n            status = this._validateMaxItems();\n            valInfo[\"tooManyItems\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"tooManyItems\"), [this.schema.maxItems]),\n                \"status\": status\n            };\n\n            status = this._validateMinItems();\n            valInfo[\"notEnoughItems\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"notEnoughItems\"), [this.schema.minItems]),\n                \"status\": status\n            };\n\n            return baseStatus && valInfo[\"valueNotUnique\"][\"status\"] && valInfo[\"tooManyItems\"][\"status\"] && valInfo[\"notEnoughItems\"][\"status\"];\n        },\n\n        /**\n         * Validates if the number of items has been reached to maxItems.\n         * @returns {Boolean} true if the number of items has been reached to maxItems\n         */\n        _validateEqualMaxItems: function()\n        {\n            if (this.schema.maxItems && this.schema.maxItems >= 0)\n            {\n                if (this.getSize() >= this.schema.maxItems)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates if the number of items has been reached to minItems.\n         * @returns {Boolean} true if number of items has been reached to minItems\n         */\n        _validateEqualMinItems: function()\n        {\n            if (this.schema.minItems && this.schema.minItems >= 0)\n            {\n                if (this.getSize() <= this.schema.minItems)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates if number of items has been less than minItems.\n         * @returns {Boolean} true if number of items has been less than minItems\n         */\n        _validateMinItems: function()\n        {\n            if (this.schema.minItems && this.schema.minItems >= 0)\n            {\n                if (this.getSize() < this.schema.minItems)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates if number of items has been over maxItems.\n         * @returns {Boolean} true if number of items has been over maxItems\n         */\n        _validateMaxItems: function()\n        {\n            if (this.schema.maxItems && this.schema.maxItems >= 0)\n            {\n                if (this.getSize() > this.schema.maxItems)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validates if all items are unique.\n         * @returns {Boolean} true if all items are unique.\n         */\n        _validateUniqueItems: function()\n        {\n            if (this.schema.items && this.schema.uniqueItems)\n            {\n                var hash = {};\n\n                for (var i = 0; i < this.children.length; i++)\n                {\n                    var key = this.children[i].getValue();\n                    if (!key) {\n                        key = \"\";\n                    }\n\n                    if (hash[key])\n                    {\n                        return false;\n                    }\n\n                    hash[key] = true;\n                }\n            }\n\n            return true;\n        },\n\n        findAction: function(actionsArray, actionKey)\n        {\n            var action = null;\n\n            $.each(actionsArray, function(i, v) {\n                if (v.action === actionKey) // jshint ignore:line\n                {\n                    action = v;\n                }\n            });\n\n            return action;\n        },\n\n        postRender: function(callback)\n        {\n            var self = this;\n\n            this.base(function() {\n\n                //  if there are zero children, show the array toolbar\n                self.updateToolbars();\n\n                callback();\n\n            });\n        },\n\n        /*\n        afterApplyCreatedItems: function(model, callback)\n        {\n            var self = this;\n\n            //  if there are zero children, show the array toolbar\n            self.updateToolbars();\n\n            callback();\n        },\n        */\n\n        /**\n         * Returns number of children.\n         */\n        getSize: function() {\n            return this.children.length;\n        },\n\n        /**\n         * @OVERRIDE\n         *\n         * Adjust the path and name ahead of refreshing the DOM.\n         */\n        updateDOMElement: function()\n        {\n            this.updatePathAndName();\n\n            this.base();\n        },\n\n        /**\n         * This method gets invoked after items are dynamically added, removed or moved around in the child chain.\n         * It adjusts classes on child DOM elements to make sure they're correct.\n         */\n        updatePathAndName: function()\n        {\n            var self = this;\n\n            var updateChildrenPathAndName = function(parent)\n            {\n                if (parent.children)\n                {\n                    $.each(parent.children, function(i, v) {\n\n                        if (parent.prePath && Alpaca.startsWith(v.path, parent.prePath))\n                        {\n                            v.prePath = v.path;\n                            v.path = v.path.replace(parent.prePath, parent.path);\n                        }\n\n                        // re-calculate name\n                        if (parent.preName && Alpaca.startsWith(v.name, parent.preName))\n                        {\n                            v.preName = v.name;\n                            v.name = v.name.replace(parent.preName, parent.name);\n                            if (v.field)\n                            {\n                                $(v.field).attr(\"name\", v.name);\n                            }\n                        }\n\n                        updateChildrenPathAndName(v);\n                    });\n                }\n            };\n\n            if (this.children && this.children.length > 0)\n            {\n                $.each(this.children, function(i, v) {\n\n                    var idx = v.path.lastIndexOf('/');\n                    var lastSegment = v.path.substring(idx+1);\n                    if (lastSegment.indexOf(\"[\") < 0 && lastSegment.indexOf(\"]\") < 0)\n                    {\n                        lastSegment = lastSegment.substring(lastSegment.indexOf(\"[\") + 1, lastSegment.indexOf(\"]\"));\n                    }\n\n                    if (lastSegment !== i)\n                    {\n                        v.prePath = v.path;\n                        v.path = v.path.substring(0, idx) + \"/[\" + i + \"]\";\n                    }\n\n                    // re-calculate name\n                    if (v.nameCalculated)\n                    {\n                        v.preName = v.name;\n\n                        if (v.parent && v.parent.name && v.path)\n                        {\n                            v.name = v.parent.name + \"_\" + i;\n                        }\n                        else\n                        {\n                            if (v.path)\n                            {\n                                v.name = v.path.replace(/\\//g, \"\").replace(/\\[/g, \"_\").replace(/\\]/g, \"\");\n                            }\n                        }\n\n                        if (this.parent.options.rubyrails )\n                        {\n                            $(v.field).attr(\"name\", v.parent.name);\n                        }\n                        else\n                        {\n                            $(v.field).attr(\"name\", v.name);\n                        }\n\n                    }\n\n                    if (!v.prePath)\n                    {\n                        v.prePath = v.path;\n                    }\n\n                    updateChildrenPathAndName(v);\n                });\n            }\n        },\n\n        /**\n         * Updates the status of array item action toolbar buttons.\n         */\n        updateToolbars: function()\n        {\n            var self = this;\n\n            // if we're in display mode, we do not do this\n            if (this.view.type === \"display\")\n            {\n                return;\n            }\n\n            // if we're in readonly mode, don't do this\n            if (this.schema.readonly)\n            {\n                return;\n            }\n\n            // fire callbacks to view to remove and create toolbar\n            if (self.toolbar)\n            {\n                self.fireCallback(\"arrayToolbar\", true);\n                self.fireCallback(\"arrayToolbar\");\n            }\n\n            // fire callbacks to view to remove and create an actionbar for each item\n            if (self.actionbar)\n            {\n                self.fireCallback(\"arrayActionbars\", true);\n                self.fireCallback(\"arrayActionbars\");\n            }\n\n            //\n            // TOOLBAR\n            //\n\n            var toolbarEl = $(this.getFieldEl()).find(\".alpaca-array-toolbar[data-alpaca-array-toolbar-field-id='\" + self.getId() + \"']\");\n            if (this.children.length > 0 && self.options.hideToolbarWithChildren)\n            {\n                // hide toolbar\n                $(toolbarEl).hide();\n            }\n            else\n            {\n                // show toolbar\n                $(toolbarEl).show();\n\n                // CLICK: array toolbar buttons\n                $(toolbarEl).find(\"[data-alpaca-array-toolbar-action]\").each(function() {\n\n                    var actionKey = $(this).attr(\"data-alpaca-array-toolbar-action\");\n                    var action = self.findAction(self.toolbar.actions, actionKey);\n                    if (action)\n                    {\n                        $(this).off().click(function(e) {\n                            e.preventDefault();\n                            action.click.call(self, actionKey, action);\n                        });\n                    }\n                });\n            }\n\n\n            //\n            // ACTIONBAR\n            //\n\n            // if we're not using the \"sticky\" toolbar, then show and hide the item action buttons when hovered\n            if (typeof(this.options.toolbarSticky) === \"undefined\" || this.options.toolbarSticky === null)\n            {\n                // find each item\n                var items = this.getFieldEl().find(\".alpaca-container-item[data-alpaca-container-item-parent-field-id='\" + self.getId() +  \"']\");\n                $(items).each(function(itemIndex) {\n\n                    // find the actionbar for this item\n                    // find from containerItemEl\n                    var actionbarEl = $(self.getFieldEl()).find(\".alpaca-array-actionbar[data-alpaca-array-actionbar-parent-field-id='\" + self.getId() +  \"'][data-alpaca-array-actionbar-item-index='\" + itemIndex + \"']\");\n                    if (actionbarEl && actionbarEl.length > 0)\n                    {\n                        $(this).hover(function() {\n                            $(actionbarEl).show();\n                        }, function() {\n                            $(actionbarEl).hide();\n                        });\n\n                        $(actionbarEl).hide();\n                    }\n                });\n            }\n            else if (this.options.toolbarSticky)\n            {\n                // always show the actionbars\n                $(self.getFieldEl()).find(\".alpaca-array-actionbar[data-alpaca-array-actionbar-parent-field-id='\" + self.getId() +  \"']\").css(\"display\", \"inline-block\");\n            }\n            else if (!this.options.toolbarSticky)\n            {\n                // always hide the actionbars\n                $(self.getFieldEl()).find(\".alpaca-array-actionbar[data-alpaca-array-actionbar-parent-field-id='\" + self.getId() +  \"']\").hide();\n            }\n\n            // CLICK: actionbar buttons\n            // NOTE: actionbarEls size should be 0 or 1\n            var actionbarEls = $(self.getFieldEl()).find(\".alpaca-array-actionbar[data-alpaca-array-actionbar-parent-field-id='\" + self.getId() + \"']\");\n            $(actionbarEls).each(function() {\n\n                var targetIndex = $(this).attr(\"data-alpaca-array-actionbar-item-index\");\n                if (typeof(targetIndex) === \"string\")\n                {\n                    targetIndex = parseInt(targetIndex, 10);\n                }\n\n                // bind button click handlers\n                $(this).children(\"[data-alpaca-array-actionbar-action]\").each(function() {\n\n                    var actionKey = $(this).attr(\"data-alpaca-array-actionbar-action\");\n                    var action = self.findAction(self.actionbar.actions, actionKey);\n                    if (action)\n                    {\n                        $(this).off().click(function(e) {\n                            e.preventDefault();\n                            action.click.call(self, actionKey, action, targetIndex);\n                        });\n                    }\n                });\n\n                // if we're at max capacity, disable \"add\" buttons\n                if (self._validateEqualMaxItems())\n                {\n                    $(this).children(\"[data-alpaca-array-toolbar-action='add']\").each(function(index) {\n                        $(this).removeClass('alpaca-button-disabled');\n                        self.fireCallback(\"enableButton\", this);\n                    });\n\n                    $(this).children(\"[data-alpaca-array-actionbar-action='add']\").each(function(index) {\n                        $(this).removeClass('alpaca-button-disabled');\n                        self.fireCallback(\"enableButton\", this);\n                    });\n                }\n                else\n                {\n                    $(this).children(\"[data-alpaca-array-toolbar-action='add']\").each(function(index) {\n                        $(this).addClass('alpaca-button-disabled');\n                        self.fireCallback(\"disableButton\", this);\n                    });\n\n                    $(this).children(\"[data-alpaca-array-actionbar-action='add']\").each(function(index) {\n                        $(this).addClass('alpaca-button-disabled');\n                        self.fireCallback(\"disableButton\", this);\n                    });\n                }\n\n                // if we're at min capacity, disable \"remove\" buttons\n                if (self._validateEqualMinItems())\n                {\n                    $(this).children(\"[data-alpaca-array-actionbar-action='remove']\").each(function(index) {\n                        $(this).removeClass('alpaca-button-disabled');\n                        self.fireCallback(\"enableButton\", this);\n                    });\n                }\n                else\n                {\n                    $(this).children(\"[data-alpaca-array-actionbar-action='remove']\").each(function(index) {\n                        $(this).addClass('alpaca-button-disabled');\n                        self.fireCallback(\"disableButton\", this);\n                    });\n                }\n            });\n            // first actionbar has its \"move up\" button disabled\n            $(actionbarEls).first().children(\"[data-alpaca-array-actionbar-action='up']\").each(function() {\n                $(this).addClass('alpaca-button-disabled');\n                self.fireCallback(\"disableButton\", this);\n            });\n            // last actionbar has its \"move down\" button disabled\n            $(actionbarEls).last().children(\"[data-alpaca-array-actionbar-action='down']\").each(function() {\n                $(this).addClass('alpaca-button-disabled');\n                self.fireCallback(\"disableButton\", this);\n            });\n\n        },\n\n\n        ///////////////////////////////////////////////////////////////////////////////////////////////////\n        //\n        // DYNAMIC METHODS\n        //\n        ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n        doResolveItemContainer: function()\n        {\n            var self = this;\n\n            return $(self.container);\n        },\n\n        handleToolBarAddItemClick: function(callback)\n        {\n            var self = this;\n\n            self.resolveItemSchemaOptions(function(itemSchema, itemOptions, circular) {\n\n                // we only allow addition if the resolved schema isn't circularly referenced\n                // or the schema is optional\n                if (circular)\n                {\n                    return Alpaca.throwErrorWithCallback(\"Circular reference detected for schema: \" + JSON.stringify(itemSchema), self.errorCallback);\n                }\n\n                // how many children do we have currently?\n                var insertionPoint = self.children.length;\n\n                var itemData = Alpaca.createEmptyDataInstance(itemSchema);\n                self.addItem(insertionPoint, itemSchema, itemOptions, itemData, function(item) {\n                    if (callback) {\n                        callback(item);\n                    }\n                });\n            });\n        },\n\n        handleActionBarAddItemClick: function(itemIndex, callback)\n        {\n            var self = this;\n\n            self.resolveItemSchemaOptions(function(itemSchema, itemOptions, circular) {\n\n                // we only allow addition if the resolved schema isn't circularly referenced\n                // or the schema is optional\n                if (circular)\n                {\n                    return Alpaca.throwErrorWithCallback(\"Circular reference detected for schema: \" + JSON.stringify(itemSchema), self.errorCallback);\n                }\n\n                var arrayValues = self.getValue();\n\n                var itemData = Alpaca.createEmptyDataInstance(itemSchema);\n                self.addItem(itemIndex + 1, itemSchema, itemOptions, itemData, function(item) {\n\n                    // this is necessary because some underlying fields require their data to be reset\n                    // in order for the display to work out properly (radio fields)\n                    arrayValues.splice(itemIndex + 1, 0, item.getValue());\n                    self.setValue(arrayValues);\n\n                    if (callback) {\n                        callback(item);\n                    }\n                });\n            });\n        },\n\n        handleActionBarRemoveItemClick: function(itemIndex, callback)\n        {\n            var self = this;\n\n            self.removeItem(itemIndex, function() {\n                if (callback) {\n                    callback();\n                }\n            });\n        },\n\n        handleActionBarMoveItemUpClick: function(itemIndex, callback)\n        {\n            var self = this;\n\n            self.swapItem(itemIndex, itemIndex - 1, self.options.animate, function() {\n                if (callback) {\n                    callback();\n                }\n            });\n        },\n\n        handleActionBarMoveItemDownClick: function(itemIndex, callback)\n        {\n            var self = this;\n\n            self.swapItem(itemIndex, itemIndex + 1, self.options.animate, function() {\n                if (callback) {\n                    callback();\n                }\n            });\n        },\n\n        doAddItem: function(index, item, callback)\n        {\n            var self = this;\n\n            var addItemContainer = self.doResolveItemContainer();\n\n            // insert into dom\n            if (index === 0)\n            {\n                // insert first into container\n                $(addItemContainer).append(item.containerItemEl);\n            }\n            else\n            {\n                // insert at a specific index\n                var existingElement = addItemContainer.children(\"[data-alpaca-container-item-index='\" + (index-1) + \"']\");\n                if (existingElement && existingElement.length > 0)\n                {\n                    // insert after\n                    existingElement.after(item.containerItemEl);\n                }\n            }\n\n            self.doAfterAddItem(item, function(err) {\n\n                // trigger ready\n                Alpaca.fireReady(item);\n\n                callback(err);\n            });\n        },\n\n        doAfterAddItem: function(item, callback)\n        {\n            callback();\n        },\n\n        /**\n         * Adds an item to the array.\n         *\n         * This gets called from the toolbar when items are added via the user interface.  The method can also\n         * be called programmatically to insert items on the fly.\n         *\n         * @param {Integer} index the index where the item should be inserted\n         * @param {Object} schema the json schema\n         * @param {Object} options the json options\n         * @param {Any} data the data for the newly inserted item\n         * @param [Function] callback called after the child is added\n         */\n        addItem: function(index, schema, options, data, callback)\n        {\n            var self = this;\n\n            if (self._validateEqualMaxItems())\n            {\n                self.createItem(index, schema, options, data, function(item) {\n\n                    // register the child\n                    self.registerChild(item, index);\n\n                    // insert into dom\n                    self.doAddItem(index, item, function() {\n\n                        // updates dom markers for this element and any siblings\n                        self.handleRepositionDOMRefresh();\n\n                        // update the array item toolbar state\n                        self.updateToolbars();\n\n                        // refresh validation state\n                        self.refreshValidationState();\n\n                        // dispatch event: add\n                        self.trigger(\"add\", item);\n\n                        // trigger update\n                        self.triggerUpdate();\n\n                        if (callback)\n                        {\n                            callback(item);\n                        }\n\n                    });\n                });\n            }\n        },\n\n        doRemoveItem: function(childIndex, callback)\n        {\n            var self = this;\n\n            var removeItemContainer = self.doResolveItemContainer();\n\n            removeItemContainer.children(\".alpaca-container-item[data-alpaca-container-item-index='\" + childIndex + \"']\").remove();\n\n            self.doAfterRemoveItem(childIndex, function(err) {\n                callback(err);\n            });\n        },\n\n        doAfterRemoveItem: function(childIndex, callback)\n        {\n            callback();\n        },\n\n        /**\n         * Removes an item from the array.\n         *\n         * This gets called automatically from setValue() when the number of items being set is less than the number\n         * of field elements.\n\n         * @param {Number} childIndex index of the child to be removed\n         * @param [Function] callback called after the child is removed\n         */\n        removeItem: function(childIndex, callback)\n        {\n            var self = this;\n\n            if (this._validateEqualMinItems())\n            {\n                // unregister the child\n                self.unregisterChild(childIndex);\n\n                // remove itemContainerEl from DOM\n                self.doRemoveItem(childIndex, function() {\n\n                    // updates dom markers for this element and any siblings\n                    self.handleRepositionDOMRefresh();\n\n                    // update the array item toolbar state\n                    self.updateToolbars();\n\n                    // refresh validation state\n                    self.refreshValidationState();\n\n                    // dispatch event: remove\n                    self.trigger(\"remove\", childIndex);\n\n                    // trigger update\n                    self.triggerUpdate();\n\n                    if (callback)\n                    {\n                        callback();\n                    }\n\n                });\n            }\n        },\n\n        /**\n         * Workhorse method for moving an item in the array to a new index.\n         *\n         * @param {Number} sourceIndex the index of the child to be moved\n         * @param {Number} targetIndex the index to be moved to\n         * @param [Boolean] animate whether to animate\n         * @param [Function] callback called after the child is added and refresh occurs\n         */\n        moveItem: function(sourceIndex, targetIndex, animate, callback)\n        {\n            var self = this;\n\n            if (typeof(animate) == \"function\")\n            {\n                callback = animate;\n                animate = self.options.animate;\n            }\n\n            if (typeof(animate) == \"undefined\")\n            {\n                animate = self.options.animate ? self.options.animate : true;\n            }\n\n            if (typeof(sourceIndex) === \"string\")\n            {\n                sourceIndex = parseInt(sourceIndex, 10);\n            }\n\n            if (typeof(targetIndex) === \"string\")\n            {\n                targetIndex = parseInt(targetIndex, 10);\n            }\n\n            if (targetIndex < 0)\n            {\n                targetIndex = 0;\n            }\n            if (targetIndex >= self.children.length)\n            {\n                targetIndex = self.children.length - 1;\n            }\n\n            if (targetIndex === -1)\n            {\n                // no target index\n                return;\n            }\n\n            if (sourceIndex === targetIndex)\n            {\n                // nothing to do\n                return;\n            }\n\n            var targetChild = self.children[targetIndex];\n            if (!targetChild)\n            {\n                // target child not found\n                return;\n            }\n\n            var onComplete = function()\n            {\n                var adjustedTargetIndex = targetIndex;\n                if (sourceIndex < targetIndex) {\n                    adjustedTargetIndex--;\n                }\n\n                // splice out child\n                var child = self.children.splice(sourceIndex, 1)[0];\n                self.children.splice(adjustedTargetIndex, 0, child);\n\n                // set data and refresh\n                self.data = self.getValue();\n                self.refresh(function() {\n\n                    // refresh validation state\n                    self.refreshValidationState();\n\n                    // trigger update\n                    self.triggerUpdate();\n\n                    // dispatch event: move\n                    self.trigger(\"move\");\n\n                    if (callback)\n                    {\n                        callback();\n                    }\n\n                });\n            };\n\n            var duration = 0;\n            if (animate)\n            {\n                duration = 500;\n            }\n\n            if (duration > 0)\n            {\n                var parentFieldId = self.getId();\n\n                // the source and target DOM elements\n                var sourceContainer = self.getContainerEl().find(\".alpaca-container-item[data-alpaca-container-item-index='\" + sourceIndex + \"'][data-alpaca-container-item-parent-field-id='\" + parentFieldId + \"']\");\n                var targetContainer = self.getContainerEl().find(\".alpaca-container-item[data-alpaca-container-item-index='\" + targetIndex + \"'][data-alpaca-container-item-parent-field-id='\" + parentFieldId + \"']\");\n\n                // create two temp elements as markers for switch\n                var tempSourceMarker = $(\"<div class='tempMarker1'></div>\");\n                sourceContainer.before(tempSourceMarker);\n                var tempTargetMarker = $(\"<div class='tempMarker2'></div>\");\n                targetContainer.before(tempTargetMarker);\n\n                // moves div visually\n                Alpaca.animatedMove(sourceContainer, targetContainer, duration, function () {\n                    onComplete();\n                });\n            }\n            else\n            {\n                onComplete();\n            }\n        },\n\n        /**\n         * Workhorse method for swapping an item from one index in the array to another.\n         *\n         * @param {Number} sourceIndex the index of the child to be moved\n         * @param {Number} targetIndex the index to be moved to\n         * @param [Boolean] animate whether to animate\n         * @param [Function] callback called after the child is added and refresh occurs\n         */\n        swapItem: function(sourceIndex, targetIndex, animate, callback)\n        {\n            var self = this;\n\n            if (typeof(animate) == \"function\")\n            {\n                callback = animate;\n                animate = self.options.animate;\n            }\n\n            if (typeof(animate) == \"undefined\")\n            {\n                animate = self.options.animate ? self.options.animate : true;\n            }\n\n            if (typeof(sourceIndex) === \"string\")\n            {\n                sourceIndex = parseInt(sourceIndex, 10);\n            }\n\n            if (typeof(targetIndex) === \"string\")\n            {\n                targetIndex = parseInt(targetIndex, 10);\n            }\n\n            if (targetIndex < 0)\n            {\n                targetIndex = 0;\n            }\n            if (targetIndex >= self.children.length)\n            {\n                targetIndex = self.children.length - 1;\n            }\n\n            if (targetIndex === -1)\n            {\n                // no target index\n                return;\n            }\n\n            if (sourceIndex === targetIndex)\n            {\n                // nothing to do\n                return;\n            }\n\n            var targetChild = self.children[targetIndex];\n            if (!targetChild)\n            {\n                // target child not found\n                return;\n            }\n\n            var onComplete = function()\n            {\n                var sourceChild = self.children[sourceIndex];\n                var targetChild = self.children[targetIndex];\n\n                self.children[sourceIndex] = targetChild;\n                self.children[targetIndex] = sourceChild;\n\n                // copy back data and refresh\n                self.data = self.getValue();\n                self.refresh(function() {\n\n                    // refresh validation state\n                    self.refreshValidationState();\n\n                    // trigger update\n                    self.triggerUpdate();\n\n                    // dispatch event: move\n                    self.trigger(\"move\");\n\n                    if (callback)\n                    {\n                        callback();\n                    }\n\n                });\n            };\n\n            var duration = 0;\n            if (animate)\n            {\n                duration = 500;\n            }\n\n            if (duration > 0)\n            {\n                var parentFieldId = self.getId();\n\n                // the source and target DOM elements\n                var sourceContainer = self.getContainerEl().find(\".alpaca-container-item[data-alpaca-container-item-index='\" + sourceIndex + \"'][data-alpaca-container-item-parent-field-id='\" + parentFieldId + \"']\");\n                var targetContainer = self.getContainerEl().find(\".alpaca-container-item[data-alpaca-container-item-index='\" + targetIndex + \"'][data-alpaca-container-item-parent-field-id='\" + parentFieldId + \"']\");\n\n                // create two temp elements as markers for switch\n                var tempSourceMarker = $(\"<div class='tempMarker1'></div>\");\n                sourceContainer.before(tempSourceMarker);\n                var tempTargetMarker = $(\"<div class='tempMarker2'></div>\");\n                targetContainer.before(tempTargetMarker);\n\n                // swap divs visually\n                Alpaca.animatedSwap(sourceContainer, targetContainer, duration, function () {\n                    onComplete();\n                });\n            }\n            else\n            {\n                onComplete();\n            }\n        },\n\n        /**\n         * @see Alpaca.ContainerField#getType\n         */\n        getType: function() {\n            return \"array\";\n        },\n\n\n        /* builder_helpers */\n\n        /**\n         * @see Alpaca.ContainerField#getTitle\n         */\n        getTitle: function() {\n            return \"Array Field\";\n        },\n\n        /**\n         * @see Alpaca.ContainerField#getDescription\n         */\n        getDescription: function() {\n            return \"Field for list of items with same data type or structure.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ContainerField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            var properties = {\n                \"properties\": {\n                    \"items\": {\n                        \"title\": \"Array Items\",\n                        \"description\": \"Schema for array items.\",\n                        \"type\": \"object\"\n                    },\n                    \"minItems\": {\n                        \"title\": \"Minimum Items\",\n                        \"description\": \"Minimum number of items.\",\n                        \"type\": \"number\"\n                    },\n                    \"maxItems\": {\n                        \"title\": \"Maximum Items\",\n                        \"description\": \"Maximum number of items.\",\n                        \"type\": \"number\"\n                    },\n                    \"uniqueItems\": {\n                        \"title\": \"Items Unique\",\n                        \"description\": \"Item values should be unique if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    }\n                }\n            };\n\n            if (this.children && this.children[0]) {\n                Alpaca.merge(properties.properties.items.properties, this.children[0].getSchemaOfSchema());\n            }\n\n            return Alpaca.merge(this.base(), properties);\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ContainerField#getOptionsForSchema\n         */\n        getOptionsForSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"items\": {\n                        \"type\": \"object\"\n                    },\n                    \"minItems\": {\n                        \"type\": \"integer\"\n                    },\n                    \"maxItems\": {\n                        \"type\": \"integer\"\n                    },\n                    \"uniqueItems\": {\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ContainerField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            var properties = {\n                \"properties\": {\n                    \"toolbarSticky\": {\n                        \"title\": \"Sticky Toolbar\",\n                        \"description\": \"If true, the array item toolbar will always be enabled.  If false, the toolbar is always disabled.  If undefined or null, the toolbar will appear when hovered over.\",\n                        \"type\": \"boolean\",\n                        \"default\": undefined\n                    },\n                    \"toolbarStyle\": {\n                        \"title\": \"Toolbar Style\",\n                        \"description\": \"The kind of top-level toolbar to render for the array field.  Either 'button' or 'link'.\",\n                        \"type\": \"string\",\n                        \"default\": \"button\"\n                    },\n                    \"actionbarStyle\": {\n                        \"title\": \"Actionbar Style\",\n                        \"description\": \"The kind of actionbar to render for each item in the array.  Either 'top', 'bottom', 'left', or 'right'.\",\n                        \"type\": \"string\",\n                        \"default\": \"top\"\n                    },\n                    \"toolbar\": {\n                        \"type\": \"object\",\n                        \"title\": \"Toolbar Configuration\",\n                        \"properties\": {\n                            \"showLabels\": {\n                                \"type\": \"boolean\",\n                                \"default\": true,\n                                \"title\": \"Whether to show labels next to actions\"\n                            },\n                            \"actions\": {\n                                \"type\": \"array\",\n                                \"title\": \"Toolbar Actions Configuration\",\n                                \"items\": {\n                                    \"action\": {\n                                        \"type\": \"string\",\n                                        \"title\": \"Action Key\"\n                                    },\n                                    \"label\": {\n                                        \"type\": \"string\",\n                                        \"title\": \"Action Label\"\n                                    },\n                                    \"iconClass\": {\n                                        \"type\": \"string\",\n                                        \"title\": \"Action CSS Classes for Icon\"\n                                    },\n                                    \"click\": {\n                                        \"type\": \"function\",\n                                        \"title\": \"Action Click Handler\"\n                                    },\n                                    \"enabled\": {\n                                        \"type\": \"boolean\",\n                                        \"title\": \"Whether to enable the action\",\n                                        \"default\": true\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"actionbar\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"showLabels\": {\n                                \"type\": \"boolean\",\n                                \"default\": false,\n                                \"title\": \"Whether to show labels next to actions\"\n                            },\n                            \"actions\": {\n                                \"type\": \"array\",\n                                \"title\": \"Actions Bar Actions Configuration\",\n                                \"items\": {\n                                    \"action\": {\n                                        \"type\": \"string\",\n                                        \"title\": \"Action Key\"\n                                    },\n                                    \"label\": {\n                                        \"type\": \"string\",\n                                        \"title\": \"Action Label\"\n                                    },\n                                    \"iconClass\": {\n                                        \"type\": \"string\",\n                                        \"title\": \"Action CSS Classes for Icon\"\n                                    },\n                                    \"click\": {\n                                        \"type\": \"function\",\n                                        \"title\": \"Action Click Handler\"\n                                    },\n                                    \"enabled\": {\n                                        \"type\": \"boolean\",\n                                        \"title\": \"Whether to enable the action\",\n                                        \"default\": true\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"hideToolbarWithChildren\": {\n                        \"type\": \"boolean\",\n                        \"title\": \"Hide Toolbar with Children\",\n                        \"description\": \"Indicates whether to hide the top toolbar when child elements are available.\",\n                        \"default\": true\n                    }\n                }\n            };\n\n            if (this.children && this.children[0]) {\n                Alpaca.merge(properties.properties.items.properties, this.children[0].getSchemaOfSchema());\n            }\n\n            return Alpaca.merge(this.base(), properties);\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ContainerField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"toolbarSticky\": {\n                        \"type\": \"checkbox\"\n                    },\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"fields\": {\n                        }\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerMessages({\n        \"notEnoughItems\": \"The minimum number of items is {0}\",\n        \"tooManyItems\": \"The maximum number of items is {0}\",\n        \"valueNotUnique\": \"Values are not unique\",\n        \"notAnArray\": \"This value is not an Array\"\n    });\n    Alpaca.registerFieldClass(\"array\", Alpaca.Fields.ArrayField);\n    Alpaca.registerDefaultSchemaFieldMapping(\"array\", \"array\");\n\n    Alpaca.registerMessages({\n        \"addItemButtonLabel\": \"Add New Item\",\n        \"addButtonLabel\": \"Add\",\n        \"removeButtonLabel\": \"Remove\",\n        \"upButtonLabel\": \"Up\",\n        \"downButtonLabel\": \"Down\"\n    });\n\n})(jQuery);\n\n/*jshint -W004 */ // duplicate variables\n/*jshint -W083 */ // inline functions are used safely\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.ObjectField = Alpaca.ContainerField.extend(\n    /**\n     * @lends Alpaca.Fields.ObjectField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Field#getFieldType\n         */\n        getFieldType: function() {\n            return \"object\";\n        },\n\n        /**\n         * @see Alpaca.ContainerField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.base();\n\n            var containerItemTemplateType = self.resolveContainerItemTemplateType();\n            if (!containerItemTemplateType)\n            {\n                var x = self.resolveContainerItemTemplateType();\n                return Alpaca.throwErrorWithCallback(\"Unable to find template descriptor for container item: \" + self.getFieldType());\n            }\n\n            this.containerItemTemplateDescriptor = self.view.getTemplateDescriptor(\"container-\" + containerItemTemplateType + \"-item\", self);\n\n            if (Alpaca.isEmpty(this.data))\n            {\n                return;\n            }\n\n            if (this.data === \"\")\n            {\n                return;\n            }\n\n            if (!Alpaca.isObject(this.data))\n            {\n                if (!Alpaca.isString(this.data))\n                {\n                    return;\n                }\n                else\n                {\n                    try\n                    {\n                        this.data = Alpaca.parseJSON(this.data);\n                        if (!Alpaca.isObject(this.data))\n                        {\n                            Alpaca.logWarn(\"ObjectField parsed data but it was not an object: \" + JSON.stringify(this.data));\n                            return;\n                        }\n                    }\n                    catch (e)\n                    {\n                        return;\n                    }\n                }\n            }\n        },\n\n        /**\n         * Picks apart the data object and set onto child fields.\n         *\n         * @see Alpaca.Field#setValue\n         */\n        setValue: function(data)\n        {\n            if (!data)\n            {\n                data = {};\n            }\n\n            // if not an object by this point, we don't handle it\n            if (!Alpaca.isObject(data))\n            {\n                return;\n            }\n\n            // sort existing fields by property id\n            var existingFieldsByPropertyId = {};\n            for (var fieldId in this.childrenById)\n            {\n                var propertyId = this.childrenById[fieldId].propertyId;\n                existingFieldsByPropertyId[propertyId] = this.childrenById[fieldId];\n            }\n\n            // new data mapped by property id\n            var newDataByPropertyId = {};\n            for (var k in data)\n            {\n                if (data.hasOwnProperty(k))\n                {\n                    newDataByPropertyId[k] = data[k];\n                }\n            }\n\n            // walk through new property ids\n            // if a field exists, set value onto it and remove from newDataByPropertyId and existingFieldsByPropertyId\n            // if a field doesn't exist, let it remain in list\n            for (var propertyId in newDataByPropertyId)\n            {\n                var field = existingFieldsByPropertyId[propertyId];\n                if (field)\n                {\n                    field.setValue(newDataByPropertyId[propertyId]);\n\n                    delete existingFieldsByPropertyId[propertyId];\n                    delete newDataByPropertyId[propertyId];\n                }\n            }\n\n            // anything left in existingFieldsByPropertyId describes data that is missing, null or empty\n            // we null out those values\n            for (var propertyId in existingFieldsByPropertyId)\n            {\n                var field = existingFieldsByPropertyId[propertyId];\n                field.setValue(null);\n            }\n\n            // anything left in newDataByPropertyId is new stuff that we need to add\n            // the object field doesn't support this since it runs against a schema\n            // so we drop this off\n        },\n\n        /**\n         * Reconstructs the data object from the child fields.\n         *\n         * @see Alpaca.ContainerField#getContainerValue\n         */\n        getContainerValue: function()\n        {\n            // if we don't have any children and we're not required, hand back empty object\n            if (this.children.length === 0 && !this.isRequired())\n            {\n                return {};\n            }\n\n            // otherwise, hand back an object with our child properties in it\n            var o = {};\n\n            // walk through all of the properties object\n            // for each property, we insert it into a JSON object that we'll hand back as the result\n\n            // if the property has dependencies, then we evaluate those dependencies first to determine whether the\n            // resulting property should be included\n\n            for (var i = 0; i < this.children.length; i++)\n            {\n                // the property key and vlaue\n                var propertyId = this.children[i].propertyId;\n                var fieldValue = this.children[i].getValue();\n\n                if(fieldValue !== fieldValue) {\n                    // NaN\n                    fieldValue = undefined;\n                }\n\n                if (typeof(fieldValue) !== \"undefined\")\n                {\n                    if (this.determineAllDependenciesValid(propertyId))\n                    {\n                        var assignedValue = null;\n\n                        if (typeof(fieldValue) === \"boolean\")\n                        {\n                            assignedValue = (fieldValue? true: false);\n                        }\n                        else if (Alpaca.isArray(fieldValue) || Alpaca.isObject(fieldValue) || Alpaca.isNumber(fieldValue))\n                        {\n                            assignedValue = fieldValue;\n                        }\n                        else if (fieldValue || fieldValue === 0)\n                        {\n                            assignedValue = fieldValue;\n                        }\n\n                        if (assignedValue !== null)\n                        {\n                            o[propertyId] = assignedValue;\n                        }\n                    }\n                }\n            }\n\n            return o;\n        },\n\n        /**\n         * @see Alpaca.Field#afterRenderContainer\n         */\n        afterRenderContainer: function(model, callback) {\n\n            var self = this;\n\n            this.base(model, function() {\n\n                // Generates wizard if requested\n                if (self.isTopLevel())\n                {\n                    if (self.view)\n                    {\n                        self.wizardConfigs = self.view.getWizard();\n                        if (typeof(self.wizardConfigs) != \"undefined\")\n                        {\n                            if (!self.wizardConfigs || self.wizardConfigs === true)\n                            {\n                                self.wizardConfigs = {};\n                            }\n                        }\n\n                        var layoutTemplateDescriptor = self.view.getLayout().templateDescriptor;\n                        if (self.wizardConfigs && Alpaca.isObject(self.wizardConfigs))\n                        {\n                            if (!layoutTemplateDescriptor || self.wizardConfigs.bindings)\n                            {\n                                // run the automatic wizard\n                                self.autoWizard();\n                            }\n                            else\n                            {\n                                // manual wizard based on layout\n                                self.wizard();\n                            }\n                        }\n                    }\n                }\n\n                callback();\n            });\n        },\n\n        /**\n         * @override\n         *\n         * Creates sub-items for this object.\n         *\n         * @param callback\n         */\n        createItems: function(callback)\n        {\n            var self = this;\n\n            var items = [];\n\n            // we keep a map of all of the properties in our original data object\n            // as we render elements out of the schema, we remove from the extraDataProperties map\n            // whatever is leftover are the data properties that were NOT rendered because they were not part\n            // of the schema\n            //\n            // this is primarily maintained for debugging purposes, so as to inform the developer of mismatches\n            var extraDataProperties = {};\n            for (var dataKey in self.data) {\n                extraDataProperties[dataKey] = dataKey;\n            }\n\n            var properties = self.data;\n            if (self.schema && self.schema.properties) {\n                properties = self.schema.properties;\n            }\n\n            var cf = function()\n            {\n                // If the schema and the data line up perfectly, then there will be no properties in the data that are\n                // not also in the schema, and thus, extraDataProperties will be empty.\n                //\n                // On the other hand, if there are some properties in data that were not in schema, then they will\n                // remain in extraDataProperties and we can inform developers for debugging purposes\n                //\n                var extraDataKeys = [];\n                for (var extraDataKey in extraDataProperties) {\n                    extraDataKeys.push(extraDataKey);\n                }\n                if (extraDataKeys.length > 0) {\n                    Alpaca.logDebug(\"There were \" + extraDataKeys.length + \" extra data keys that were not part of the schema \" + JSON.stringify(extraDataKeys));\n                }\n\n                callback(items);\n            };\n\n            // each property in the object can have a different schema and options so we need to process\n            // asynchronously and wait for all to complete\n\n            // wrap into waterfall functions\n            var propertyFunctions = [];\n            for (var propertyId in properties)\n            {\n                var itemData = null;\n                if (self.data)\n                {\n                    if (self.data.hasOwnProperty(propertyId))\n                    {\n                        itemData = self.data[propertyId];\n                    }\n                }\n\n                var pf = (function(propertyId, itemData, extraDataProperties)\n                {\n                    return function(_done)\n                    {\n                        // only allow this if we have data, otherwise we end up with circular reference\n                        self.resolvePropertySchemaOptions(propertyId, function (schema, options, circular) {\n\n                            // we only allow addition if the resolved schema isn't circularly referenced\n                            // or the schema is optional\n                            if (circular) {\n                                return Alpaca.throwErrorWithCallback(\"Circular reference detected for schema: \" + JSON.stringify(schema), self.errorCallback);\n                            }\n\n                            if (!schema) {\n                                Alpaca.logDebug(\"Unable to resolve schema for property: \" + propertyId);\n                            }\n\n                            self.createItem(propertyId, schema, options, itemData, null, function (addedItemControl) {\n\n                                items.push(addedItemControl);\n\n                                // remove from extraDataProperties helper\n                                delete extraDataProperties[propertyId];\n\n                                // by the time we get here, we may have constructed a very large child chain of\n                                // sub-dependencies and so we use nextTick() instead of a straight callback so as to\n                                // avoid blowing out the stack size\n                                //Alpaca.nextTick(function () {\n                                //    callback();\n                                //});\n\n                                _done();\n                            });\n                        });\n                    };\n\n                })(propertyId, itemData, extraDataProperties);\n\n                propertyFunctions.push(pf);\n            }\n\n            // run on the next tick\n            Alpaca.nextTick(function() {\n\n                Alpaca.series(propertyFunctions, function(err) {\n\n                    // is there any order information in the items?\n                    var hasOrderInformation = false;\n                    for (var i = 0; i < items.length; i++) {\n                        if (typeof(items[i].options.order) !== \"undefined\") {\n                            hasOrderInformation = true;\n                            break;\n                        }\n                    }\n\n                    if (hasOrderInformation)\n                    {\n                        // sort by order?\n                        items.sort(function (a, b) {\n\n                            var orderA = a.options.order;\n                            if (!orderA)\n                            {\n                                orderA = 0;\n                            }\n                            var orderB = b.options.order;\n                            if (!orderB)\n                            {\n                                orderB = 0;\n                            }\n\n                            return (orderA - orderB);\n                        });\n                    }\n\n                    cf();\n                });\n\n            });\n        },\n\n        /**\n         * Creates an sub-item for this object.\n         *\n         * The postRenderCallback method is called upon completion.\n         *\n         * @param {String} propertyId Child field property ID.\n         * @param {Object} itemSchema schema\n         * @param {Object} fieldOptions Child field options.\n         * @param {Any} value Child field value\n         * @param {String} insertAfterId Location where the child item will be inserted.\n         * @param [Function} postRenderCallback called once the item has been added\n         */\n        createItem: function(propertyId, itemSchema, itemOptions, itemData, insertAfterId, postRenderCallback)\n        {\n            var self = this;\n\n            var formEl = $(\"<div></div>\");\n            formEl.alpaca({\n                \"data\" : itemData,\n                \"options\": itemOptions,\n                \"schema\" : itemSchema,\n                \"view\" : this.view.id ? this.view.id : this.view,\n                \"connector\": this.connector,\n                \"error\": function(err)\n                {\n                    self.destroy();\n\n                    self.errorCallback.call(self, err);\n                },\n                \"notTopLevel\":true,\n                \"render\" : function(fieldControl, cb) {\n                    // render\n                    fieldControl.parent = self;\n                    // add the property Id\n                    fieldControl.propertyId = propertyId;\n                    // setup item path\n                    if (self.path !== \"/\") {\n                        fieldControl.path = self.path + \"/\" + propertyId;\n                    } else {\n                        fieldControl.path = self.path + propertyId;\n                    }\n                    fieldControl.render(null, function() {\n                        if (cb) {\n                            cb();\n                        }\n                    });\n                },\n                \"postRender\": function(control) {\n\n                    // alpaca finished\n\n                    // render the outer container\n                    var containerItemEl = Alpaca.tmpl(self.containerItemTemplateDescriptor, {\n                        \"id\": self.getId(),\n                        \"name\": control.name,\n                        \"parentFieldId\": self.getId(),\n                        \"actionbarStyle\": self.options.actionbarStyle,\n                        \"view\": self.view,\n                        \"data\": itemData\n                    });\n\n                    // find the insertion point\n                    var insertionPointEl = $(containerItemEl).find(\".\" + Alpaca.MARKER_CLASS_CONTAINER_FIELD_ITEM_FIELD);\n                    if (insertionPointEl.length === 0)\n                    {\n                        if ($(containerItemEl).hasClass(Alpaca.MARKER_CLASS_CONTAINER_FIELD_ITEM_FIELD)) {\n                            insertionPointEl = $(containerItemEl);\n                        }\n                    }\n                    if (insertionPointEl.length === 0)\n                    {\n                        self.errorCallback.call(self, {\n                            \"message\": \"Cannot find insertion point for field: \" + self.getId()\n                        });\n                        return;\n                    }\n\n                    // copy into place\n                    $(insertionPointEl).before(control.getFieldEl());\n                    $(insertionPointEl).remove();\n\n                    control.containerItemEl = containerItemEl;\n\n                    // TODO: verify, as per: https://github.com/emircal/alpaca/commit/4061c33787bd7a2b86fb613317374d365d9acc92\n                    // Reset hideInitValidationError after render\n                    Alpaca.fieldApplyFieldAndChildren(control, function(_control) {\n                        _control.hideInitValidationError = false;\n                    });\n\n                    if (postRenderCallback)\n                    {\n                        postRenderCallback(control);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Determines the schema and options to utilize for sub-objects within this object.\n         *\n         * @param propertyId\n         * @param callback\n         */\n        resolvePropertySchemaOptions: function(propertyId, callback)\n        {\n            var _this = this;\n\n            var completionFunction = function(resolvedPropertySchema, resolvedPropertyOptions, circular)\n            {\n                // special caveat:  if we're in read-only mode, the child must also be in read-only mode\n                if (_this.options.readonly) {\n                    resolvedPropertyOptions.readonly = true;\n                }\n\n                callback(resolvedPropertySchema, resolvedPropertyOptions, circular);\n            };\n\n            var propertySchema = null;\n            if (_this.schema && _this.schema.properties && _this.schema.properties[propertyId]) {\n                propertySchema = _this.schema.properties[propertyId];\n            }\n            var propertyOptions = {};\n            if (_this.options && _this.options.fields && _this.options.fields[propertyId]) {\n                propertyOptions = _this.options.fields[propertyId];\n            }\n\n            // handle $ref\n            if (propertySchema && propertySchema[\"$ref\"])\n            {\n                var referenceId = propertySchema[\"$ref\"];\n\n                var topField = this;\n                var fieldChain = [topField];\n                while (topField.parent)\n                {\n                    topField = topField.parent;\n                    fieldChain.push(topField);\n                }\n\n                var originalPropertySchema = propertySchema;\n                var originalPropertyOptions = propertyOptions;\n\n                Alpaca.loadRefSchemaOptions(topField, referenceId, function(propertySchema, propertyOptions) {\n\n                    // walk the field chain to see if we have any circularity\n                    var refCount = 0;\n                    for (var i = 0; i < fieldChain.length; i++)\n                    {\n                        if (fieldChain[i].schema)\n                        {\n                            if ( (fieldChain[i].schema.id === referenceId) || (fieldChain[i].schema.id === \"#\" + referenceId))\n                            {\n                                refCount++;\n                            }\n                            else if ( (fieldChain[i].schema[\"$ref\"] === referenceId))\n                            {\n                                refCount++;\n                            }\n                        }\n                    }\n\n                    var circular = (refCount > 1);\n\n                    var resolvedPropertySchema = {};\n                    if (originalPropertySchema) {\n                        Alpaca.mergeObject(resolvedPropertySchema, originalPropertySchema);\n                    }\n                    if (propertySchema)\n                    {\n                        Alpaca.mergeObject(resolvedPropertySchema, propertySchema);\n                    }\n                    // keep original id\n                    if (originalPropertySchema && originalPropertySchema.id) {\n                        resolvedPropertySchema.id = originalPropertySchema.id;\n                    }\n                    //delete resolvedPropertySchema.id;\n\n                    var resolvedPropertyOptions = {};\n                    if (originalPropertyOptions) {\n                        Alpaca.mergeObject(resolvedPropertyOptions, originalPropertyOptions);\n                    }\n                    if (propertyOptions)\n                    {\n                        Alpaca.mergeObject(resolvedPropertyOptions, propertyOptions);\n                    }\n\n                    Alpaca.nextTick(function() {\n                        completionFunction(resolvedPropertySchema, resolvedPropertyOptions, circular);\n                    });\n                });\n            }\n            else\n            {\n                Alpaca.nextTick(function() {\n                    completionFunction(propertySchema, propertyOptions);\n                });\n            }\n        },\n\n        applyCreatedItems: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                var f = function(i)\n                {\n                    if (i === model.items.length)\n                    {\n                        // done\n                        callback();\n                        return;\n                    }\n\n                    var item = model.items[i];\n\n                    var propertyId = item.propertyId;\n\n                    // HANDLE PROPERTY DEPENDENCIES (IF THE PROPERTY HAS THEM)\n\n                    // if this property has dependencies, show or hide this added item right away\n                    self.showOrHidePropertyBasedOnDependencies(propertyId);\n\n                    // if this property has dependencies, bind update handlers to dependent fields\n                    self.bindDependencyFieldUpdateEvent(propertyId);\n\n                    // if this property has dependencies, trigger those to ensure it is in the right state\n                    self.refreshDependentFieldStates(propertyId);\n\n                    f(i+1);\n                };\n                f(0);\n            });\n        },\n\n        /**\n         * @see Alpaca.ContainerField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var status = this._validateMaxProperties();\n            valInfo[\"tooManyProperties\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"tooManyProperties\"), [this.schema.maxProperties]),\n                \"status\": status\n            };\n\n            status = this._validateMinProperties();\n            valInfo[\"tooFewProperties\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"tooManyItems\"), [this.schema.minProperties]),\n                \"status\": status\n            };\n\n            return baseStatus && valInfo[\"tooManyProperties\"][\"status\"] && valInfo[\"tooFewProperties\"][\"status\"];\n        },\n\n        /**\n         * Validate maxProperties schema property.\n         *\n         * @returns {Boolean} whether maxProperties is satisfied\n         */\n        _validateMaxProperties: function()\n        {\n            if (typeof(this.schema[\"maxProperties\"]) == \"undefined\")\n            {\n                return true;\n            }\n\n            var maxProperties = this.schema[\"maxProperties\"];\n\n            // count the number of properties that we currently have\n            var propertyCount = 0;\n            for (var k in this.data)\n            {\n                propertyCount++;\n            }\n\n            return propertyCount <= maxProperties;\n        },\n\n        /**\n         * Validate maxProperties schema property.\n         *\n         * @returns {Boolean} whether maxProperties is satisfied\n         */\n        _validateMinProperties: function()\n        {\n            if (typeof(this.schema[\"minProperties\"]) == \"undefined\")\n            {\n                return true;\n            }\n\n            var minProperties = this.schema[\"minProperties\"];\n\n            // count the number of properties that we currently have\n            var propertyCount = 0;\n            for (var k in this.data)\n            {\n                propertyCount++;\n            }\n\n            return propertyCount >= minProperties;\n        },\n\n\n        ///////////////////////////////////////////////////////////////////////////////////////////////////////\n        //\n        // DEPENDENCIES\n        //\n        ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n        /**\n         * Shows or hides a property's field based on how its dependencies evaluate.\n         * If a property doesn't have dependencies, this no-ops.\n         *\n         * @param propertyId\n         */\n        showOrHidePropertyBasedOnDependencies: function(propertyId)\n        {\n            var self = this;\n\n            var item = this.childrenByPropertyId[propertyId];\n            if (!item)\n            {\n                return Alpaca.throwErrorWithCallback(\"Missing property: \" + propertyId, self.errorCallback);\n            }\n\n            var valid = this.determineAllDependenciesValid(propertyId);\n            if (valid)\n            {\n                item.show();\n                item.onDependentReveal();\n            }\n            else\n            {\n                item.hide();\n                item.onDependentConceal();\n            }\n\n            item.getFieldEl().trigger(\"fieldupdate\");\n        },\n\n        /**\n         * Helper function for resolving dependencies for a child property.\n         * This takes into account JSON Schema v4 and also provides for legacy v3 support.\n         *\n         * @param propertyId\n         */\n        getChildDependencies: function(propertyId)\n        {\n            // first, check for dependencies declared within the object (container)\n            var itemDependencies = null;\n            if (this.schema.dependencies)\n            {\n                itemDependencies = this.schema.dependencies[propertyId];\n            }\n            if (!itemDependencies)\n            {\n                // second, check for dependencies declared on the item itself\n                // this is to support legacy v3 json schema\n                var item = this.childrenByPropertyId[propertyId];\n                if (item)\n                {\n                    itemDependencies = item.schema.dependencies;\n                }\n            }\n\n            return itemDependencies;\n        },\n\n        getChildConditionalDependencies: function(propertyId)\n        {\n            var itemConditionalDependencies = null;\n\n            // second, check for conditional dependencies declared on the item itself\n            // this is to support legacy v3 json options\n            var item = this.childrenByPropertyId[propertyId];\n            if (item)\n            {\n                itemConditionalDependencies = item.options.dependencies;\n            }\n\n            return itemConditionalDependencies;\n        },\n\n        /**\n         * Determines whether the dependencies for a property pass.\n         *\n         * @param propertyId\n         */\n        determineAllDependenciesValid: function(propertyId)\n        {\n            var self = this;\n\n            var item = this.childrenByPropertyId[propertyId];\n            if (!item)\n            {\n                return Alpaca.throwErrorWithCallback(\"Missing property: \" + propertyId, self.errorCallback);\n            }\n\n            // first check for dependencies declared within the object (container)\n            var itemDependencies = self.getChildDependencies(propertyId);;\n            if (!itemDependencies)\n            {\n                // no dependencies, so yes, we pass\n                return true;\n            }\n\n            var valid = true;\n            if (Alpaca.isString(itemDependencies))\n            {\n                valid = self.determineSingleDependencyValid(propertyId, itemDependencies);\n            }\n            else if (Alpaca.isArray(itemDependencies))\n            {\n                $.each(itemDependencies, function(index, value) {\n                    valid = valid && self.determineSingleDependencyValid(propertyId, value);\n                });\n            }\n\n            return valid;\n        },\n\n        /**\n         * Binds field updates to any field dependencies.\n         *\n         * @param propertyId\n         */\n        bindDependencyFieldUpdateEvent: function(propertyId)\n        {\n            var self = this;\n\n            var item = this.childrenByPropertyId[propertyId];\n            if (!item)\n            {\n                return Alpaca.throwErrorWithCallback(\"Missing property: \" + propertyId, self.errorCallback);\n            }\n\n            var itemDependencies = self.getChildDependencies(propertyId);\n            if (!itemDependencies)\n            {\n                // no dependencies, so simple return\n                return true;\n            }\n\n            // helper function\n            var bindEvent = function(propertyId, dependencyPropertyId)\n            {\n                // dependencyPropertyId is the identifier for the property that the field \"propertyId\" is dependent on\n\n                var dependentField = Alpaca.resolveField(self, dependencyPropertyId);\n                if (dependentField)\n                {\n                    dependentField.getFieldEl().bind(\"fieldupdate\", (function(propertyField, dependencyField, propertyId, dependencyPropertyId) {\n\n                        return function(event)\n                        {\n                            // the property \"dependencyPropertyId\" changed and affects target property (\"propertyId\")\n\n                            // update UI state for target property\n                            self.showOrHidePropertyBasedOnDependencies(propertyId);\n\n                            propertyField.getFieldEl().trigger(\"fieldupdate\");\n                        };\n\n                    })(item, dependentField, propertyId, dependencyPropertyId));\n\n                    // trigger field update\n                    dependentField.getFieldEl().trigger(\"fieldupdate\");\n                }\n            };\n\n            if (Alpaca.isString(itemDependencies))\n            {\n                bindEvent(propertyId, itemDependencies);\n            }\n            else if (Alpaca.isArray(itemDependencies))\n            {\n                $.each(itemDependencies, function(index, value) {\n                    bindEvent(propertyId, value);\n                });\n            }\n        },\n\n        refreshDependentFieldStates: function(propertyId)\n        {\n            var self = this;\n\n            var propertyField = this.childrenByPropertyId[propertyId];\n            if (!propertyField)\n            {\n                return Alpaca.throwErrorWithCallback(\"Missing property: \" + propertyId, self.errorCallback);\n            }\n\n            var itemDependencies = self.getChildDependencies(propertyId);\n            if (!itemDependencies)\n            {\n                // no dependencies, so simple return\n                return true;\n            }\n\n            // helper function\n            var triggerFieldUpdateForProperty = function(otherPropertyId)\n            {\n                var dependentField = Alpaca.resolveField(self, otherPropertyId);\n                if (dependentField)\n                {\n                    // trigger field update\n                    dependentField.getFieldEl().trigger(\"fieldupdate\");\n                }\n            };\n\n            if (Alpaca.isString(itemDependencies))\n            {\n                triggerFieldUpdateForProperty(itemDependencies);\n            }\n            else if (Alpaca.isArray(itemDependencies))\n            {\n                $.each(itemDependencies, function(index, value) {\n                    triggerFieldUpdateForProperty(value);\n                });\n            }\n        },\n\n        /**\n         * Checks whether a single property's dependency is satisfied or not.\n         *\n         * In order to be valid, the property's dependency must exist (JSON schema) and optionally must satisfy\n         * any dependency options (value matches using an AND).  Finally, the dependency field must be showing.\n         *\n         * @param {Object} propertyId Field property id.\n         * @param {Object} dependentOnPropertyId Property id of the dependency field.\n         *\n         * @returns {Boolean} True if all dependencies have been satisfied and the field needs to be shown,\n         * false otherwise.\n         */\n        determineSingleDependencyValid: function(propertyId, dependentOnPropertyId)\n        {\n            var self = this;\n\n            // checks to see if the referenced \"dependent-on\" property has a value\n            // basic JSON-schema supports this (if it has ANY value, it is considered valid\n            // special consideration for boolean false\n            var dependentOnField = Alpaca.resolveField(self, dependentOnPropertyId);\n            if (!dependentOnField)\n            {\n                // no dependent-on field found, return false\n                return false;\n            }\n\n            var dependentOnData = dependentOnField.data;\n\n            // assume it isn't valid\n            var valid = false;\n\n            // go one of two directions depending on whether we have conditional dependencies or not\n            var conditionalDependencies = this.getChildConditionalDependencies(propertyId);\n            if (!conditionalDependencies || conditionalDependencies.length === 0)\n            {\n                //\n                // BASIC DEPENENDENCY CHECKING (CORE JSON SCHEMA)\n                //\n\n                // special case: if the field is a boolean field and we have no conditional dependency checking,\n                // then we set valid = false if the field data is a boolean false\n                if (dependentOnField.getType() === \"boolean\" && !this.childrenByPropertyId[propertyId].options.dependencies && !dependentOnData)\n                {\n                    valid = false;\n                }\n                else\n                {\n                    valid = !Alpaca.isValEmpty(dependentOnField.data);\n                }\n            }\n            else\n            {\n                //\n                // CONDITIONAL DEPENDENCY CHECKING (ALPACA EXTENSION VIA OPTIONS)\n                //\n\n                // Alpaca extends JSON schema by allowing dependencies to trigger only for specific values on the\n                // dependent fields.  If options are specified to define this, we walk through and perform an\n                // AND operation across any fields\n\n                // do some data sanity cleanup\n                if (dependentOnField.getType() === \"boolean\" && !dependentOnData) {\n                    dependentOnData = false;\n                }\n\n                var conditionalData = conditionalDependencies[dependentOnPropertyId];\n\n                // if the option is a function, then evaluate the function to determine whether to show\n                // the function evaluates regardless of whether the schema-based fallback determined we should show\n                if (!Alpaca.isEmpty(conditionalData) && Alpaca.isFunction(conditionalData))\n                {\n                    valid = conditionalData.call(this, dependentOnData);\n                }\n                else\n                {\n                    // assume true\n                    valid = true;\n\n                    // the conditional data is an array of values\n                    if (Alpaca.isArray(conditionalData)) {\n\n                        // check array value\n                        if (!Alpaca.anyEquality(dependentOnData, conditionalData))\n                        {\n                            valid = false;\n                        }\n                    }\n                    else\n                    {\n                        // check object value\n                        if (!Alpaca.isEmpty(conditionalData) && !Alpaca.anyEquality(conditionalData, dependentOnData))\n                        {\n                            valid = false;\n                        }\n                    }\n                }\n            }\n\n            //\n            // NESTED HIDDENS DEPENDENCY HIDES (ALPACA EXTENSION)\n            //\n\n            // final check: only set valid if the dependentOnPropertyId is showing\n            if (dependentOnField && dependentOnField.isHidden())\n            {\n                valid = false;\n            }\n\n            return valid;\n        },\n\n        /**\n         * Gets child index.\n         *\n         * @param {Object} propertyId Child field property ID.\n         */\n        getIndex: function(propertyId)\n        {\n            if (Alpaca.isEmpty(propertyId)) {\n                return -1;\n            }\n            for (var i = 0; i < this.children.length; i++) {\n                var pid = this.children[i].propertyId;\n                if (pid == propertyId) { // jshint ignore:line\n                    return i;\n                }\n            }\n            return -1;\n        },\n\n\n\n        ///////////////////////////////////////////////////////////////////////////////////////////////////\n        //\n        // DYNAMIC METHODS\n        //\n        ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n        /**\n         * Adds an item to the object.\n         *\n         * @param {String} propertyId Child field property ID.\n         * @param {Object} itemSchema schema\n         * @param {Object} fieldOptions Child field options.\n         * @param {Any} value Child field value\n         * @param {String} insertAfterId Location where the child item will be inserted.\n         * @param [Function} callback called once the item has been added\n         */\n        addItem: function(propertyId, itemSchema, itemOptions, itemData, insertAfterId, callback)\n        {\n            var self = this;\n\n            this.createItem(propertyId, itemSchema, itemOptions, itemData, insertAfterId, function(child) {\n\n                var index = null;\n                if (insertAfterId && self.childrenById[insertAfterId])\n                {\n                    for (var z = 0; z < self.children.length; z++)\n                    {\n                        if (self.children[z].getId() == insertAfterId)\n                        {\n                            index = z;\n                            break;\n                        }\n                    }\n                }\n\n                // register the child\n                self.registerChild(child, ((index != null) ? index + 1 : 0));\n\n                // insert into dom\n                self.doAddItem(index, child);\n\n                // updates dom markers for this element and any siblings\n                self.handleRepositionDOMRefresh();\n\n                // update the array item toolbar state\n                //self.updateToolbars();\n\n                // refresh validation state\n                self.refreshValidationState(true, function() {\n\n                    // dispatch event: add\n                    self.trigger(\"add\", child);\n\n                    // trigger update\n                    self.triggerUpdate();\n\n                    // trigger \"ready\"\n                    child.triggerWithPropagation.call(child, \"ready\", \"down\");\n\n                    if (callback)\n                    {\n                        callback();\n                    }\n\n                });\n            });\n        },\n\n        doAddItem: function(index, item)\n        {\n            var self = this;\n\n            // insert into dom\n            if (!index)\n            {\n                // insert first into container\n                $(self.container).prepend(item.containerItemEl);\n            }\n            else\n            {\n                // insert at a specific index\n                var existingElement = self.getContainerEl().children(\"[data-alpaca-container-item-index='\" + index + \"']\");\n                if (existingElement && existingElement.length > 0)\n                {\n                    // insert after\n                    existingElement.after(item.containerItemEl);\n                }\n            }\n\n            self.doAfterAddItem(item, function() {\n\n                // trigger ready\n                Alpaca.fireReady(item);\n\n            });\n\n        },\n\n        doAfterAddItem: function(item, callback)\n        {\n            callback();\n        },\n\n        doResolveItemContainer: function()\n        {\n            var self = this;\n\n            return $(self.container);\n        },\n\n        /**\n         * Removes an item from the object.\n         *\n         * @param propertyId\n         * @param callback\n         */\n        removeItem: function(propertyId, callback)\n        {\n            var self = this;\n\n            var childField = this.childrenByPropertyId[propertyId];\n            if (childField)\n            {\n                this.children = $.grep(this.children, function (val, index) {\n                    return (val.propertyId !== propertyId);\n                });\n\n                delete this.childrenByPropertyId[propertyId];\n                delete this.childrenById[childField.getId()];\n\n                // remove itemContainerEl from DOM\n                self.doRemoveItem(childField);\n\n                this.refreshValidationState(true, function () {\n\n                    // updates dom markers for this element and any siblings\n                    self.handleRepositionDOMRefresh();\n\n                    // dispatch event: remove\n                    self.trigger(\"remove\", childField);\n\n                    // trigger update handler\n                    self.triggerUpdate();\n\n                    if (callback)\n                    {\n                        callback();\n                    }\n                });\n            }\n            else\n            {\n                callback();\n            }\n        },\n\n        doRemoveItem: function(item)\n        {\n            var self = this;\n\n            var removeItemContainer = self.doResolveItemContainer();\n\n            removeItemContainer.children(\".alpaca-container-item[data-alpaca-container-item-name='\" + item.name + \"']\").remove();\n\n            // destroy child field itself\n            item.destroy();\n        },\n\n        ///////////////////////////////////////////////////////////////////////////////////////////////////////\n        //\n        // WIZARD\n        //\n        ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n        /**\n         * Wraps the current object into a wizard container and wires up the navigation and buttons so that\n         * wizard elements flip nicely.\n         */\n        wizard: function()\n        {\n            var self = this;\n\n            // config-driven\n            var stepDescriptors = this.wizardConfigs.steps;\n            if (!stepDescriptors)\n            {\n                stepDescriptors = [];\n            }\n            var wizardTitle = this.wizardConfigs.title;\n            var wizardDescription = this.wizardConfigs.description;\n            var buttonDescriptors = this.wizardConfigs.buttons;\n            if (!buttonDescriptors)\n            {\n                buttonDescriptors = {};\n            }\n            if (!buttonDescriptors[\"previous\"])\n            {\n                buttonDescriptors[\"previous\"] = {}\n            }\n            if (!buttonDescriptors[\"previous\"].title)\n            {\n                buttonDescriptors[\"previous\"].title = \"Previous\";\n            }\n            if (!buttonDescriptors[\"previous\"].align)\n            {\n                buttonDescriptors[\"previous\"].align = \"left\";\n            }\n            if (!buttonDescriptors[\"previous\"].type)\n            {\n                buttonDescriptors[\"previous\"].type = \"button\";\n            }\n            if (!buttonDescriptors[\"next\"])\n            {\n                buttonDescriptors[\"next\"] = {}\n            }\n            if (!buttonDescriptors[\"next\"].title)\n            {\n                buttonDescriptors[\"next\"].title = \"Next\";\n            }\n            if (!buttonDescriptors[\"next\"].align)\n            {\n                buttonDescriptors[\"next\"].align = \"right\";\n            }\n            if (!buttonDescriptors[\"next\"].type)\n            {\n                buttonDescriptors[\"next\"].type = \"button\";\n            }\n\n            if (!this.wizardConfigs.hideSubmitButton)\n            {\n                if (!buttonDescriptors[\"submit\"]) {\n                    buttonDescriptors[\"submit\"] = {}\n                }\n                if (!buttonDescriptors[\"submit\"].title) {\n                    buttonDescriptors[\"submit\"].title = \"Submit\";\n                }\n                if (!buttonDescriptors[\"submit\"].align) {\n                    buttonDescriptors[\"submit\"].align = \"right\";\n                }\n                if (!buttonDescriptors[\"submit\"].type) {\n                    buttonDescriptors[\"submit\"].type = \"button\";\n                }\n            }\n\n            for (var buttonKey in buttonDescriptors)\n            {\n                if (!buttonDescriptors[buttonKey].type)\n                {\n                    buttonDescriptors[buttonKey].type = \"button\";\n                }\n            }\n            var showSteps = this.wizardConfigs.showSteps;\n            if (typeof(showSteps) == \"undefined\")\n            {\n                showSteps = true;\n            }\n            var showProgressBar = this.wizardConfigs.showProgressBar;\n            var performValidation = this.wizardConfigs.validation;\n            if (typeof(performValidation) == \"undefined\")\n            {\n                performValidation = true;\n            }\n\n            // DOM-driven configuration\n            var wizardTitle = $(this.field).attr(\"data-alpaca-wizard-title\");\n            var wizardDescription = $(this.field).attr(\"data-alpaca-wizard-description\");\n            var _wizardValidation = $(this.field).attr(\"data-alpaca-wizard-validation\");\n            if (typeof(_wizardValidation) != \"undefined\")\n            {\n                performValidation = _wizardValidation ? true : false;\n            }\n            var _wizardShowSteps = $(this.field).attr(\"data-alpaca-wizard-show-steps\");\n            if (typeof(_wizardShowSteps) != \"undefined\")\n            {\n                showSteps = _wizardShowSteps ? true : false;\n            }\n            var _wizardShowProgressBar = $(this.field).attr(\"data-alpaca-wizard-show-progress-bar\");\n            if (typeof(_wizardShowProgressBar) != \"undefined\")\n            {\n                showProgressBar = _wizardShowProgressBar ? true : false;\n            }\n\n            // find all of the steps\n            var stepEls = $(this.field).find(\"[data-alpaca-wizard-role='step']\");\n\n            // DOM-driven configuration of step descriptors\n            if (stepDescriptors.length == 0)\n            {\n                stepEls.each(function(i) {\n\n                    var stepDescriptor = {};\n\n                    var stepTitle = $(this).attr(\"data-alpaca-wizard-step-title\");\n                    if (typeof(stepTitle) != \"undefined\")\n                    {\n                        stepDescriptor.title = stepTitle;\n                    }\n                    if (!stepDescriptor.title)\n                    {\n                        stepDescriptor.title = \"Step \" + i;\n                    }\n\n                    var stepDescription = $(this).attr(\"data-alpaca-wizard-step-description\");\n                    if (typeof(stepDescription) != \"undefined\")\n                    {\n                        stepDescriptor.description = stepDescription;\n                    }\n                    if (!stepDescriptor.description)\n                    {\n                        stepDescriptor.description = \"Step \" + i;\n                    }\n\n                    stepDescriptors.push(stepDescriptor);\n                });\n            }\n\n            // assume something for progress bar if not specified\n            if (typeof(showProgressBar) == \"undefined\")\n            {\n                if (stepDescriptors.length > 1)\n                {\n                    showProgressBar = true;\n                }\n            }\n\n\n            // model for use in rendering the wizard\n            var model = {};\n            model.wizardTitle = wizardTitle;\n            model.wizardDescription = wizardDescription;\n            model.showSteps = showSteps;\n            model.performValidation = performValidation;\n            model.steps = stepDescriptors;\n            model.buttons = buttonDescriptors;\n            model.schema = self.schema;\n            model.options = self.options;\n            model.data = self.data;\n            model.showProgressBar = showProgressBar;\n            model.markAllStepsVisited = this.wizardConfigs.markAllStepsVisited;\n            model.view = self.view;\n\n            // render the actual wizard\n            var wizardTemplateDescriptor = self.view.getTemplateDescriptor(\"wizard\", self);\n            if (wizardTemplateDescriptor)\n            {\n                var wizardEl = Alpaca.tmpl(wizardTemplateDescriptor, model);\n\n                $(self.field).append(wizardEl);\n\n                var wizardNav = $(wizardEl).find(\".alpaca-wizard-nav\");\n                var wizardSteps = $(wizardEl).find(\".alpaca-wizard-steps\");\n                var wizardButtons = $(wizardEl).find(\".alpaca-wizard-buttons\");\n                var wizardProgressBar = $(wizardEl).find(\".alpaca-wizard-progress-bar\");\n\n                // move steps into place\n                $(wizardSteps).append(stepEls);\n\n                (function(wizardNav, wizardSteps, wizardButtons, model) {\n\n                    var currentIndex = 0;\n\n                    var previousButtonEl = $(wizardButtons).find(\"[data-alpaca-wizard-button-key='previous']\");\n                    var nextButtonEl = $(wizardButtons).find(\"[data-alpaca-wizard-button-key='next']\");\n                    var submitButtonEl = $(wizardButtons).find(\"[data-alpaca-wizard-button-key='submit']\");\n\n                    // snap into place a little controller to work the buttons\n                    // assume the first step\n                    var refreshSteps = function()\n                    {\n                        // NAV\n                        if (model.showSteps)\n                        {\n                            if (!model.visits)\n                            {\n                                model.visits = {};\n                            }\n\n                            // optionally mark all steps as visited\n                            if (model.markAllStepsVisited)\n                            {\n                                var stepElements = $(wizardNav).find(\"[data-alpaca-wizard-step-index]\");\n                                for (var g = 0; g < stepElements.length; g++)\n                                {\n                                    model.visits[g] = true;\n                                }\n                            }\n\n                            // mark current step as visited\n                            model.visits[currentIndex] = true;\n\n                            var stepElements = $(wizardNav).find(\"[data-alpaca-wizard-step-index]\");\n                            $(stepElements).removeClass(\"disabled\");\n                            $(stepElements).removeClass(\"completed\");\n                            $(stepElements).removeClass(\"active\");\n                            $(stepElements).removeClass(\"visited\");\n                            for (var g = 0; g < stepElements.length; g++)\n                            {\n                                if (g < currentIndex)\n                                {\n                                    $(wizardNav).find(\"[data-alpaca-wizard-step-index='\" + g + \"']\").addClass(\"completed\");\n                                }\n                                else if (g === currentIndex)\n                                {\n                                    $(wizardNav).find(\"[data-alpaca-wizard-step-index='\" + g + \"']\").addClass(\"active\");\n                                }\n                                else\n                                {\n                                    if (model.visits && model.visits[g])\n                                    {\n                                        // do not mark disabled for this case\n                                    }\n                                    else\n                                    {\n                                        $(wizardNav).find(\"[data-alpaca-wizard-step-index='\" + g + \"']\").addClass(\"disabled\");\n                                    }\n\n                                }\n\n                                if (model.visits && model.visits[g])\n                                {\n                                    $(wizardNav).find(\"[data-alpaca-wizard-step-index='\" + g + \"']\").addClass(\"visited\");\n                                }\n                            }\n                        }\n\n                        // PROGRESS BAR\n                        if (model.showProgressBar)\n                        {\n                            var valueNow = currentIndex + 1;\n                            var valueMax = model.steps.length + 1;\n                            var width = parseInt(((valueNow / valueMax) * 100), 10) + \"%\";\n\n                            $(wizardProgressBar).find(\".progress-bar\").attr(\"aria-valuemax\", valueMax);\n                            $(wizardProgressBar).find(\".progress-bar\").attr(\"aria-valuenow\", valueNow);\n                            $(wizardProgressBar).find(\".progress-bar\").css(\"width\", width);\n                        }\n\n\n                        // BUTTONS\n\n                        // hide everything\n                        previousButtonEl.hide();\n                        nextButtonEl.hide();\n                        submitButtonEl.hide();\n\n                        // simple case\n                        if (model.steps.length == 1)\n                        {\n                            submitButtonEl.show();\n                        }\n                        else if (model.steps.length > 1)\n                        {\n                            if (currentIndex > 0)\n                            {\n                                previousButtonEl.show();\n                            }\n\n                            nextButtonEl.show();\n\n                            if (currentIndex == 0)\n                            {\n                                nextButtonEl.show();\n                            }\n                            else if (currentIndex == model.steps.length - 1)\n                            {\n                                nextButtonEl.hide();\n                                submitButtonEl.show();\n                            }\n                        }\n\n                        // hide all steps\n                        $(wizardSteps).find(\"[data-alpaca-wizard-role='step']\").hide();\n                        $($(wizardSteps).find(\"[data-alpaca-wizard-role='step']\")[currentIndex]).show();\n\n                    };\n\n                    var assertValidation = function(buttonId, callback)\n                    {\n                        if (!model.performValidation)\n                        {\n                            callback(true);\n                            return;\n                        }\n\n                        // collect all of the fields on the current step\n                        var fields = [];\n\n                        var currentStepEl = $($(wizardSteps).find(\"[data-alpaca-wizard-role='step']\")[currentIndex]);\n                        $(currentStepEl).find(\".alpaca-field\").each(function() {\n                            var fieldId = $(this).attr(\"data-alpaca-field-id\");\n                            if (fieldId)\n                            {\n                                var field = self.childrenById[fieldId];\n                                if (field)\n                                {\n                                    fields.push(field);\n                                }\n                            }\n                        });\n\n                        // wrap into validation functions\n                        var fns = [];\n                        for (var i = 0; i < fields.length; i++)\n                        {\n                            fns.push(function(field) {\n                                return function(cb)\n                                {\n                                    field.refreshValidationState(true, function() {\n                                        cb();\n                                    });\n                                }\n                            }(fields[i]));\n                        }\n\n                        // run all validations\n                        Alpaca.series(fns, function() {\n\n                            var valid = true;\n                            for (var i = 0; i < fields.length; i++)\n                            {\n                                valid = valid && fields[i].isValid(true);\n                            }\n\n                            // custom validation function?\n                            var b = model.buttons[buttonId];\n                            if (b && b.validate)\n                            {\n                                b.validate.call(self, function(_valid) {\n                                    valid = valid && _valid;\n                                    callback(valid);\n                                });\n                            }\n                            else\n                            {\n                                callback(valid);\n                            }\n                        });\n                    };\n\n                    $(previousButtonEl).click(function(e) {\n                        e.preventDefault();\n\n                        if (currentIndex >= 1)\n                        {\n                            //assertValidation(\"previous\", function(valid) {\n\n                                //if (valid)\n                                //{\n                                    var b = model.buttons[\"previous\"];\n                                    if (b)\n                                    {\n                                        if (b.click)\n                                        {\n                                            b.click.call(self, e);\n                                        }\n                                    }\n\n                                    currentIndex--;\n\n                                    refreshSteps();\n                                //}\n                            //});\n                        }\n                    });\n\n                    $(nextButtonEl).click(function(e) {\n                        e.preventDefault();\n\n                        if (currentIndex + 1 <= model.steps.length - 1)\n                        {\n                            assertValidation(\"next\", function(valid) {\n\n                                if (valid)\n                                {\n                                    var b = model.buttons[\"next\"];\n                                    if (b)\n                                    {\n                                        if (b.click)\n                                        {\n                                            b.click.call(self, e);\n                                        }\n                                    }\n\n                                    currentIndex++;\n\n                                    refreshSteps();\n                                }\n                                else\n                                {\n                                    // allow focus to settle on invalid field\n                                    window.setTimeout(function() {\n                                        self.focus(function(field) {\n                                            // done\n                                        });\n                                    }, 250);\n                                }\n                            });\n                        }\n                    });\n\n                    $(submitButtonEl).click(function(e) {\n                        e.preventDefault();\n\n                        if (currentIndex === model.steps.length - 1)\n                        {\n                            assertValidation(\"submit\", function(valid) {\n\n                                if (valid)\n                                {\n                                    var b = model.buttons[\"submit\"];\n                                    if (b)\n                                    {\n                                        if (b.click)\n                                        {\n                                            b.click.call(self, e);\n                                        }\n                                        else\n                                        {\n                                            // are we in a form?\n                                            if (self.form)\n                                            {\n                                                self.form.submit();\n                                            }\n                                        }\n                                    }\n                                }\n                                else\n                                {\n                                    // allow focus to settle on invalid field\n                                    window.setTimeout(function() {\n                                        self.focus(function(field) {\n                                            // done\n                                        });\n                                    }, 250);\n                                }\n                            });\n                        }\n                    });\n\n                    // all custom buttons\n                    $(wizardButtons).find(\"[data-alpaca-wizard-button-key]\").each(function() {\n                        var key = $(this).attr(\"data-alpaca-wizard-button-key\");\n                        if (key != \"submit\" && key != \"next\" && key != \"previous\") { // standard buttons have different behavior\n                            var b = model.buttons[key];\n                            if (b && b.click) {\n                                $(this).click(function (b) {\n                                    return function (e) {\n                                        b.click.call(self, e);\n                                    };\n                                }(b));\n                            }\n                        }\n                    });\n\n                    $(wizardNav).find(\"[data-alpaca-wizard-step-index]\").click(function(e) {\n                        e.preventDefault();\n\n                        var navIndex = $(this).attr(\"data-alpaca-wizard-step-index\");\n                        if (navIndex)\n                        {\n                            navIndex = parseInt(navIndex, 10);\n\n                            if (navIndex == currentIndex || (model.visits && model.visits[navIndex]))\n                            {\n                                // if we're going backwards, then we do not run validation\n                                if (navIndex < currentIndex)\n                                {\n                                    currentIndex = navIndex;\n                                    refreshSteps();\n                                }\n                                else if (navIndex > currentIndex)\n                                {\n                                    assertValidation(null, function(valid) {\n\n                                        if (valid)\n                                        {\n                                            currentIndex = navIndex;\n                                            refreshSteps();\n                                        }\n                                    });\n                                }\n                                else\n                                {\n                                    // current item should not be clickable\n                                }\n                            }\n                        }\n                    });\n\n                    self.on(\"moveToStep\", function(event) {\n\n                        var index = event.index;\n                        var skipValidation = event.skipValidation;\n\n                        if ((typeof(index) !== \"undefined\") && index <= model.steps.length - 1)\n                        {\n                            if (skipValidation)\n                            {\n                                currentIndex = index;\n                                refreshSteps();\n                            }\n                            else\n                            {\n                                assertValidation(null, function(valid) {\n\n                                    if (valid)\n                                    {\n                                        currentIndex = index;\n\n                                        refreshSteps();\n                                    }\n                                });\n                            }\n                        }\n                    });\n\n                    self.on(\"advanceOrSubmit\", function(event) {\n\n                        assertValidation(null, function(valid) {\n\n                            if (valid)\n                            {\n                                if (currentIndex === model.steps.length - 1)\n                                {\n                                    $(submitButtonEl).click();\n                                }\n                                else\n                                {\n                                    $(nextButtonEl).click();\n                                }\n                            }\n                        });\n                    });\n\n\n                    refreshSteps();\n\n                }(wizardNav, wizardSteps, wizardButtons, model));\n            }\n        },\n\n        /**\n         * Renders a configuration-based wizard without a layout template.\n         */\n        autoWizard: function()\n        {\n            var stepBindings = this.wizardConfigs.bindings;\n            if (!stepBindings)\n            {\n                stepBindings = {};\n            }\n\n            for (var propertyId in this.childrenByPropertyId)\n            {\n                if (!stepBindings.hasOwnProperty(propertyId))\n                {\n                    stepBindings[propertyId] = 1;\n                }\n            }\n\n            // should we create steps?\n            var createSteps = true;\n            if ($(this.field).find(\"[data-alpaca-wizard-role='step']\").length > 0)\n            {\n                // already there\n                createSteps = false;\n            }\n\n            var step = 1;\n            var stepFields = [];\n            do\n            {\n                // collect fields in this step\n                stepFields = [];\n                for (var propertyId in stepBindings)\n                {\n                    if (stepBindings[propertyId] === step)\n                    {\n                        if (this.childrenByPropertyId && this.childrenByPropertyId[propertyId])\n                        {\n                            //col.push(this.childrenByPropertyId[propertyId].field);\n                            //col.push(this.childrenByPropertyId[propertyId].containerItemEl);\n                            stepFields.push(this.childrenByPropertyId[propertyId]);\n                        }\n                    }\n                }\n\n                if (stepFields.length > 0)\n                {\n                    var stepEl = null;\n                    if (createSteps)\n                    {\n                        stepEl = $('<div data-alpaca-wizard-role=\"step\"></div>');\n                        $(this.field).append(stepEl);\n                    }\n                    else\n                    {\n                        stepEl = $($(this.field).find(\"[data-alpaca-wizard-role='step']\")[step-1]);\n                    }\n\n                    // is there any order information in the items?\n                    var hasOrderInformation = false;\n                    for (var i = 0; i < stepFields.length; i++) {\n                        if (typeof(stepFields[i].options.order) !== \"undefined\") {\n                            hasOrderInformation = true;\n                            break;\n                        }\n                    }\n\n                    if (hasOrderInformation)\n                    {\n                        // sort by order?\n                        stepFields.sort(function (a, b) {\n\n                            var orderA = a.options.order;\n                            if (!orderA)\n                            {\n                                orderA = 0;\n                            }\n                            var orderB = b.options.order;\n                            if (!orderB)\n                            {\n                                orderB = 0;\n                            }\n\n                            return (orderA - orderB);\n                        });\n                    }\n\n                    // move elements in\n                    for (var i = 0; i < stepFields.length; i++)\n                    {\n                        $(stepEl).append(stepFields[i].containerItemEl);\n                    }\n\n                    step++;\n                }\n            }\n            while (stepFields.length > 0);\n\n            // now run the normal wizard\n            this.wizard();\n\n            // if the container element doesn't have any children left, hide it\n            if ($(this.container).children().length === 0) {\n                $(this.container).css(\"display\", \"none\");\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#getType\n         */\n        getType: function() {\n            return \"object\";\n        },\n\n        /**\n         * Moves a field.\n         *\n         * @param {Number} sourceIndex the index of the child to be moved\n         * @param {Number} targetIndex the index to which the child should be moved\n         * @param [Boolean] animate whether to animate the movement\n         * @param [Function] callback called after the child is added\n         */\n        moveItem: function(sourceIndex, targetIndex, animate, callback)\n        {\n            var self = this;\n\n            if (typeof(animate) == \"function\")\n            {\n                callback = animate;\n                animate = self.options.animate;\n            }\n\n            if (typeof(animate) == \"undefined\")\n            {\n                animate = self.options.animate ? self.options.animate : true;\n            }\n\n            if (typeof(sourceIndex) === \"string\")\n            {\n                sourceIndex = parseInt(sourceIndex, 10);\n            }\n\n            if (typeof(targetIndex) === \"string\")\n            {\n                targetIndex = parseInt(targetIndex, 10);\n            }\n\n            if (targetIndex < 0)\n            {\n                targetIndex = 0;\n            }\n            if (targetIndex >= self.children.length)\n            {\n                targetIndex = self.children.length - 1;\n            }\n\n            if (targetIndex === -1)\n            {\n                // nothing to swap with\n                return;\n            }\n\n            var targetChild = self.children[targetIndex];\n            if (!targetChild)\n            {\n                // target child not found\n                return;\n            }\n\n            // the source and target DOM elements\n            var sourceContainer = self.getContainerEl().children(\"[data-alpaca-container-item-index='\" + sourceIndex + \"']\");\n            var targetContainer = self.getContainerEl().children(\"[data-alpaca-container-item-index='\" + targetIndex + \"']\");\n\n            // create two temp elements as markers for switch\n            var tempSourceMarker = $(\"<div class='tempMarker1'></div>\");\n            sourceContainer.before(tempSourceMarker);\n            var tempTargetMarker = $(\"<div class='tempMarker2'></div>\");\n            targetContainer.before(tempTargetMarker);\n\n            var onComplete = function()\n            {\n                // swap order in children\n                var tempChildren = [];\n                for (var i = 0; i < self.children.length; i++)\n                {\n                    if (i === sourceIndex)\n                    {\n                        tempChildren[i] = self.children[targetIndex];\n                    }\n                    else if (i === targetIndex)\n                    {\n                        tempChildren[i] = self.children[sourceIndex];\n                    }\n                    else\n                    {\n                        tempChildren[i] = self.children[i];\n                    }\n                }\n                self.children = tempChildren;\n\n                // swap order in DOM\n                tempSourceMarker.replaceWith(targetContainer);\n                tempTargetMarker.replaceWith(sourceContainer);\n\n                // updates dom markers for this element and any siblings\n                self.handleRepositionDOMRefresh();\n\n                // update the action bar bindings\n                $(sourceContainer).find(\"[data-alpaca-array-actionbar-item-index='\" + sourceIndex + \"']\").attr(\"data-alpaca-array-actionbar-item-index\", targetIndex);\n                $(targetContainer).find(\"[data-alpaca-array-actionbar-item-index='\" + targetIndex + \"']\").attr(\"data-alpaca-array-actionbar-item-index\", sourceIndex);\n\n                // refresh validation state\n                self.refreshValidationState();\n\n                // trigger update\n                self.triggerUpdate();\n\n                // dispatch event: move\n                self.trigger(\"move\");\n\n                if (callback)\n                {\n                    callback();\n                }\n            };\n\n            if (animate)\n            {\n                // swap divs visually\n                Alpaca.animatedSwap(sourceContainer, targetContainer, 500, function() {\n                    onComplete();\n                });\n            }\n            else\n            {\n                onComplete();\n            }\n        },\n\n\n        /* builder_helpers */\n\n        /**\n         * @see Alpaca.Field#getTitle\n         */\n        getTitle: function() {\n            return \"Object Field\";\n        },\n\n        /**\n         * @see Alpaca.Field#getDescription\n         */\n        getDescription: function() {\n            return \"Object field for containing other fields\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ContainerField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            var properties = {\n                \"properties\": {\n                    \"properties\": {\n                        \"title\": \"Properties\",\n                        \"description\": \"List of child properties.\",\n                        \"type\": \"object\"\n                    },\n                    \"maxProperties\": {\n                        \"type\": \"number\",\n                        \"title\": \"Maximum Number Properties\",\n                        \"description\": \"The maximum number of properties that this object is allowed to have\"\n                    },\n                    \"minProperties\": {\n                        \"type\": \"number\",\n                        \"title\": \"Minimum Number of Properties\",\n                        \"description\": \"The minimum number of properties that this object is required to have\"\n                    }\n                }\n            };\n\n            var fieldsProperties = properties.properties.properties;\n\n            fieldsProperties.properties = {};\n\n            if (this.children) {\n                for (var i = 0; i < this.children.length; i++) {\n                    var propertyId = this.children[i].propertyId;\n                    fieldsProperties.properties[propertyId] = this.children[i].getSchemaOfSchema();\n                    fieldsProperties.properties[propertyId].title = propertyId + \" :: \" + fieldsProperties.properties[propertyId].title;\n                }\n            }\n\n            return Alpaca.merge(this.base(), properties);\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ContainerField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            var schemaOfOptions = Alpaca.merge(this.base(), {\n                \"properties\": {\n                },\n                \"order\": {\n                    \"type\": \"number\",\n                    \"title\": \"Order\",\n                    \"description\": \"Allows for optional specification of the index of this field in the properties array.\"\n                }\n            });\n\n            var properties = {\n                \"properties\": {\n                    \"fields\": {\n                        \"title\": \"Field Options\",\n                        \"description\": \"List of options for child fields.\",\n                        \"type\": \"object\"\n                    }\n                }\n            };\n\n            var fieldsProperties = properties.properties.fields;\n\n            fieldsProperties.properties = {};\n\n            if (this.children) {\n                for (var i = 0; i < this.children.length; i++) {\n                    var propertyId = this.children[i].propertyId;\n                    fieldsProperties.properties[propertyId] = this.children[i].getSchemaOfOptions();\n                    fieldsProperties.properties[propertyId].title = propertyId + \" :: \" + fieldsProperties.properties[propertyId].title;\n                }\n            }\n\n            return Alpaca.merge(schemaOfOptions, properties);\n        }\n\n        /* end_builder_helpers */\n    });\n\n    // Additional Registrations\n    Alpaca.registerMessages({\n        \"tooManyProperties\": \"The maximum number of properties ({0}) has been exceeded.\",\n        \"tooFewProperties\": \"There are not enough properties ({0} are required)\"\n    });\n\n    Alpaca.registerFieldClass(\"object\", Alpaca.Fields.ObjectField);\n    Alpaca.registerDefaultSchemaFieldMapping(\"object\", \"object\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.AnyField = Alpaca.ControlField.extend(\n    /**\n     * @lends Alpaca.Fields.AnyField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Field#getFieldType\n         */\n        getFieldType: function() {\n            return \"any\";\n        },\n\n        /**\n         * @see Alpaca.Field#setup\n         */\n        setup: function()\n        {\n            this.base();\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            return this._getControlVal(true);\n        },\n\n        /**\n         * @see Alpaca.Field#setValue\n         */\n        setValue: function(value)\n        {\n            if (Alpaca.isEmpty(value))\n            {\n                this.control.val(\"\");\n            }\n            else\n            {\n                this.control.val(value);\n            }\n\n            // be sure to call into base method\n            this.base(value);\n        },\n\n        /**\n         * @see Alpaca.Field#disable\n         */\n        disable: function()\n        {\n            this.control.disabled = true;\n        },\n\n        /**\n         * @see Alpaca.Field#enable\n         */\n        enable: function()\n        {\n            this.control.disabled = false;\n        },\n\n        /**\n         * @see Alpaca.Field#focus\n         */\n        focus: function(onFocusCallback)\n        {\n            this.control.focus();\n\n            if (onFocusCallback)\n            {\n                onFocusCallback(this);\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#getType\n         */\n        getType: function() {\n            return \"any\";\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Field#getTitle\n         */\n        getTitle: function() {\n            return \"Any Field\";\n        },\n\n        /**\n         * @see Alpaca.Field#getDescription\n         */\n        getDescription: function() {\n            return \"Any field.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getOptionsForSchema\n         */\n        getOptionsForSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"any\", Alpaca.Fields.AnyField);\n    Alpaca.registerDefaultSchemaFieldMapping(\"any\", \"any\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.HiddenField = Alpaca.ControlField.extend(\n    /**\n     * @lends Alpaca.Fields.ControlField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.ControlField#getFieldType\n         */\n        getFieldType: function()\n        {\n            return \"hidden\";\n        },\n\n        /**\n         * @see Alpaca.Field#setup\n         */\n        setup: function()\n        {\n            this.base();\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            return this._getControlVal(true);\n        },\n\n        /**\n         * @see Alpaca.Field#setValue\n         */\n        setValue: function(value)\n        {\n            if (Alpaca.isEmpty(value)) {\n                this.getControlEl().val(\"\");\n            } else {\n                this.getControlEl().val(value);\n            }\n\n            // be sure to call into base method\n            this.base(value);\n        },\n\n        /**\n         * @see Alpaca.Field#getType\n         */\n        getType: function() {\n            return \"string\";\n        },\n\n\n        /* builder_helpers */\n\n        /**\n         * @see Alpaca.Field#getTitle\n         */\n        getTitle: function() {\n            return \"Hidden\";\n        },\n\n        /**\n         * @see Alpaca.Field#getDescription\n         */\n        getDescription: function() {\n            return \"Field for a hidden HTML input\";\n        }\n\n        /* end_builder_helpers */\n\n    });\n\n    Alpaca.registerFieldClass(\"hidden\", Alpaca.Fields.HiddenField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.AddressField = Alpaca.Fields.ObjectField.extend(\n    /**\n     * @lends Alpaca.Fields.AddressField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.ObjectField#getFieldType\n         */\n        getFieldType: function() {\n            return \"address\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.ObjectField#setup\n         */\n        setup: function()\n        {\n            this.base();\n\n            if (!this.data || !this.data.street) {\n                this.data = {\n                    street: ['', '']\n                };\n            }\n\n            this.schema = {\n                \"title\": \"Home Address\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"street\": {\n                        \"title\": \"Street\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"maxLength\": 30\n                        },\n                        \"minItems\": 0,\n                        \"maxItems\": 3\n                    },\n                    \"city\": {\n                        \"title\": \"City\",\n                        \"type\": \"string\"\n                    },\n                    \"state\": {\n                        \"title\": \"State\",\n                        \"type\": \"string\",\n                        \"enum\": [\"AL\", \"AK\", \"AS\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FM\", \"FL\", \"GA\", \"GU\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MH\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"MP\", \"OH\", \"OK\", \"OR\", \"PW\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VI\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\"]\n                    },\n                    \"zip\": {\n                        \"title\": \"Zip Code\",\n                        \"type\": \"string\",\n                        \"pattern\": /^(\\d{5}(-\\d{4})?)?$/\n                    }\n                }\n            };\n            Alpaca.merge(this.options, {\n                \"fields\": {\n                    \"zip\": {\n                        \"maskString\": \"99999\",\n                        \"size\": 5\n                    },\n                    \"state\": {\n                        \"optionLabels\": [\"ALABAMA\", \"ALASKA\", \"AMERICAN SAMOA\", \"ARIZONA\", \"ARKANSAS\", \"CALIFORNIA\", \"COLORADO\", \"CONNECTICUT\", \"DELAWARE\", \"DISTRICT OF COLUMBIA\", \"FEDERATED STATES OF MICRONESIA\", \"FLORIDA\", \"GEORGIA\", \"GUAM\", \"HAWAII\", \"IDAHO\", \"ILLINOIS\", \"INDIANA\", \"IOWA\", \"KANSAS\", \"KENTUCKY\", \"LOUISIANA\", \"MAINE\", \"MARSHALL ISLANDS\", \"MARYLAND\", \"MASSACHUSETTS\", \"MICHIGAN\", \"MINNESOTA\", \"MISSISSIPPI\", \"MISSOURI\", \"MONTANA\", \"NEBRASKA\", \"NEVADA\", \"NEW HAMPSHIRE\", \"NEW JERSEY\", \"NEW MEXICO\", \"NEW YORK\", \"NORTH CAROLINA\", \"NORTH DAKOTA\", \"NORTHERN MARIANA ISLANDS\", \"OHIO\", \"OKLAHOMA\", \"OREGON\", \"PALAU\", \"PENNSYLVANIA\", \"PUERTO RICO\", \"RHODE ISLAND\", \"SOUTH CAROLINA\", \"SOUTH DAKOTA\", \"TENNESSEE\", \"TEXAS\", \"UTAH\", \"VERMONT\", \"VIRGIN ISLANDS\", \"VIRGINIA\", \"WASHINGTON\", \"WEST VIRGINIA\", \"WISCONSIN\", \"WYOMING\"]\n                    }\n                }\n            });\n\n            if (Alpaca.isEmpty(this.options.addressValidation))\n            {\n                this.options.addressValidation = true;\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#isContainer\n         */\n        isContainer: function()\n        {\n            return false;\n        },\n\n        /**\n         * Returns address in a single line string.\n         *\n         * @returns {String} Address as a single line string.\n         */\n        getAddress: function()\n        {\n            var value = this.getValue();\n            if (this.view.type === \"view\")\n            {\n                value = this.data;\n            }\n            var address = \"\";\n            if (value)\n            {\n                if (value.street)\n                {\n                    $.each(value.street, function(index, value) {\n                        address += value + \" \";\n                    });\n                }\n                if (value.city)\n                {\n                    address += value.city + \" \";\n                }\n                if (value.state)\n                {\n                    address += value.state + \" \";\n                }\n                if (value.zip)\n                {\n                    address += value.zip;\n                }\n            }\n\n            return address;\n        },\n\n        /**\n         * @see Alpaca.Field#afterRenderContainer\n         */\n        afterRenderContainer: function(model, callback) {\n\n            var self = this;\n\n            this.base(model, function() {\n                var container = self.getContainerEl();\n\n                // apply additional css\n                $(container).addClass(\"alpaca-addressfield\");\n\n                if (self.options.addressValidation && !self.isDisplayOnly())\n                {\n                    $('<div style=\"clear:both;\"></div>').appendTo(container);\n                    var mapButton = $('<div class=\"alpaca-form-button\">Show Google Map</div>').appendTo(container);\n                    if (mapButton.button)\n                    {\n                        mapButton.button({\n                            text: true\n                        });\n                    }\n                    mapButton.click(function() {\n\n                        if (google && google.maps)\n                        {\n                            var geocoder = new google.maps.Geocoder();\n                            var address = self.getAddress();\n                            if (geocoder)\n                            {\n                                geocoder.geocode({\n                                    'address': address\n                                }, function(results, status)\n                                {\n                                    if (status === google.maps.GeocoderStatus.OK)\n                                    {\n                                        var mapCanvasId = self.getId() + \"-map-canvas\";\n                                        if ($('#' + mapCanvasId).length === 0)\n                                        {\n                                            $(\"<div id='\" + mapCanvasId + \"' class='alpaca-field-address-mapcanvas'></div>\").appendTo(self.getFieldEl());\n                                        }\n\n                                        var map = new google.maps.Map(document.getElementById(self.getId() + \"-map-canvas\"), {\n                                            \"zoom\": 10,\n                                            \"center\": results[0].geometry.location,\n                                            \"mapTypeId\": google.maps.MapTypeId.ROADMAP\n                                        });\n\n                                        var marker = new google.maps.Marker({\n                                            map: map,\n                                            position: results[0].geometry.location\n                                        });\n\n                                    }\n                                    else\n                                    {\n                                        self.displayMessage(\"Geocoding failed: \" + status);\n                                    }\n                                });\n                            }\n\n                        }\n                        else\n                        {\n                            self.displayMessage(\"Google Map API is not installed.\");\n                        }\n                    }).wrap('<small/>');\n\n                    if (self.options.showMapOnLoad)\n                    {\n                        mapButton.click();\n                    }\n                }\n\n                callback();\n\n            });\n        },\n\n        /**\n         * @see Alpaca.Fields.ObjectField#getType\n         */\n        getType: function() {\n            return \"any\";\n        }\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.ObjectField#getTitle\n         */\n        getTitle: function() {\n            return \"Address\";\n        },\n\n        /**\n         * @see Alpaca.Fields.ObjectField#getDescription\n         */\n        getDescription: function() {\n            return \"Standard US Address with Street, City, State and Zip. Also comes with support for Google map.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.ObjectField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"validateAddress\": {\n                        \"title\": \"Address Validation\",\n                        \"description\": \"Enable address validation if true\",\n                        \"type\": \"boolean\",\n                        \"default\": true\n                    },\n                    \"showMapOnLoad\": {\n                        \"title\": \"Whether to show the map when first loaded\",\n                        \"type\": \"boolean\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.ObjectField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"validateAddress\": {\n                        \"helper\": \"Address validation if checked\",\n                        \"rightLabel\": \"Enable Google Map for address validation?\",\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"address\", Alpaca.Fields.AddressField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.CKEditorField = Alpaca.Fields.TextAreaField.extend(\n    /**\n     * @lends Alpaca.Fields.CKEditorField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextAreaField#getFieldType\n         */\n        getFieldType: function() {\n            return \"ckeditor\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#setup\n         */\n        setup: function()\n        {\n            if (!this.data)\n            {\n                this.data = \"\";\n            }\n\n            this.base();\n\n            if (typeof(this.options.ckeditor) == \"undefined\")\n            {\n                this.options.ckeditor = {};\n            }\n        },\n\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                // see if we can render CK Editor\n                if (!self.isDisplayOnly() && self.control && typeof(CKEDITOR) !== \"undefined\")\n                {\n                    // wait for Alpaca to declare the DOM swapped and ready before we attempt to do anything with CKEditor\n                    self.on(\"ready\", function() {\n                        if (!self.editor)\n                        {\n                            self.editor = CKEDITOR.replace($(self.control)[0], self.options.ckeditor);\n\n                            self.initCKEditorEvents();\n                        }\n                    });\n                }\n\n                // if the ckeditor's dom element gets destroyed, make sure we clean up the editor instance\n                $(self.control).bind('destroyed', function() {\n\n                    if (self.editor)\n                    {\n                        self.editor.removeAllListeners();\n                        // catch here because CKEditor has an issue if DOM element deletes before CKEditor cleans up\n                        // see: https://github.com/lemonde/angular-ckeditor/issues/7\n                        try { self.editor.destroy(false); } catch (e) { }\n                        self.editor = null;\n                    }\n\n                });\n\n                callback();\n            });\n        },\n\n        initCKEditorEvents: function()\n        {\n            var self = this;\n\n            if (self.editor)\n            {\n                // click event\n                self.editor.on(\"click\", function (e) {\n                    self.onClick.call(self, e);\n                    self.trigger(\"click\", e);\n                });\n\n                // change event\n                self.editor.on(\"change\", function (e) {\n                    self.onChange();\n                    self.triggerWithPropagation(\"change\", e);\n                });\n\n                // blur event\n                self.editor.on('blur', function (e) {\n                    self.onBlur();\n                    self.trigger(\"blur\", e);\n                });\n\n                // focus event\n                self.editor.on(\"focus\", function (e) {\n                    self.onFocus.call(self, e);\n                    self.trigger(\"focus\", e);\n                });\n\n                // keypress event\n                self.editor.on(\"key\", function (e) {\n                    self.onKeyPress.call(self, e);\n                    self.trigger(\"keypress\", e);\n                });\n\n                // NOTE: these do not seem to work with CKEditor?\n                /*\n                 // keyup event\n                 self.editor.on(\"keyup\", function(e) {\n                 self.onKeyUp.call(self, e);\n                 self.trigger(\"keyup\", e);\n                 });\n\n                 // keydown event\n                 self.editor.on(\"keydown\", function(e) {\n                 self.onKeyDown.call(self, e);\n                 self.trigger(\"keydown\", e);\n                 });\n                 */\n            }\n        },\n\n        setValue: function(value)\n        {\n            var self = this;\n\n            // be sure to call into base method\n            this.base(value);\n\n            if (self.editor)\n            {\n                self.editor.setData(value);\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            var self = this;\n\n            var value = null;\n\n            if (self.editor)\n            {\n                value = self.editor.getData();\n            }\n\n            return value;\n        },\n\n        /**\n         * @see Alpaca.Field#destroy\n         */\n        destroy: function()\n        {\n            var self = this;\n\n            // destroy the plugin instance\n            if (self.editor)\n            {\n                self.editor.destroy();\n                self.editor = null;\n            }\n\n            // call up to base method\n            this.base();\n        }\n\n        /* builder_helpers */\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#getTitle\n         */\n        ,\n        getTitle: function() {\n            return \"CK Editor\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#getDescription\n         */\n        getDescription: function() {\n            return \"Provides an instance of a CK Editor control for use in editing HTML.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"ckeditor\": {\n                        \"title\": \"CK Editor options\",\n                        \"description\": \"Use this entry to provide configuration options to the underlying CKEditor plugin.\",\n                        \"type\": \"any\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"ckeditor\": {\n                        \"type\": \"any\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"ckeditor\", Alpaca.Fields.CKEditorField);\n\n})(jQuery);\n\n/**\n * Uses the spectrum plugin to provide a color picker.\n * This used to rely on HTML5 but no longer.\n */\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.ColorField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.ColorField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.spectrumAvailable = false;\n            if (!self.isDisplayOnly() && typeof($.fn.spectrum) !== \"undefined\")\n            {\n                this.spectrumAvailable = true;\n            }\n\n            // default html5 input type = \"color\";\n            if (typeof(this.options.spectrum) === \"undefined\" && self.spectrumAvailable)\n            {\n                this.inputType = \"color\";\n            }\n\n            this.base();\n\n            // set up default spectrum settings\n            if (typeof(this.options.spectrum) === \"undefined\")\n            {\n                this.options.spectrum = {};\n            }\n            if (typeof(this.options.spectrum.showInput) === \"undefined\")\n            {\n                this.options.spectrum.showInput = true;\n            }\n            if (typeof(this.options.spectrum.showPalette) === \"undefined\")\n            {\n                this.options.spectrum.showPalette = true;\n            }\n            if (typeof(this.options.spectrum.preferredFormat) === \"undefined\")\n            {\n                this.options.spectrum.preferredFormat = \"hex3\";\n            }\n            if (typeof(this.options.spectrum.clickoutFiresChange) === \"undefined\")\n            {\n                this.options.spectrum.clickoutFiresChange = true;\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"color\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getType\n         */\n        getType: function() {\n            return \"string\";\n        },\n\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                // if we can render the spectrum plugin...\n                if (self.spectrumAvailable && self.control)\n                {\n                    setTimeout(function() {\n                        $((self.control)[0]).spectrum(\n                          $.extend({ color: self.data }, self.options.spectrum)\n                        );\n                    }, 100);\n\n                    $(self.control).on('change.spectrum', function(e, tinycolor) {\n                        var val = self.convertTinyColor(tinycolor);\n                        self.setValue(val);\n                    });\n                }\n\n                callback();\n            });\n        },\n\n        convertTinyColor: function(tinycolor)\n        {\n            return tinycolor.toHexString();\n        },\n\n        /* builder_helpers */\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Color Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"A color picker for selecting hexadecimal color values\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"color\", Alpaca.Fields.ColorField);\n    Alpaca.registerDefaultSchemaFieldMapping(\"color\", \"color\");\n\n})(jQuery);\n\n/**\n * Uses: https://mjolnic.com/bootstrap-colorpicker/\n */\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.ColorPickerField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.ColorPickerField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.simpleColorPickerAvailable = false;\n            if (!self.isDisplayOnly() && typeof($.fn.colorpicker) !== \"undefined\")\n            {\n                this.simpleColorPickerAvailable = true;\n            }\n\n            // default html5 input type = \"color\";\n            if (typeof(this.options.colorpicker) === \"undefined\" && !self.simpleColorPickerAvailable)\n            {\n                this.inputType = \"color\";\n            }\n\n            this.base();\n\n            // set up default spectrum settings\n            if (typeof(this.options.colorpicker) === \"undefined\")\n            {\n                this.options.colorpicker = {};\n            }\n\n            if (self.data)\n            {\n                self.options.colorpicker.color = self.data;\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"colorpicker\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getType\n         */\n        getType: function() {\n            return \"string\";\n        },\n\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                // if we can render the spectrum plugin...\n                if (self.simpleColorPickerAvailable && self.control)\n                {\n                    setTimeout(function() {\n                        $((self.control)[0]).colorpicker(self.options.colorpicker);\n                    }, 100);\n\n                    $(self.control).on('changeColor.colorpicker', function(event) {\n                        self.setValue(event.color.toHex());\n                    });\n                }\n\n                callback();\n            });\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Color Picker Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"A color picker for selecting hexadecimal color values\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"colorpicker\", Alpaca.Fields.ColorPickerField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.CountryField = Alpaca.Fields.SelectField.extend(\n    /**\n     * @lends Alpaca.Fields.CountryField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Field#getFieldType\n         */\n        getFieldType: function() {\n            return \"country\";\n        },\n\n        /**\n         * @see Alpaca.Fields.Field#setup\n         */\n        setup: function()\n        {\n            // defaults\n            if (Alpaca.isUndefined(this.options.capitalize))\n            {\n                this.options.capitalize = false;\n            }\n\n            this.schema[\"enum\"] = [];\n            this.options.optionLabels = [];\n\n            var countriesMap = this.getMessage(\"countries\");\n            if (countriesMap)\n            {\n                for (var countryKey in countriesMap)\n                {\n                    this.schema[\"enum\"].push(countryKey);\n\n                    var label = countriesMap[countryKey];\n                    if (this.options.capitalize)\n                    {\n                        label = label.toUpperCase();\n                    }\n\n                    this.options.optionLabels.push(label);\n                }\n            }\n\n            this.base();\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Country Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Provides a dropdown selector of countries keyed by their ISO3 code.  The names of the countries are read from the I18N bundle for the current locale.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"capitalize\": {\n                        \"title\": \"Capitalize\",\n                        \"description\": \"Whether the values should be capitalized\",\n                        \"type\": \"boolean\",\n                        \"default\": false,\n                        \"readonly\": true\n                    }\n                }\n            });\n\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"capitalize\": {\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"country\", Alpaca.Fields.CountryField);\n    Alpaca.registerDefaultFormatFieldMapping(\"country\", \"country\");\n\n})(jQuery);\n\n(function($) {\n\n    var round = (function() {\n        var strategies = {\n            up:      Math.ceil,\n            down:    function(input) { return ~~input; },\n            nearest: Math.round\n        };\n        return function(strategy) {\n            return strategies[strategy];\n        };\n    })();\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.CurrencyField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.CurrencyField.prototype\n     */\n    {\n        /**\n         * @constructs\n         * @augments Alpaca.Fields.TextField\n         *\n         * @class Currency Control\n         *\n         * @param {Object} container Field container.\n         * @param {Any} data Field data.\n         * @param {Object} options Field options.\n         * @param {Object} schema Field schema.\n         * @param {Object|String} view Field view.\n         * @param {Alpaca.Connector} connector Field connector.\n         * @param {Function} errorCallback Error callback.\n         */\n        constructor: function(container, data, options, schema, view, connector, errorCallback) {\n            options = options || {};\n\n            var pfOptionsSchema = this.getSchemaOfPriceFormatOptions().properties;\n            for (var i in pfOptionsSchema) {\n                var option = pfOptionsSchema[i];\n                if (!(i in options)) {\n                    options[i] = option[\"default\"] || undefined;\n                }\n            }\n\n            if (typeof(data) !== \"undefined\")\n            {\n                data = \"\" + parseFloat(data).toFixed(options.centsLimit);\n            }\n\n            this.base(container, data, options, schema, view, connector, errorCallback);\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"currency\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#postRender\n         */\n        afterRenderControl: function(model, callback) {\n\n            var self = this;\n\n            var field = this.getControlEl();\n\n            this.base(model, function() {\n\n                $(field).priceFormat(self.options);\n\n                callback();\n\n            });\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function() {\n\n            var field = this.getControlEl();\n\n            var val = $(field).is('input') ? field.val() : field.html();\n            if (this.options.unmask || this.options.round !== \"none\") {\n                var unmasked = function() {\n                    var result = '';\n                    for (var i in val) {\n                        var cur = val[i];\n                        if (!isNaN(cur)) {\n                            result += cur;\n                        } else if (cur === this.options.centsSeparator) {\n                            result += '.';\n                        }\n                    }\n                    return parseFloat(result);\n                }.bind(this)();\n                if (this.options.round !== \"none\") {\n                    unmasked = round(this.options.round)(unmasked);\n                    if (!this.options.unmask) {\n                        var result = [];\n                        var unmaskedString = \"\" + unmasked;\n                        for (var i = 0, u = 0; i < val.length; i++) {\n                            if (!isNaN(val[i])) {\n                                result.push(unmaskedString[u++] || 0);\n                            } else {\n                                result.push(val[i]);\n                            }\n                        }\n                        return result.join('');\n                    }\n                }\n                return unmasked;\n            } else {\n                return val;\n            }\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Currency Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Provides an automatically formatted and configurable input for entering currency amounts.\";\n        },\n\n        getSchemaOfPriceFormatOptions: function() {\n            return {\n                \"properties\": {\n                    \"allowNegative\": {\n                        \"title\": \"Allow Negative\",\n                        \"description\": \"Determines if negative numbers are allowed.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"centsLimit\": {\n                        \"title\": \"Cents Limit\",\n                        \"description\": \"The limit of fractional digits.\",\n                        \"type\": \"number\",\n                        \"default\": 2,\n                        \"minimum\": 0\n                    },\n                    \"centsSeparator\": {\n                        \"title\": \"Cents Separator\",\n                        \"description\": \"The separator between whole and fractional amounts.\",\n                        \"type\": \"text\",\n                        \"default\": \".\"\n                    },\n                    \"clearPrefix\": {\n                        \"title\": \"Clear Prefix\",\n                        \"description\": \"Determines if the prefix is cleared on blur.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"clearSuffix\": {\n                        \"title\": \"Clear Suffix\",\n                        \"description\": \"Determines if the suffix is cleared on blur.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"insertPlusSign\": {\n                        \"title\": \"Plus Sign\",\n                        \"description\": \"Determines if a plus sign should be inserted for positive values.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"limit\": {\n                        \"title\": \"Limit\",\n                        \"description\": \"A limit of the length of the field.\",\n                        \"type\": \"number\",\n                        \"default\": undefined,\n                        \"minimum\": 0\n                    },\n                    \"prefix\": {\n                        \"title\": \"Prefix\",\n                        \"description\": \"The prefix if any for the field.\",\n                        \"type\": \"text\",\n                        \"default\": \"$\"\n                    },\n                    \"round\": {\n                        \"title\": \"Round\",\n                        \"description\": \"Determines if the field is rounded. (Rounding is done when getValue is called and is not reflected in the UI)\",\n                        \"type\": \"string\",\n                        \"enum\": [ \"up\", \"down\", \"nearest\", \"none\" ],\n                        \"default\": \"none\"\n                    },\n                    \"suffix\": {\n                        \"title\": \"Suffix\",\n                        \"description\": \"The suffix if any for the field.\",\n                        \"type\": \"text\",\n                        \"default\": \"\"\n                    },\n                    \"thousandsSeparator\": {\n                        \"title\": \"Thousands Separator\",\n                        \"description\": \"The separator between thousands.\",\n                        \"type\": \"string\",\n                        \"default\": \",\"\n                    },\n                    \"unmask\": {\n                        \"title\": \"Unmask\",\n                        \"description\": \"If true then the resulting value for this field will be unmasked.  That is, the resulting value will be a float instead of a string (with the prefix, suffix, etc. removed).\",\n                        \"type\": \"boolean\",\n                        \"default\": true\n                    }\n                }\n            };\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), this.getSchemaOfPriceFormatOptions());\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"allowNegative\": {\n                        \"type\": \"checkbox\"\n                    },\n                    \"centsLimit\": {\n                        \"type\": \"number\"\n                    },\n                    \"centsSeparator\": {\n                        \"type\": \"text\"\n                    },\n                    \"clearPrefix\": {\n                        \"type\": \"checkbox\"\n                    },\n                    \"clearSuffix\": {\n                        \"type\": \"checkbox\"\n                    },\n                    \"insertPlusSign\": {\n                        \"type\": \"checkbox\"\n                    },\n                    \"limit\": {\n                        \"type\": \"number\"\n                    },\n                    \"prefix\": {\n                        \"type\": \"text\"\n                    },\n                    \"round\": {\n                        \"type\": \"select\"\n                    },\n                    \"suffix\": {\n                        \"type\": \"text\"\n                    },\n                    \"thousandsSeparator\": {\n                        \"type\": \"string\"\n                    },\n                    \"unmask\": {\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"currency\", Alpaca.Fields.CurrencyField);\n\n})(jQuery);\n\n(function($) {\n\n    // NOTE: this requires bootstrap-datetimepicker.js\n    // NOTE: this requires moment.js\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.DateField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.DateField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"date\";\n        },\n\n        getDefaultFormat: function() {\n            return \"MM/DD/YYYY\";\n        },\n\n        getDefaultExtraFormats: function() {\n            return [];\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            // default html5 input type = \"date\";\n            //this.inputType = \"date\";\n\n            this.base();\n\n            if (!self.options.picker)\n            {\n                self.options.picker = {};\n            }\n\n            if (typeof(self.options.picker.useCurrent) === \"undefined\") {\n                self.options.picker.useCurrent = false;\n            }\n\n            // date format\n\n            if (self.options.picker.format) {\n                self.options.dateFormat = self.options.picker.format;\n            }\n            if (!self.options.dateFormat) {\n                self.options.dateFormat = self.getDefaultFormat();\n            }\n            if (!self.options.picker.format) {\n                self.options.picker.format = self.options.dateFormat;\n            }\n\n            if (!self.options.picker.locale) {\n                self.options.picker.locale = \"en_US\";\n            }\n\n            if (!self.options.picker.dayViewHeaderFormat) {\n                self.options.picker.dayViewHeaderFormat = \"MMMM YYYY\";\n            }\n\n            // extra formats\n            if (!self.options.picker.extraFormats) {\n                var extraFormats = self.getDefaultExtraFormats();\n                if (extraFormats) {\n                    self.options.picker.extraFormats = extraFormats;\n                }\n            }\n\n            if (typeof(self.options.manualEntry) === \"undefined\")\n            {\n                self.options.manualEntry = false;\n            }\n        },\n        \n        onKeyPress: function(e)\n        {\n            if (this.options.manualEntry)\n            {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n            }\n            else\n            {\n                this.base(e);\n                return;\n            }\n        },\n        \n        onKeyDown: function(e)\n        {\n            if (this.options.manualEntry)\n            {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n            }\n            else\n            {\n                this.base(e);\n                return;\n            }\n        },\n\n        beforeRenderControl: function(model, callback)\n        {\n            this.field.css(\"position\", \"relative\");\n\n            callback();\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#afterRenderControl\n         */\n        afterRenderControl: function(model, callback) {\n\n            var self = this;\n\n            this.base(model, function() {\n\n                if (self.view.type !== \"display\")\n                {\n                    if ($.fn.datetimepicker)\n                    {\n                        self.getControlEl().datetimepicker(self.options.picker);\n\n                        self.picker = self.getControlEl().data(\"DateTimePicker\");\n                        if (self.picker && self.options.dateFormat)\n                        {\n                            self.picker.format(self.options.dateFormat);\n                        }\n                        if (self.picker)\n                        {\n                            self.options.dateFormat = self.picker.format();\n                        }\n\n                        // with date-time picker, trigger change using plugin\n                        self.getFieldEl().on(\"dp.change\", function(e) {\n\n                            // we use a timeout here because we want this to run AFTER control click handlers\n                            setTimeout(function() {\n                                self.onChange.call(self, e);\n                                self.triggerWithPropagation(\"change\", e);\n                            }, 250);\n\n                        });\n\n                        // set value if provided\n                        if (self.data) {\n                            self.picker.date(self.data);\n                        }\n                    }\n                }\n\n                callback();\n\n            });\n        },\n\n        /**\n         * Allows manual entry mode to be toggled on and off.\n         *\n         * @param manualEntry\n         */\n        setManualEntry: function(manualEntry)\n        {\n            this.options.manualEntry = manualEntry;\n        },\n\n        /**\n         * Returns field value as a JavaScript Date.\n         *\n         * @returns {Date} Field value.\n         */\n        getDate: function()\n        {\n            var self = this;\n\n            var date = null;\n            try\n            {\n                if (self.picker)\n                {\n                    date = (self.picker.date() ? self.picker.date()._d: null);\n                }\n                else\n                {\n                    date = new Date(this.getValue());\n                }\n            }\n            catch (e)\n            {\n                console.error(e);\n            }\n\n            return date;\n        },\n\n        /**\n         * Returns field value as a JavaScript Date.\n         *\n         * @returns {Date} Field value.\n         */\n        date: function()\n        {\n            return this.getDate();\n        },\n\n        /**\n         * @see Alpaca.Field#onChange\n         */\n        onChange: function(e)\n        {\n            this.base();\n\n            this.refreshValidationState();\n        },\n\n        isAutoFocusable: function()\n        {\n            return false;\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var status = this._validateDateFormat();\n            valInfo[\"invalidDate\"] = {\n                \"message\": status ? \"\" : Alpaca.substituteTokens(this.getMessage(\"invalidDate\"), [this.options.dateFormat]),\n                \"status\": status\n            };\n\n            return baseStatus && valInfo[\"invalidDate\"][\"status\"];\n        },\n\n        /**\n         * Validates date format.\n         *\n         * @returns {Boolean} True if it is a valid date, false otherwise.\n         */\n        _validateDateFormat: function()\n        {\n            var self = this;\n\n            var isValid = true;\n\n            if (self.options.dateFormat)\n            {\n                var value = self.getValue();\n                if (value || self.isRequired())\n                {\n                    // collect all formats\n                    var dateFormats = [];\n                    dateFormats.push(self.options.dateFormat);\n                    if (self.options.picker && self.options.picker.extraFormats)\n                    {\n                        for (var i = 0; i < self.options.picker.extraFormats.length; i++)\n                        {\n                            dateFormats.push(self.options.picker.extraFormats[i]);\n                        }\n                    }\n\n                    for (var i = 0; i < dateFormats.length; i++)\n                    {\n                        isValid = isValid || Alpaca.moment(value, self.options.dateFormat, true).isValid();\n                    }\n                }\n            }\n\n            return isValid;\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setValue\n         */\n        setValue: function(value)\n        {\n            var self = this;\n\n            this.base(value);\n\n            if (this.picker)\n            {\n                if (Alpaca.moment(value, self.options.dateFormat, true).isValid())\n                {\n                    this.picker.date(value);\n                }\n            }\n        },\n\n        destroy: function()\n        {\n            this.base();\n\n            this.picker = null;\n        }\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Date Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Date Field\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"format\": {\n                        \"title\": \"Format\",\n                        \"description\": \"Property data format\",\n                        \"type\": \"string\",\n                        \"default\":\"date\",\n                        \"enum\" : [\"date\"],\n                        \"readonly\":true\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForSchema\n         */\n        getOptionsForSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"format\": {\n                        \"type\": \"text\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"dateFormat\": {\n                        \"title\": \"Date Format\",\n                        \"description\": \"Date format (using moment.js format)\",\n                        \"type\": \"string\"\n                    },\n                    \"picker\": {\n                        \"title\": \"DatetimePicker options\",\n                        \"description\": \"Options that are supported by the <a href='http://eonasdan.github.io/bootstrap-datetimepicker/'>Bootstrap DateTime Picker</a>.\",\n                        \"type\": \"any\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"dateFormat\": {\n                        \"type\": \"text\"\n                    },\n                    \"picker\": {\n                        \"type\": \"any\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerMessages({\n        \"invalidDate\": \"Invalid date for format {0}\"\n    });\n    Alpaca.registerFieldClass(\"date\", Alpaca.Fields.DateField);\n    Alpaca.registerDefaultFormatFieldMapping(\"date\", \"date\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.DatetimeField = Alpaca.Fields.DateField.extend(\n        /**\n         * @lends Alpaca.Fields.DatetimeField.prototype\n         */\n        {\n            /**\n             * @see Alpaca.Fields.TextField#getFieldType\n             */\n            getFieldType: function() {\n                return \"datetime\";\n            },\n\n            getDefaultFormat: function() {\n                return \"MM/DD/YYYY HH:mm:ss\";\n            },\n\n            getDefaultExtraFormats: function() {\n                return [\n                    \"MM/DD/YYYY hh:mm:ss a\",\n                    \"MM/DD/YYYY HH:mm\",\n                    \"MM/DD/YYYY\"\n                ];\n            },\n\n            /**\n             * @see Alpaca.Fields.TextField#setup\n             */\n            setup: function()\n            {\n                var self = this;\n\n                // default html5 input type = \"datetime\";\n                //this.inputType = \"datetime\";\n\n                this.base();\n            }\n\n            /* builder_helpers */\n            ,\n\n            /**\n             * @see Alpaca.Fields.TextField#getTitle\n             */\n            getTitle: function() {\n                return \"Datetime Field\";\n            },\n\n            /**\n             * @see Alpaca.Fields.TextField#getDescription\n             */\n            getDescription: function() {\n                return \"Datetime Field based on <a href='http://eonasdan.github.io/bootstrap-datetimepicker/'>Bootstrap DateTime Picker</a>.\";\n            }\n\n            /* end_builder_helpers */\n        });\n\n    Alpaca.registerFieldClass(\"datetime\", Alpaca.Fields.DatetimeField);\n\n    // \"datetime\" is legacy (pre v4 schema)\n    Alpaca.registerDefaultFormatFieldMapping(\"datetime\", \"datetime\");\n\n    // official v4 uses date-time\n    Alpaca.registerDefaultFormatFieldMapping(\"date-time\", \"datetime\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.EditorField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.EditorField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"editor\";\n        },\n\n        setup: function()\n        {\n            var self = this;\n\n            this.base();\n\n            if (!self.options.aceTheme)\n            {\n                self.options.aceTheme = \"ace/theme/chrome\";\n            }\n\n            if (!self.options.aceMode)\n            {\n                self.options.aceMode = \"ace/mode/json\";\n            }\n\n            if (typeof(self.options.beautify) == \"undefined\")\n            {\n                self.options.beautify = true;\n            }\n\n            if (self.options.beautify && this.data)\n            {\n                if (self.options.aceMode === \"ace/mode/json\")\n                {\n                    if (Alpaca.isObject(this.data))\n                    {\n                        // convert to string to format it\n                        this.data = JSON.stringify(this.data, null, \"    \");\n                    }\n                    else if (Alpaca.isString(this.data))\n                    {\n                        // convert to object and then back to string to format it\n                        this.data = JSON.stringify(JSON.parse(this.data), null, \"    \");\n                    }\n                }\n\n                if (self.options.aceMode === \"ace/mode/html\")\n                {\n                    if (typeof(html_beautify) !== \"undefined\")\n                    {\n                        this.data = html_beautify(this.data);\n                    }\n                }\n\n                if (self.options.aceMode === \"ace/mode/css\")\n                {\n                    if (typeof(css_beautify) !== \"undefined\")\n                    {\n                        this.data = css_beautify(this.data);\n                    }\n                }\n\n                if (self.options.aceMode === \"ace/mode/javascript\")\n                {\n                    if (typeof(js_beautify) !== \"undefined\")\n                    {\n                        this.data = js_beautify(this.data);\n                    }\n                }\n            }\n\n            if (self.options.aceMode === \"ace/mode/json\")\n            {\n                if (!this.data || this.data === \"{}\")\n                {\n                    this.data = \"{\\n\\t\\n}\";\n                }\n            }\n\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#postRender\n         */\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                if (self.control)\n                {\n                    // ACE HEIGHT\n                    var aceHeight = self.options.aceHeight;\n                    if (aceHeight)\n                    {\n                        $(self.control).css(\"height\", aceHeight);\n                    }\n\n                    // ACE WIDTH\n                    var aceWidth = self.options.aceWidth;\n                    if (!aceWidth) {\n                        aceWidth = \"100%\";\n                    }\n                    $(self.control).css(\"width\", aceWidth);\n                }\n\n                // locate where we will insert the editor\n                var el = $(self.control)[0];\n\n                // ace must be included ahead of time\n                if (!ace && window.ace) {\n                    ace = window.ace;\n                }\n\n                if (!ace)\n                {\n                    Alpaca.logError(\"Editor Field is missing the 'ace' Cloud 9 Editor\");\n                }\n                else\n                {\n                    self.editor = ace.edit(el);\n                    self.editor.setOptions({\n                        maxLines: Infinity\n                    });\n\n                    self.editor.getSession().setUseWrapMode(true);\n\n                    // theme\n                    var aceTheme = self.options.aceTheme;\n                    self.editor.setTheme(aceTheme);\n\n                    // mode\n                    var aceMode = self.options.aceMode;\n                    self.editor.getSession().setMode(aceMode);\n\n                    self.editor.renderer.setHScrollBarAlwaysVisible(false);\n                    //this.editor.renderer.setVScrollBarAlwaysVisible(false); // not implemented\n                    self.editor.setShowPrintMargin(false);\n\n                    // set data onto editor\n                    self.editor.setValue(self.data);\n                    self.editor.clearSelection();\n\n                    // clear undo session\n                    self.editor.getSession().getUndoManager().reset();\n\n                    // FIT-CONTENT the height of the editor to the contents contained within\n                    if (self.options.aceFitContentHeight)\n                    {\n                        var heightUpdateFunction = function() {\n\n                            var first = false;\n                            if (self.editor.renderer.lineHeight === 0)\n                            {\n                                first = true;\n                                self.editor.renderer.lineHeight = 16;\n                            }\n\n                            // http://stackoverflow.com/questions/11584061/\n                            var newHeight = self.editor.getSession().getScreenLength() * self.editor.renderer.lineHeight + self.editor.renderer.scrollBar.getWidth();\n\n                            $(self.control).height(newHeight.toString() + \"px\");\n\n                            // This call is required for the editor to fix all of\n                            // its inner structure for adapting to a change in size\n                            self.editor.resize();\n\n                            if (first)\n                            {\n                                window.setTimeout(function() {\n                                    self.editor.clearSelection();\n                                }, 100);\n                            }\n                        };\n\n                        // Set initial size to match initial content\n                        heightUpdateFunction();\n\n                        // Whenever a change happens inside the ACE editor, update\n                        // the size again\n                        self.editor.getSession().on('change', heightUpdateFunction);\n                    }\n\n                    // READONLY\n                    if (self.schema.readonly)\n                    {\n                        self.editor.setReadOnly(true);\n                    }\n\n                    // if the editor's dom element gets destroyed, make sure we clean up the editor instance\n                    // normally, we expect Alpaca fields to be destroyed by the destroy() method but they may also be\n                    // cleaned-up via the DOM, thus we check here.\n                    $(el).bind('destroyed', function() {\n\n                        if (self.editor)\n                        {\n                            self.editor.destroy();\n                            self.editor = null;\n                        }\n\n                    });\n                }\n\n                callback();\n            });\n\n        },\n\n        /**\n         * @see Alpaca.Field#destroy\n         */\n        destroy: function()\n        {\n            // destroy the editor instance\n            if (this.editor)\n            {\n                this.editor.destroy();\n                this.editor = null;\n            }\n\n            // call up to base method\n            this.base();\n        },\n\n        /**\n         * @return the ACE editor instance\n         */\n        getEditor: function()\n        {\n            return this.editor;\n        },\n\n        /**\n         * @see Alpaca.ControlField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var wordCountStatus =  this._validateWordCount();\n            valInfo[\"wordLimitExceeded\"] = {\n                \"message\": wordCountStatus ? \"\" : Alpaca.substituteTokens(this.getMessage(\"wordLimitExceeded\"), [this.options.wordlimit]),\n                \"status\": wordCountStatus\n            };\n\n            var editorAnnotationsStatus = this._validateEditorAnnotations();\n            valInfo[\"editorAnnotationsExist\"] = {\n                \"message\": editorAnnotationsStatus ? \"\" : this.getMessage(\"editorAnnotationsExist\"),\n                \"status\": editorAnnotationsStatus\n            };\n\n            return baseStatus && valInfo[\"wordLimitExceeded\"][\"status\"] && valInfo[\"editorAnnotationsExist\"][\"status\"];\n        },\n\n        _validateEditorAnnotations: function()\n        {\n            if (this.editor)\n            {\n                var annotations = this.editor.getSession().getAnnotations();\n                if (annotations && annotations.length > 0)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validate for word limit.\n         *\n         * @returns {Boolean} True if the number of words is equal to or less than the word limit.\n         */\n        _validateWordCount: function()\n        {\n            if (this.options.wordlimit && this.options.wordlimit > -1)\n            {\n                var val = this.editor.getValue();\n\n                if (val)\n                {\n                    var wordcount = val.split(\" \").length;\n                    if (wordcount > this.options.wordlimit)\n                    {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Force editor to resize to ensure it gets drawn correctly.\n         * @override\n         */\n        onDependentReveal: function()\n        {\n            if (this.editor)\n            {\n                this.editor.resize();\n            }\n        },\n\n        /**\n         *@see Alpaca.Fields.TextField#setValue\n         */\n        setValue: function(value)\n        {\n            var self = this;\n\n            if (this.editor)\n            {\n                if (self.schema.type == \"object\" && Alpaca.isObject(value))\n                {\n                    // format\n                    value = JSON.stringify(value, null, \"    \");\n                }\n\n                this.editor.setValue(value);\n                self.editor.clearSelection();\n            }\n\n            // be sure to call into base method\n            this.base(value);\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            var value = null;\n\n            if (this.editor)\n            {\n                value = this.editor.getValue();\n            }\n\n            // if expected type back is \"object\", we do the conversion\n            if (this.schema.type == \"object\")\n            {\n                if (!value)\n                {\n                    value = {};\n                }\n                else\n                {\n                    value = JSON.parse(value);\n                }\n            }\n\n            return value;\n        }\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Editor\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Editor\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"aceTheme\": {\n                        \"title\": \"ACE Editor Theme\",\n                        \"description\": \"Specifies the theme to set onto the editor instance\",\n                        \"type\": \"string\",\n                        \"default\": \"ace/theme/twilight\"\n                    },\n                    \"aceMode\": {\n                        \"title\": \"ACE Editor Mode\",\n                        \"description\": \"Specifies the mode to set onto the editor instance\",\n                        \"type\": \"string\",\n                        \"default\": \"ace/mode/javascript\"\n                    },\n                    \"aceWidth\": {\n                        \"title\": \"ACE Editor Height\",\n                        \"description\": \"Specifies the width of the wrapping div around the editor\",\n                        \"type\": \"string\",\n                        \"default\": \"100%\"\n                    },\n                    \"aceHeight\": {\n                        \"title\": \"ACE Editor Height\",\n                        \"description\": \"Specifies the height of the wrapping div around the editor\",\n                        \"type\": \"string\",\n                        \"default\": \"300px\"\n                    },\n                    \"aceFitContentHeight\": {\n                        \"title\": \"ACE Fit Content Height\",\n                        \"description\": \"Configures the ACE Editor to auto-fit its height to the contents of the editor\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"wordlimit\": {\n                        \"title\": \"Word Limit\",\n                        \"description\": \"Limits the number of words allowed in the text area.\",\n                        \"type\": \"number\",\n                        \"default\": -1\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"aceTheme\": {\n                        \"type\": \"text\"\n                    },\n                    \"aceMode\": {\n                        \"type\": \"text\"\n                    },\n                    \"wordlimit\": {\n                        \"type\": \"integer\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n\n    });\n\n    Alpaca.registerMessages({\n        \"wordLimitExceeded\": \"The maximum word limit of {0} has been exceeded.\",\n        \"editorAnnotationsExist\": \"The editor has errors in it that must be corrected\"\n    });\n\n    Alpaca.registerFieldClass(\"editor\", Alpaca.Fields.EditorField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.EmailField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.EmailField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"email\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            // default html5 input type = \"email\";\n            this.inputType = \"email\";\n\n            this.base();\n\n            if (!this.schema.pattern)\n            {\n                this.schema.pattern = Alpaca.regexps.email;\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            if (!valInfo[\"invalidPattern\"][\"status\"]) {\n                valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidEmail\");\n            }\n\n            return baseStatus;\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Email Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Email Field.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            var pattern = (this.schema && this.schema.pattern) ? this.schema.pattern : Alpaca.regexps.email;\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"pattern\": {\n                        \"title\": \"Pattern\",\n                        \"description\": \"Field Pattern in Regular Expression\",\n                        \"type\": \"string\",\n                        \"default\": pattern,\n                        \"enum\":[pattern],\n                        \"readonly\": true\n                    },\n                    \"format\": {\n                        \"title\": \"Format\",\n                        \"description\": \"Property data format\",\n                        \"type\": \"string\",\n                        \"default\":\"email\",\n                        \"enum\":[\"email\"],\n                        \"readonly\":true\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForSchema\n         */\n        getOptionsForSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"format\": {\n                        \"type\": \"text\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerMessages({\n        \"invalidEmail\": \"Invalid Email address e.g. info@cloudcms.com\"\n    });\n    Alpaca.registerFieldClass(\"email\", Alpaca.Fields.EmailField);\n    Alpaca.registerDefaultFormatFieldMapping(\"email\", \"email\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.GridField = Alpaca.Fields.ArrayField.extend(\n    /**\n     * @lends Alpaca.Fields.GridField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.ControlField#getFieldType\n         */\n        getFieldType: function() {\n            return \"grid\";\n        },\n\n        setup: function()\n        {\n            this.base();\n\n            if (typeof(this.options.grid) == \"undefined\")\n            {\n                this.options.grid = {};\n            }\n        },\n\n        afterRenderContainer: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                // convert the data array into the grid's expected format\n                var gridData = [];\n\n                // add in headers\n                var headers = [];\n                for (var key in self.options.fields)\n                {\n                    var fieldDefinition = self.options.fields[key];\n\n                    var label = key;\n                    if (fieldDefinition.label)\n                    {\n                        label = fieldDefinition.label;\n                    }\n\n                    headers.push(label);\n                }\n                gridData.push(headers);\n\n                for (var i = 0; i < self.data.length; i++)\n                {\n                    var row = [];\n                    for (var key2 in self.data[i])\n                    {\n                        row.push(self.data[i][key2]);\n                    }\n                    gridData.push(row);\n                }\n\n                /*\n                // TODO\n                var gridData = [\n                    [\"Maserati\", \"Mazda\", \"Mercedes\", \"Mini\", \"Mitsubishi\"],\n                    [\"2009\", 0, 2941, 4303, 354, 5814],\n                    [\"2010\", 5, 2905, 2867, 412, 5284],\n                    [\"2011\", 4, 2517, 4822, 552, 6127],\n                    [\"2012\", 2, 2422, 5399, 776, 4151]\n                ];\n                */\n\n                var holder = $(self.container).find(\".alpaca-container-grid-holder\");\n\n                var gridConfig = self.options.grid;\n                gridConfig.data = gridData;\n\n                $(holder).handsontable(gridConfig);\n\n                callback();\n            });\n        },\n\n        /**\n         * @see Alpaca.ControlField#getType\n         */\n        getType: function() {\n            return \"array\";\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.ControlField#getTitle\n         */\n        getTitle: function() {\n            return \"Grid Field\";\n        },\n\n        /**\n         * @see Alpaca.ControlField#getDescription\n         */\n        getDescription: function() {\n            return \"Renders array items into a grid\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"grid\", Alpaca.Fields.GridField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.ImageField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.ImageField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"image\";\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Image Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Image Field.\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"image\", Alpaca.Fields.ImageField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.IntegerField = Alpaca.Fields.NumberField.extend(\n    /**\n     * @lends Alpaca.Fields.IntegerField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.NumberField#getFieldType\n         */\n        getFieldType: function() {\n            return \"integer\";\n        },\n\n        /**\n         * @see Alpaca.Fields.NumberField#getValue\n         */\n        getControlValue: function()\n        {\n            var val = this.base();\n\n            if (typeof(val) == \"undefined\" || \"\" == val)\n            {\n                return val;\n            }\n\n            return parseInt(val, 10);\n        },\n\n        /**\n         * @see Alpaca.Field#onChange\n         */\n        onChange: function(e)\n        {\n            this.base();\n\n            if (this.slider)\n            {\n                this.slider.slider(\"value\", this.getValue());\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.NumberField#postRender\n         */\n        postRender: function(callback)\n        {\n            var self = this;\n\n            this.base(function() {\n\n                if (self.options.slider)\n                {\n                    if (!Alpaca.isEmpty(self.schema.maximum) && !Alpaca.isEmpty(self.schema.minimum))\n                    {\n                        if (self.control)\n                        {\n                            self.control.after('<div id=\"slider\"></div>');\n\n                            self.slider = $('#slider', self.control.parent()).slider({\n                                value: self.getValue(),\n                                min: self.schema.minimum,\n                                max: self.schema.maximum,\n                                slide: function(event, ui) {\n                                    self.setValue(ui.value);\n                                    self.refreshValidationState();\n                                }\n                            });\n                        }\n                    }\n                }\n\n                callback();\n            });\n        },\n\n        /**\n         * @see Alpaca.Fields.NumberField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var status = this._validateInteger();\n            valInfo[\"stringNotANumber\"] = {\n                \"message\": status ? \"\" : this.getMessage(\"stringNotAnInteger\"),\n                \"status\": status\n            };\n\n            return baseStatus;\n        },\n\n        /**\n         * Validates if it is an integer.\n         *\n         * @returns {Boolean} true if it is an integer\n         */\n        _validateInteger: function()\n        {\n            // get value as text\n            var textValue = this._getControlVal();\n            if (typeof(textValue) === \"number\")\n            {\n                textValue = \"\" + textValue;\n            }\n\n            // allow empty\n            if (Alpaca.isValEmpty(textValue)) {\n                return true;\n            }\n\n            // check if valid integer format\n            var validNumber = Alpaca.testRegex(Alpaca.regexps.integer, textValue);\n            if (!validNumber)\n            {\n                return false;\n            }\n\n            // quick check to see if what they entered was a number\n            var floatValue = this.getValue();\n            if (isNaN(floatValue)) {\n                return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * @see Alpaca.Fields.NumberField#getType\n         */\n        getType: function() {\n            return \"integer\";\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.NumberField#getTitle\n         */\n        getTitle: function() {\n            return \"Integer Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.NumberField#getDescription\n         */\n        getDescription: function() {\n            return \"Field for integers.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.NumberField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"minimum\": {\n                        \"title\": \"Minimum\",\n                        \"description\": \"Minimum value of the property.\",\n                        \"type\": \"integer\"\n                    },\n                    \"maximum\": {\n                        \"title\": \"Maximum\",\n                        \"description\": \"Maximum value of the property.\",\n                        \"type\": \"integer\"\n                    },\n                    \"divisibleBy\": {\n                        \"title\": \"Divisible By\",\n                        \"description\": \"Property value must be divisible by this number.\",\n                        \"type\": \"integer\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.NumberField#getOptionsForSchema\n         */\n        getOptionsForSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"minimum\": {\n                        \"helper\": \"Minimum value of the field.\",\n                        \"type\": \"integer\"\n                    },\n                    \"maximum\": {\n                        \"helper\": \"Maximum value of the field.\",\n                        \"type\": \"integer\"\n                    },\n                    \"divisibleBy\": {\n                        \"helper\": \"Property value must be divisible by this number.\",\n                        \"type\": \"integer\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.NumberField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"slider\": {\n                        \"title\": \"Slider\",\n                        \"description\": \"Generate jQuery UI slider control with the field if true.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.NumberField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"slider\": {\n                        \"rightLabel\": \"Slider control ?\",\n                        \"helper\": \"Generate slider control if selected.\",\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    // Additional Registrations\n    Alpaca.registerMessages({\n        \"stringNotAnInteger\": \"This value is not an integer.\"\n    });\n    Alpaca.registerFieldClass(\"integer\", Alpaca.Fields.IntegerField);\n    Alpaca.registerDefaultSchemaFieldMapping(\"integer\", \"integer\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.IPv4Field = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.IPv4Field.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"ipv4\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            this.base();\n\n            if (!this.schema.pattern)\n            {\n                this.schema.pattern = Alpaca.regexps.ipv4;\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            if (!valInfo[\"invalidPattern\"][\"status\"])\n            {\n                valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidIPv4\");\n            }\n\n            return baseStatus;\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"IP Address Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"IP Address Field.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            var pattern = (this.schema && this.schema.pattern)? this.schema.pattern : Alpaca.regexps.ipv4;\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"pattern\": {\n                        \"title\": \"Pattern\",\n                        \"description\": \"Field Pattern in Regular Expression\",\n                        \"type\": \"string\",\n                        \"default\": pattern,\n                        \"readonly\": true\n                    },\n                    \"format\": {\n                        \"title\": \"Format\",\n                        \"description\": \"Property data format\",\n                        \"type\": \"string\",\n                        \"enum\": [\"ip-address\"],\n                        \"default\":\"ip-address\",\n                        \"readonly\":true\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForSchema\n         */\n        getOptionsForSchema: function() {\n            return Alpaca.merge(this.base(),{\n                \"fields\": {\n                    \"format\": {\n                        \"type\": \"text\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerMessages({\n        \"invalidIPv4\": \"Invalid IPv4 address, e.g. 192.168.0.1\"\n    });\n    Alpaca.registerFieldClass(\"ipv4\", Alpaca.Fields.IPv4Field);\n    Alpaca.registerDefaultFormatFieldMapping(\"ip-address\", \"ipv4\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.JSONField = Alpaca.Fields.TextAreaField.extend(\n    /**\n     * @lends Alpaca.Fields.JSONField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextAreaField#getFieldType\n         */\n        getFieldType: function() {\n            return \"json\";\n        },\n\n        /**\n         * @see Alpaca.ContainerField#getValue\n         */\n        setValue: function(value)\n        {\n            if (Alpaca.isObject(value) || typeof(value) === \"object\")\n            {\n                value = JSON.stringify(value, null, 3);\n            }\n\n            this.base(value);\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            var val = this.base();\n\n            if (val && Alpaca.isString(val))\n            {\n                val = JSON.parse(val);\n            }\n\n            return val;\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var status = this._validateJSON();\n            valInfo[\"stringNotAJSON\"] = {\n                \"message\": status.status ? \"\" : this.getMessage(\"stringNotAJSON\") +\" \"+ status.message,\n                \"status\": status.status\n            };\n\n            return baseStatus && valInfo[\"stringNotAJSON\"][\"status\"] ;\n        },\n\n        /**\n         * Validates if it is a valid JSON object.\n         * @returns {Boolean} true if it is a valid JSON object\n         */\n        _validateJSON: function()\n        {\n            var textValue = this.control.val();\n\n            // allow null\n            if (Alpaca.isValEmpty(textValue))\n            {\n                return {\n                    \"status\" : true\n                };\n            }\n\n            // parse the string\n            try\n            {\n                var obj = JSON.parse(textValue);\n\n                // format the string as well\n                this.setValue(JSON.stringify(obj, null, 3));\n                return {\n                    \"status\" : true\n                };\n            }\n            catch(e)\n            {\n                return {\n                    \"status\" : false,\n                    \"message\" : e.message\n                };\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#postRender\n         */\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                if (self.control)\n                {\n                    // Some auto-formatting capabilities\n                    self.control.bind('keypress', function(e) {\n\n                        var code = e.keyCode || e.wich;\n\n                        if (code === 34) {\n                            self.control.insertAtCaret('\"');\n                        }\n                        if (code === 123) {\n                            self.control.insertAtCaret('}');\n                        }\n                        if (code === 91) {\n                            self.control.insertAtCaret(']');\n                        }\n                    });\n\n                    self.control.bind('keypress', 'Ctrl+l', function() {\n                        self.getFieldEl().removeClass(\"alpaca-field-focused\");\n\n                        // set class from state\n                        self.refreshValidationState();\n                    });\n\n                    self.control.attr('title','Type Ctrl+L to format and validate the JSON string.');\n                }\n\n                callback();\n\n            });\n\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#getTitle\n         */\n        getTitle: function() {\n            return \"JSON Editor\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#getDescription\n         */\n        getDescription: function() {\n            return \"Editor for JSON objects with basic validation and formatting.\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    // Additional Registrations\n    Alpaca.registerMessages({\n        \"stringNotAJSON\": \"This value is not a valid JSON string.\"\n    });\n\n    Alpaca.registerFieldClass(\"json\", Alpaca.Fields.JSONField);\n\n    $.fn.insertAtCaret = function (myValue) {\n\n        return this.each(function() {\n\n            //IE support\n            if (document.selection) {\n\n                this.focus();\n                sel = document.selection.createRange();\n                sel.text = myValue;\n                this.focus();\n\n            } else if (this.selectionStart || this.selectionStart == '0') { // jshint ignore:line\n\n                //MOZILLA / NETSCAPE support\n                var startPos = this.selectionStart;\n                var endPos = this.selectionEnd;\n                var scrollTop = this.scrollTop;\n                this.value = this.value.substring(0, startPos) + myValue + this.value.substring(endPos, this.value.length);\n                this.focus();\n                this.selectionStart = startPos /*+ myValue.length*/;\n                this.selectionEnd = startPos /*+ myValue.length*/;\n                this.scrollTop = scrollTop;\n\n            } else {\n\n                this.value += myValue;\n                this.focus();\n            }\n        });\n    };\n\n    /*\n     * jQuery Hotkeys Plugin\n     * Copyright 2010, John Resig\n     * Dual licensed under the MIT or GPL Version 2 licenses.\n     *\n     * Based upon the plugin by Tzury Bar Yochay:\n     * http://github.com/tzuryby/hotkeys\n     *\n     * Original idea by:\n     * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/\n    */\n    jQuery.hotkeys = {\n        version: \"0.8\",\n\n        specialKeys: {\n            8: \"backspace\", 9: \"tab\", 13: \"return\", 16: \"shift\", 17: \"ctrl\", 18: \"alt\", 19: \"pause\",\n            20: \"capslock\", 27: \"esc\", 32: \"space\", 33: \"pageup\", 34: \"pagedown\", 35: \"end\", 36: \"home\",\n            37: \"left\", 38: \"up\", 39: \"right\", 40: \"down\", 45: \"insert\", 46: \"del\",\n            96: \"0\", 97: \"1\", 98: \"2\", 99: \"3\", 100: \"4\", 101: \"5\", 102: \"6\", 103: \"7\",\n            104: \"8\", 105: \"9\", 106: \"*\", 107: \"+\", 109: \"-\", 110: \".\", 111 : \"/\",\n            112: \"f1\", 113: \"f2\", 114: \"f3\", 115: \"f4\", 116: \"f5\", 117: \"f6\", 118: \"f7\", 119: \"f8\",\n            120: \"f9\", 121: \"f10\", 122: \"f11\", 123: \"f12\", 144: \"numlock\", 145: \"scroll\", 191: \"/\", 224: \"meta\"\n        },\n\n        shiftNums: {\n            \"`\": \"~\", \"1\": \"!\", \"2\": \"@\", \"3\": \"#\", \"4\": \"$\", \"5\": \"%\", \"6\": \"^\", \"7\": \"&\",\n            \"8\": \"*\", \"9\": \"(\", \"0\": \")\", \"-\": \"_\", \"=\": \"+\", \";\": \": \", \"'\": \"\\\"\", \",\": \"<\",\n            \".\": \">\",  \"/\": \"?\",  \"\\\\\": \"|\"\n        }\n    };\n\n    function keyHandler( handleObj ) {\n        // Only care when a possible input has been specified\n        if ( typeof handleObj.data !== \"string\" ) {\n            return;\n        }\n\n        var origHandler = handleObj.handler,\n            keys = handleObj.data.toLowerCase().split(\" \");\n\n        handleObj.handler = function( event ) {\n            // Don't fire in text-accepting inputs that we didn't directly bind to\n            if ( this !== event.target && (/textarea|select/i.test( event.target.nodeName ) ||\n                 event.target.type === \"text\") ) {\n                return;\n            }\n\n            // Keypress represents characters, not special keys\n            var special = event.type !== \"keypress\" && jQuery.hotkeys.specialKeys[ event.which ],\n                character = String.fromCharCode( event.which ).toLowerCase(),\n                key, modif = \"\", possible = {};\n\n            // check combinations (alt|ctrl|shift+anything)\n            if ( event.altKey && special !== \"alt\" ) {\n                modif += \"alt+\";\n            }\n\n            if ( event.ctrlKey && special !== \"ctrl\" ) {\n                modif += \"ctrl+\";\n            }\n\n            // TODO: Need to make sure this works consistently across platforms\n            if ( event.metaKey && !event.ctrlKey && special !== \"meta\" ) {\n                modif += \"meta+\";\n            }\n\n            if ( event.shiftKey && special !== \"shift\" ) {\n                modif += \"shift+\";\n            }\n\n            if ( special ) {\n                possible[ modif + special ] = true;\n\n            } else {\n                possible[ modif + character ] = true;\n                possible[ modif + jQuery.hotkeys.shiftNums[ character ] ] = true;\n\n                // \"$\" can be triggered as \"Shift+4\" or \"Shift+$\" or just \"$\"\n                if ( modif === \"shift+\" ) {\n                    possible[ jQuery.hotkeys.shiftNums[ character ] ] = true;\n                }\n            }\n\n            for ( var i = 0, l = keys.length; i < l; i++ ) {\n                if ( possible[ keys[i] ] ) {\n                    return origHandler.apply( this, arguments );\n                }\n            }\n        };\n    }\n\n    jQuery.each([ \"keydown\", \"keyup\", \"keypress\" ], function() {\n        jQuery.event.special[ this ] = { add: keyHandler };\n    });\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.LowerCaseField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.LowerCaseField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"lowercase\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.base();\n\n            if (this.data) {\n                this.data = this.data.toLowerCase();\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setValue\n         */\n        setValue: function(val)\n        {\n            if (!val)\n            {\n                return this.base(val);\n            }\n\n            var lowerValue = val.toLowerCase();\n\n            if (lowerValue != this.getValue()) // jshint ignore:line\n            {\n                this.base(lowerValue);\n            }\n        },\n\n        /**\n         * @see Alpaca.ControlField#onKeyPress\n         */\n        onKeyPress: function(e)\n        {\n            this.base(e);\n\n            var _this = this;\n\n            Alpaca.later(25, this, function() {\n                var v = _this.getValue();\n                _this.setValue(v);\n            });\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Lowercase Text\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Text field for lowercase text.\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"lowercase\", Alpaca.Fields.LowerCaseField);\n    Alpaca.registerDefaultFormatFieldMapping(\"lowercase\", \"lowercase\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.MapField = Alpaca.Fields.ArrayField.extend(\n    /**\n     * @lends Alpaca.Fields.MapField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextAreaField#getFieldType\n         */\n        getFieldType: function() {\n            return \"map\";\n        },\n\n        getType: function()\n        {\n            return \"object\"\n        },\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#setup\n         */\n        setup: function()\n        {\n            // special handling - data can come in as an object, we convert to array\n            if (this.data && Alpaca.isObject(this.data))\n            {\n                var newData = [];\n\n                $.each(this.data, function(key, value) {\n                    var newValue = Alpaca.copyOf(value);\n                    newValue[\"_key\"] = key;\n                    newData.push(newValue);\n                });\n\n                this.data = newData;\n            }\n\n            this.base();\n\n            Alpaca.mergeObject(this.options, {\n                \"forceRevalidation\" : true\n            });\n\n            if (Alpaca.isEmpty(this.data))\n            {\n                return;\n            }\n        },\n\n        /**\n         * @see Alpaca.ContainerField#getContainerValue\n         */\n        getContainerValue: function()\n        {\n            // if we don't have any children and we're not required, hand back undefined\n            if (this.children.length === 0 && !this.isRequired())\n            {\n                return;\n            }\n\n            // special handling, convert back to object\n            var o = {};\n            for (var i = 0; i < this.children.length; i++)\n            {\n                var v = this.children[i].getValue();\n                var key = v[\"_key\"];\n                if (key)\n                {\n                    delete v[\"_key\"];\n                    o[key] = v;\n                }\n            }\n\n            return o;\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            var isValidMapKeysNotEmpty = this._validateMapKeysNotEmpty();\n            valInfo[\"keyMissing\"] = {\n                \"message\": isValidMapKeysNotEmpty ? \"\" : this.getMessage(\"keyMissing\"),\n                \"status\": isValidMapKeysNotEmpty\n            };\n\n            var isValidMapKeysUnique = this._validateMapKeysUnique();\n            valInfo[\"keyNotUnique\"] = {\n                \"message\": isValidMapKeysUnique ? \"\" : this.getMessage(\"keyNotUnique\"),\n                \"status\": isValidMapKeysUnique\n            };\n\n            return baseStatus && valInfo[\"keyMissing\"][\"status\"] && valInfo[\"keyNotUnique\"][\"status\"];\n        },\n\n        /**\n         * Validates that key fields are not empty.\n         *\n         * @returns {Boolean} true if keys are not empty\n         */\n        _validateMapKeysNotEmpty: function()\n        {\n            var isValid = true;\n\n            for (var i = 0; i < this.children.length; i++)\n            {\n                var v = this.children[i].getValue();\n                var key = v[\"_key\"];\n\n                if (!key)\n                {\n                    isValid = false;\n                    break;\n                }\n            }\n\n            return isValid;\n        },\n\n        /**\n         * Validates if key fields are unique.\n         *\n         * @returns {Boolean} true if keys are unique\n         */\n        _validateMapKeysUnique: function()\n        {\n            var isValid = true;\n\n            var keys = {};\n            for (var i = 0; i < this.children.length; i++)\n            {\n                var v = this.children[i].getValue();\n                var key = v[\"_key\"];\n\n                if (keys[key])\n                {\n                    isValid = false;\n                }\n\n                keys[key] = key;\n            }\n\n            return isValid;\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#getTitle\n         */\n        getTitle: function() {\n            return \"Map Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#getDescription\n         */\n        getDescription: function() {\n            return \"Field for objects with key/value pairs that share the same schema for values.\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"map\", Alpaca.Fields.MapField);\n\n    // Additional Registrations\n    Alpaca.registerMessages({\n        \"keyNotUnique\": \"Keys of map field are not unique.\",\n        \"keyMissing\": \"Map contains an empty key.\"\n    });\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.OptionTreeField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.OptionTree.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.ObjectField#getFieldType\n         */\n        getFieldType: function() {\n            return \"optiontree\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.ObjectField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.base();\n\n            if (!this.options.tree)\n            {\n                this.options.tree = {};\n            }\n\n            if (!this.options.tree.selectors)\n            {\n                this.options.tree.selectors = {};\n            }\n\n            if (!this.options.tree.order)\n            {\n                this.options.tree.order = [];\n            }\n\n            // ensure all options have schema\n            for (var k in this.options.tree.selectors)\n            {\n                if (!this.options.tree.selectors[k].schema) {\n                    Alpaca.logError(\"OptionTree selector for: \" + k + \" is missing schema\");\n                    return;\n                }\n\n                if (!this.options.tree.selectors[k].options) {\n                    this.options.tree.selectors[k].options = {};\n                }\n            }\n\n            if (!this.options.tree.data)\n            {\n                this.options.tree.data = [];\n            }\n\n            // walk data\n            for (var i = 0; i < this.options.tree.data.length; i++)\n            {\n                var item = this.options.tree.data[i];\n\n                if (item.attributes)\n                {\n                    for (var k in item.attributes)\n                    {\n                        if (!this.options.tree.selectors[k])\n                        {\n                            this.options.tree.selectors[k] = {};\n                        }\n\n                        if (!this.options.tree.selectors[k].label)\n                        {\n                            this.options.tree.selectors[k].options.noneLabel = \"Choose...\";\n                        }\n\n                        if (!this.options.tree.selectors[k].type)\n                        {\n                            this.options.tree.selectors[k].options.type = \"select\";\n                        }\n                    }\n                }\n            }\n\n            // assume the order from the options if not otherwise provided\n            if (!self.options.tree.order)\n            {\n                self.options.tree.order = [];\n\n                for (var k in self.options.tree.selectors)\n                {\n                    self.options.tree.order.push(self.options.tree.selectors[k]);\n                }\n            }\n\n            if (typeof(self.options.tree.horizontal) === \"undefined\")\n            {\n                self.options.tree.horizontal = true;\n            }\n\n            // create a lookup list for option list key/value based on location\n            this.locationValueLists = {};\n            this.locationValues = {};\n\n            for (var i = 0; i < self.options.tree.data.length; i++)\n            {\n                if (self.options.tree.data[i].attributes)\n                {\n                    var location = \"root\";\n\n                    for (var k in self.options.tree.data[i].attributes)\n                    {\n                        var v = self.options.tree.data[i].attributes[k];\n\n                        var array = this.locationValueLists[location];\n                        if (!array) {\n                            array = [];\n                            this.locationValueLists[location] = array;\n                        }\n\n                        var exists = false;\n                        for (var x = 0; x < array.length; x++)\n                        {\n                            if (array[x].value === v) {\n                                exists = true;\n                                break;\n                            }\n                        }\n\n                        if (!exists)\n                        {\n                            array.push({\n                                \"text\": v,\n                                \"value\": v\n                            });\n                        }\n\n                        if (location.length > 0) {\n                            location += \"~\";\n                        }\n\n                        location += k + \"=\" + v;\n                    }\n\n                    this.locationValues[location] = self.options.tree.data[i].value;\n                }\n            }\n\n            this.currentAttributes = {};\n            this.controls = {};\n        },\n\n        toLocation: function(attrs)\n        {\n            var location = \"root\";\n\n            for (var k in attrs)\n            {\n                var v = attrs[k];\n\n                if (location.length > 0) {\n                    location += \"~\";\n                }\n\n                location += k + \"=\" + v;\n            }\n\n            return location;\n        },\n\n        existsLocationWithPrefix: function(prefix)\n        {\n            var match = false;\n\n            for (var k in this.locationValueLists)\n            {\n                if (k.indexOf(prefix) > -1)\n                {\n                    match = true;\n                    break;\n                }\n            }\n\n            return match;\n        },\n\n        /**\n         * @see Alpaca.Field#afterRenderControl\n         */\n        afterRenderControl: function(model, callback) {\n\n            var self = this;\n\n            self.optionTreeHolder = $(self.field).find(\".optiontree\");\n\n            if (self.options.tree.horizontal)\n            {\n                $(self.field).addClass(\"optiontree-horizontal\");\n            }\n\n            this.base(model, function() {\n\n                self.refreshOptionTreeControls(function() {\n                    callback();\n                });\n\n            });\n        },\n\n        refreshOptionTreeControls: function(callback)\n        {\n            var self = this;\n\n            // hide all of the controls\n            for (var k in self.controls)\n            {\n                self.controls[k].hide();\n            }\n\n            // find the index of the last option for which we are missing a value\n            var displayUpToIndex = 0;\n            for (var i = 0; i < self.options.tree.order.length; i++)\n            {\n                var selectorId = self.options.tree.order[i];\n\n                if (typeof(self.currentAttributes[selectorId]) !== \"undefined\" && self.currentAttributes[selectorId] !== null  && self.currentAttributes[selectorId] !== \"\")\n                {\n                    displayUpToIndex++;\n                }\n            }\n\n            // walk through order and construct render functions\n            var location = \"root\";\n            var fns = [];\n            var displayCount = 0;\n            var i = 0;\n            do\n            {\n                if (i < self.options.tree.order.length)\n                {\n                    var selectorId = self.options.tree.order[i];\n\n                    var hasMatches = (i == self.options.tree.order.length - 1) || (self.existsLocationWithPrefix(location + \"~\" + selectorId + \"=\"));\n                    if (hasMatches)\n                    {\n                        if (displayCount <= displayUpToIndex)\n                        {\n                            if (self.controls[selectorId])\n                            {\n                                // show this one\n                                self.controls[selectorId].show();\n\n                                location += \"~\" + selectorId + \"=\" + self.currentAttributes[selectorId];\n                            }\n                            else\n                            {\n                                var selector = self.options.tree.selectors[selectorId];\n                                var last = (i + 1 === self.options.tree.order.length);\n\n                                var fn = function(index, selectorId, selector, controls, optionTreeHolder, last) {\n                                    return function(done) {\n\n                                        var alpacaSchema = selector.schema;\n\n                                        var alpacaOptions = selector.options;\n                                        if (!alpacaOptions) {\n                                            alpacaOptions = {};\n                                        }\n                                        if (!alpacaOptions.type) {\n                                            alpacaOptions.type = \"select\";\n                                        }\n\n                                        if (alpacaOptions.type === \"select\") {\n\n                                            alpacaOptions.dataSource = function(callback) {\n\n                                                var currentLocation = self.toLocation(self.currentAttributes);\n                                                var currentValueList = self.locationValueLists[currentLocation];\n\n                                                callback(currentValueList);\n\n                                            };\n                                        }\n\n                                        // render via alpaca\n                                        var domEl = $(\"<div class='optiontree-selector'></div>\");\n\n                                        $(domEl).alpaca({\n                                            \"schema\": alpacaSchema,\n                                            \"options\": alpacaOptions,\n                                            \"postRender\": function(control) {\n\n                                                controls[selectorId] = control;\n\n                                                // append to the holder element\n                                                $(optionTreeHolder).append(domEl);\n\n                                                control.selectorId = selectorId;\n\n                                                // when the value of this control changes, we record it into our\n                                                // current attribute set\n                                                control.on(\"change\", function() {\n\n                                                    var selectorId = this.selectorId;\n\n                                                    // set our attribute value\n                                                    self.currentAttributes[selectorId] = this.getValue();\n\n                                                    // clear out everything past our index value\n                                                    for (var i = 0; i < self.options.tree.order.length; i++)\n                                                    {\n                                                        if (i > index)\n                                                        {\n                                                            var selectorId = self.options.tree.order[i];\n                                                            delete self.currentAttributes[selectorId];\n                                                            if (controls[selectorId])\n                                                            {\n                                                                controls[selectorId].destroy();\n                                                                delete controls[selectorId];\n                                                            }\n                                                        }\n                                                    }\n\n                                                    if (last)\n                                                    {\n                                                        // find the match\n                                                        var val = null;\n\n                                                        for (var i = 0; i < self.options.tree.data.length; i++)\n                                                        {\n                                                            var match = true;\n\n                                                            var attrs = self.options.tree.data[i].attributes;\n                                                            for (var k in self.currentAttributes)\n                                                            {\n                                                                if (attrs[k] !== self.currentAttributes[k])\n                                                                {\n                                                                    match = false;\n                                                                    break;\n                                                                }\n                                                            }\n\n                                                            if (match)\n                                                            {\n                                                                val = self.options.tree.data[i].value;\n                                                            }\n                                                        }\n\n                                                        if (val)\n                                                        {\n                                                            self.setValue(val);\n                                                        }\n                                                    }\n\n                                                    self.refreshOptionTreeControls();\n                                                });\n\n                                                // show by default\n                                                control.show();\n\n                                                done();\n                                            }\n                                        });\n                                    }\n                                }(i, selectorId, selector, self.controls, self.optionTreeHolder, last);\n\n                                fns.push(fn);\n\n                                location += \"~\" + selectorId + \"=\" + self.currentAttributes[selectorId];\n                            }\n\n                            displayCount++;\n                        }\n                        else\n                        {\n                            if (self.controls[selectorId])\n                            {\n                                self.controls[selectorId].destroy();\n                                delete self.controls[selectorId];\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (self.controls[selectorId])\n                        {\n                            self.controls[selectorId].destroy();\n                            delete self.controls[selectorId];\n                        }\n                    }\n                }\n\n                i++;\n            }\n            while (i < self.options.tree.order.length);\n\n            Alpaca.series(fns, function() {\n\n                if (callback)\n                {\n                    callback();\n                }\n\n            });\n\n        },\n\n        /**\n         * @see Alpaca.Fields.ObjectField#getType\n         */\n        getType: function() {\n            return \"any\";\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.ObjectField#getTitle\n         */\n        getTitle: function() {\n            return \"Option Tree\";\n        },\n\n        /**\n         * @see Alpaca.Fields.ObjectField#getDescription\n         */\n        getDescription: function() {\n            return \"Option Tree\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.ObjectField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"tree\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"options\": {\n                                \"type\": \"object\"\n                            },\n                            \"order\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"data\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"value\": {\n                                            \"type\": \"any\"\n                                        },\n                                        \"attributes\": {\n                                            \"type\": \"object\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"horizontal\": {\n                                \"type\": \"boolean\"\n                            }\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.ObjectField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"optiontree\", Alpaca.Fields.OptionTreeField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.PasswordField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.PasswordField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"password\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            this.base();\n\n            if (!this.schema.pattern)\n            {\n                this.schema.pattern = Alpaca.regexps.password;\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            if (!valInfo[\"invalidPattern\"][\"status\"]) {\n                valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidPassword\");\n            }\n\n            return baseStatus;\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Password Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Password Field.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            var pattern = (this.schema && this.schema.pattern)? this.schema.pattern : /^[0-9a-zA-Z\\x20-\\x7E]*$/;\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"pattern\": {\n                        \"title\": \"Pattern\",\n                        \"description\": \"Field Pattern in Regular Expression\",\n                        \"type\": \"string\",\n                        \"default\": this.schema.pattern,\n                        \"enum\":[pattern],\n                        \"readonly\": true\n                    },\n\t\t\t\t\t\"format\": {\n                        \"title\": \"Format\",\n                        \"description\": \"Property data format\",\n                        \"type\": \"string\",\n\t\t\t\t\t\t\"default\":\"password\",\n                        \"enum\":[\"password\"],\n\t\t\t\t\t\t\"readonly\":true\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForSchema\n         */\n\t\tgetOptionsForSchema: function() {\n            return Alpaca.merge(this.base(),{\n\t\t\t\t\"fields\": {\n\t\t\t\t\t\"format\": {\n\t\t\t\t\t\t\"type\": \"text\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n        }\n\n\t\t/* end_builder_helpers */\n    });\n\n    Alpaca.registerMessages({\n        \"invalidPassword\": \"Invalid Password\"\n    });\n    Alpaca.registerFieldClass(\"password\", Alpaca.Fields.PasswordField);\n    Alpaca.registerDefaultFormatFieldMapping(\"password\", \"password\");\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.PersonalNameField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.PersonalNameField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"personalname\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setValue\n         */\n        setValue: function(val)\n        {\n            if (!val)\n            {\n                return this.base(val);\n            }\n\n            // convert to upper-case\n            var upperValue = \"\";\n\n            for (var i = 0; i < val.length; i++)\n            {\n                if (i === 0)\n                {\n                    upperValue += val.charAt(i).toUpperCase();\n                }\n                else if (val.charAt(i - 1) === ' ' || val.charAt(i - 1) === '-' || val.charAt(i - 1) === \"'\")\n                {\n                    upperValue += val.charAt(i).toUpperCase();\n                }\n                else\n                {\n                    upperValue += val.charAt(i);\n                }\n            }\n\n            if (upperValue != this.getValue()) // jshint ignore:line\n            {\n                this.base(upperValue);\n            }\n        },\n\n        /**\n         * @see Alpaca.ControlField#onKeyPress\n         */\n        onKeyPress: function(e)\n        {\n            this.base(e);\n\n            var _this = this;\n\n            Alpaca.later(25, this, function() {\n                var v = _this.getValue();\n                _this.setValue(v);\n            });\n\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Personal Name\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Text Field for personal name with captical letter for first letter & after hyphen, space or apostrophe.\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"personalname\", Alpaca.Fields.PersonalNameField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.PhoneField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.PhoneField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            // default html5 input type = \"tel\";\n            this.inputType = \"tel\";\n\n            this.base();\n\n            if (!this.schema.pattern) {\n                this.schema.pattern = Alpaca.regexps.phone;\n            }\n\n            if (Alpaca.isEmpty(this.options.maskString)) {\n                this.options.maskString = \"(999) 999-9999\";\n            }\n\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#postRender\n         */\n        postRender: function(callback) {\n\n            var self = this;\n\n            this.base(function() {\n\n                callback();\n\n            });\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function() {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            if (!valInfo[\"invalidPattern\"][\"status\"]) {\n                valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidPhone\");\n            }\n\n            return baseStatus;\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"phone\";\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Phone Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Phone Field.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfSchema\n         */\n        getSchemaOfSchema: function() {\n            var pattern = (this.schema && this.schema.pattern) ? this.schema.pattern : Alpaca.regexps.phone;\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"pattern\": {\n                        \"title\": \"Pattern\",\n                        \"description\": \"Field Pattern in Regular Expression\",\n                        \"type\": \"string\",\n                        \"default\": pattern,\n                        \"enum\":[pattern],\n                        \"readonly\": true\n                    },\n                    \"format\": {\n                        \"title\": \"Format\",\n                        \"description\": \"Property data format\",\n                        \"type\": \"string\",\n                        \"default\":\"phone\",\n                        \"enum\":[\"phone\"],\n                        \"readonly\":true\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForSchema\n         */\n        getOptionsForSchema: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"format\": {\n                        \"type\": \"text\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"maskString\": {\n                        \"title\": \"Field Mask String\",\n                        \"description\": \"Expression for field mask\",\n                        \"type\": \"string\",\n                        \"default\": \"(999) 999-9999\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerMessages({\n        \"invalidPhone\": \"Invalid Phone Number, e.g. (123) 456-9999\"\n    });\n    Alpaca.registerFieldClass(\"phone\", Alpaca.Fields.PhoneField);\n    Alpaca.registerDefaultFormatFieldMapping(\"phone\", \"phone\");\n\n})(jQuery);\n\n/**\n * Uses: https://github.com/billyaraujo/pick-a-color\n */\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.PickAColorField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.PickAColorField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.pickAColorFieldAvailable = false;\n            if (!self.isDisplayOnly() && typeof($.fn.pickAColor) !== \"undefined\")\n            {\n                this.pickAColorFieldAvailable = true;\n            }\n\n            // default html5 input type = \"color\";\n            if (typeof(this.options.pickacolor) === \"undefined\" && !self.pickAColorFieldAvailable)\n            {\n                this.inputType = \"color\";\n            }\n\n            this.base();\n\n            // set up default spectrum settings\n            if (typeof(this.options.pickacolor) === \"undefined\")\n            {\n                this.options.pickacolor = {\n                    showSpectrum          : true,\n                    showSavedColors       : true,\n                    saveColorsPerElement  : false,\n                    fadeMenuToggle        : true,\n                    showAdvanced          : true,\n                    showBasicColors       : true,\n                    showHexInput          : true,\n                    allowBlank            : true,\n                    inlineDropdown        : false\n                };\n            }\n\n            // if colors not specified, use default colors\n            if (typeof(this.options.colors) === \"undefined\")\n            {\n                this.options.colors = {\n                    white: \"#ffffff\",\n                    clouds: \"#ecf0f1\",\n                    red: \"#c0392b\",\n                    orange: \"#e67e22\",\n                    yellow: \"#f1c40f\",\n                    green: \"#27ae60\",\n                    blue: \"#2980b9\",\n                    purple: \"#8e44ad\",\n                    dark: \"#34495e\",\n                    black: \"#000000\",\n                    brown: \"#bb9977\"\n                };\n            }\n\n            if (this.options.pickacolor && typeof(this.options.pickacolor.basicColors) === \"undefined\")\n            {\n                this.options.pickacolor.basicColors = this.options.colors;\n            }\n\n            if (typeof(this.options.pickacolor.inlineDropdown) === \"undefined\")\n            {\n                this.options.pickacolor.inlineDropdown = false;\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"pickacolor\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getType\n         */\n        getType: function() {\n            return \"string\";\n        },\n\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                if (self.control)\n                {\n                    // if we can render the plugin...\n                    if (self.pickAColorFieldAvailable && self.options.pickacolor)\n                    {\n                        if (self.data) {\n                            $(self.control).attr(\"value\", self.data);\n                        }\n\n                        $(self.control).addClass(\"pick-a-color\");\n                        $(self.control).pickAColor(self.options.pickacolor);\n\n                        $(self.control).on(\"change\", function(e) {\n                            self.setValue($(this).val());\n                        });\n                    }\n                }\n\n                callback();\n            });\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Pick-A-Color Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"A color picker for selecting hexadecimal color values\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"pickacolor\", Alpaca.Fields.PickAColorField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.SearchField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.SearchField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            // default html5 input type = \"search\";\n            this.inputType = \"search\";\n\n            this.base();\n\n            this.options.attributes.results = 5;\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"search\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getType\n         */\n        getType: function() {\n            return \"string\";\n        },\n\n        /* builder_helpers */\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Search Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"A search box field\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"search\", Alpaca.Fields.SearchField);\n    Alpaca.registerDefaultSchemaFieldMapping(\"search\", \"search\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.usHoldings = {};\n\n    Alpaca.usHoldings.territories = {\n        \"American Samoa\"                 : \"AS\",\n        \"District Of Columbia\"           : \"DC\",\n        \"Federated States Of Micronesia\" : \"FM\",\n        \"Guam\"                           : \"GU\",\n        \"Marshall Islands\"               : \"MH\",\n        \"Northern Mariana Islands\"       : \"MP\",\n        \"Palau\"                          : \"PW\",\n        \"Puerto Rico\"                    : \"PR\",\n        \"Virgin Islands\"                 : \"VI\"\n    };\n\n    Alpaca.usHoldings.states =  {\n        \"Alabama\"                        : \"AL\",\n        \"Alaska\"                         : \"AK\",\n        \"Arizona\"                        : \"AZ\",\n        \"Arkansas\"                       : \"AR\",\n        \"California\"                     : \"CA\",\n        \"Colorado\"                       : \"CO\",\n        \"Connecticut\"                    : \"CT\",\n        \"Delaware\"                       : \"DE\",\n        \"Florida\"                        : \"FL\",\n        \"Georgia\"                        : \"GA\",\n        \"Hawaii\"                         : \"HI\",\n        \"Idaho\"                          : \"ID\",\n        \"Illinois\"                       : \"IL\",\n        \"Indiana\"                        : \"IN\",\n        \"Iowa\"                           : \"IA\",\n        \"Kansas\"                         : \"KS\",\n        \"Kentucky\"                       : \"KY\",\n        \"Louisiana\"                      : \"LA\",\n        \"Maine\"                          : \"ME\",\n        \"Maryland\"                       : \"MD\",\n        \"Massachusetts\"                  : \"MA\",\n        \"Michigan\"                       : \"MI\",\n        \"Minnesota\"                      : \"MN\",\n        \"Mississippi\"                    : \"MS\",\n        \"Missouri\"                       : \"MO\",\n        \"Montana\"                        : \"MT\",\n        \"Nebraska\"                       : \"NE\",\n        \"Nevada\"                         : \"NV\",\n        \"New Hampshire\"                  : \"NH\",\n        \"New Jersey\"                     : \"NJ\",\n        \"New Mexico\"                     : \"NM\",\n        \"New York\"                       : \"NY\",\n        \"North Carolina\"                 : \"NC\",\n        \"North Dakota\"                   : \"ND\",\n        \"Ohio\"                           : \"OH\",\n        \"Oklahoma\"                       : \"OK\",\n        \"Oregon\"                         : \"OR\",\n        \"Pennsylvania\"                   : \"PA\",\n        \"Rhode Island\"                   : \"RI\",\n        \"South Carolina\"                 : \"SC\",\n        \"South Dakota\"                   : \"SD\",\n        \"Tennessee\"                      : \"TN\",\n        \"Texas\"                          : \"TX\",\n        \"Utah\"                           : \"UT\",\n        \"Vermont\"                        : \"VT\",\n        \"Virginia\"                       : \"VA\",\n        \"Washington\"                     : \"WA\",\n        \"West Virginia\"                  : \"WV\",\n        \"Wisconsin\"                      : \"WI\",\n        \"Wyoming\"                        : \"WY\"\n    };\n\n    Alpaca.Fields.StateField = Alpaca.Fields.SelectField.extend(\n    /**\n     * @lends Alpaca.Fields.StateField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"state\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            // defaults\n            if (Alpaca.isUndefined(this.options.capitalize)) {\n                this.options.capitalize = false;\n            }\n            if (Alpaca.isUndefined(this.options.includeStates)) {\n                this.options.includeStates = true;\n            }\n            if (Alpaca.isUndefined(this.options.includeTerritories)) {\n                this.options.includeTerritories = true;\n            }\n            if (Alpaca.isUndefined(this.options.format)) {\n                this.options.format = \"name\";\n            }\n\n            // validate settings\n            if (this.options.format === \"name\" || this.options.format === \"code\")\n            {\n                // valid formats\n            }\n            else\n            {\n                Alpaca.logError(\"The configured state format: \" + this.options.format + \" is not a legal value [name, code]\");\n\n                // default to name format\n                this.options.format = \"name\";\n            }\n\n            // configure\n            var holdings = Alpaca.retrieveUSHoldings(\n                this.options.includeStates,\n                this.options.includeTerritories,\n                (this.options.format === \"code\"),\n                this.options.capitalize);\n\n            this.schema[\"enum\"] = holdings.keys;\n            this.options.optionLabels = holdings.values;\n\n            this.base();\n        }\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"State Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Provides a dropdown selector of states and/or territories in the United States, keyed by their two-character code.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"format\": {\n                        \"title\": \"Format\",\n                        \"description\": \"How to represent the state values in the selector\",\n                        \"type\": \"string\",\n                        \"default\": \"name\",\n                        \"enum\":[\"name\", \"code\"],\n                        \"readonly\": true\n                    },\n                    \"capitalize\": {\n                        \"title\": \"Capitalize\",\n                        \"description\": \"Whether the values should be capitalized\",\n                        \"type\": \"boolean\",\n                        \"default\": false,\n                        \"readonly\": true\n                    },\n                    \"includeStates\": {\n                        \"title\": \"Include States\",\n                        \"description\": \"Whether to include the states of the United States\",\n                        \"type\": \"boolean\",\n                        \"default\": true,\n                        \"readonly\": true\n                    },\n                    \"includeTerritories\": {\n                        \"title\": \"Include Territories\",\n                        \"description\": \"Whether to include the territories of the United States\",\n                        \"type\": \"boolean\",\n                        \"default\": true,\n                        \"readonly\": true\n                    }\n                }\n            });\n\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"format\": {\n                        \"type\": \"text\"\n                    },\n                    \"capitalize\": {\n                        \"type\": \"checkbox\"\n                    },\n                    \"includeStates\": {\n                        \"type\": \"checkbox\"\n                    },\n                    \"includeTerritories\": {\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"state\", Alpaca.Fields.StateField);\n    Alpaca.registerDefaultFormatFieldMapping(\"state\", \"state\");\n\n    /**\n     * Helper function to retrieve the holdings of US states and territories.\n     *\n     * @param {Boolean} includeStates whether to include US states\n     * @param {Boolean} includeTerritories whether to include US territories\n     * @param {Boolean} codeValue whether to hand back US holding codes (instead of names)\n     * @param {Boolean} capitalize whether to capitalize the values handed back\n     *\n     * @returns {Object} an object containing \"keys\" and \"values\", both of which are arrays.\n     */\n    Alpaca.retrieveUSHoldings = (function()\n    {\n        return function(includeStates, includeTerritories, codeValue, capitalize) {\n            var res  = {\n                keys:   [],\n                values: []\n            };\n            var opts = $.extend(\n                {},\n                includeStates      ? Alpaca.usHoldings.states      : {},\n                includeTerritories ? Alpaca.usHoldings.territories : {}\n            );\n            var sorted = Object.keys(opts);\n            sorted.sort();\n            for (var i in sorted) {\n                var state = sorted[i];\n                var key   = opts[state];\n                var value = codeValue ? key : state;\n                if (capitalize) {\n                    value = value.toUpperCase();\n                }\n                res.keys.push(key);\n                res.values.push(value);\n            }\n            return res;\n        };\n    })();\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.SummernoteField = Alpaca.Fields.TextAreaField.extend(\n    /**\n     * @lends Alpaca.Fields.SummernoteField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextAreaField#getFieldType\n         */\n        getFieldType: function() {\n            return \"summernote\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#setup\n         */\n        setup: function()\n        {\n            if (!this.data)\n            {\n                this.data = \"\";\n            }\n\n            this.base();\n\n            if (typeof(this.options.summernote) == \"undefined\")\n            {\n                this.options.summernote = {\n                    height: null,\n                    minHeight: null,\n                    maxHeight: null,\n                    focus: true\n                };\n            }\n        },\n\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                // see if we can render Summernote Editor\n                if (!self.isDisplayOnly() && self.control && $.fn.summernote)\n                {\n                    // wait for Alpaca to declare the DOM swapped and ready before we attempt to do anything with CKEditor\n                    self.on(\"ready\", function() {\n                        $(self.control).summernote(self.options.summernote);\n                    });\n                }\n\n                // if summernote's dom element gets destroyed, make sure we clean up the editor instance\n                $(self.control).bind('destroyed', function() {\n                    $(self.control).summernote('destroy');\n                });\n\n                callback();\n            });\n        }\n\n        /* builder_helpers */\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#getTitle\n         */\n        ,\n        getTitle: function() {\n            return \"Summernote Editor\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextAreaField#getDescription\n         */\n        getDescription: function() {\n            return \"Provides an instance of a Summernote Editor control for use in editing HTML.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"summernote\": {\n                        \"title\": \"Summernote Editor options\",\n                        \"description\": \"Use this entry to provide configuration options to the underlying Summernote plugin.\",\n                        \"type\": \"any\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.ControlField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"summernote\": {\n                        \"type\": \"any\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"summernote\", Alpaca.Fields.SummernoteField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    /**\n     * The table field is used for data representations that consist of an array with objects inside of it.  The objects\n     * must have a uniform structure.  The table field renders a standard HTML table using the table.  The individual\n     * columns are either editable (in edit mode) or simply displayed in read-only mode.\n     */\n    Alpaca.Fields.TableField = Alpaca.Fields.ArrayField.extend(\n    /**\n     * @lends Alpaca.Fields.TableField.prototype\n     */\n    {\n        setup: function()\n        {\n            var self = this;\n\n            if (!self.options)\n            {\n                self.options = {};\n            }\n\n            if (typeof(self.options.animate) === \"undefined\")\n            {\n                self.options.animate = false;\n            }\n\n            // assume toolbar sticky if not otherwise specified\n            if (typeof(this.options.toolbarSticky) === \"undefined\")\n            {\n                this.options.toolbarSticky = true;\n            }\n\n            this.base();\n\n            if (!this.options.items.type)\n            {\n                this.options.items.type = \"tablerow\";\n            }\n\n            // support for either \"datatable\" or \"datatables\"\n            if (this.options.datatable) {\n                this.options.datatables = this.options.datatable;\n            }\n\n            // assume empty options for datatables\n            if (typeof(this.options.datatables) === \"undefined\")\n            {\n                this.options.datatables = {\n                    \"paging\": false,\n                    \"lengthChange\": false,\n                    \"info\": false,\n                    \"searching\": false,\n                    \"ordering\": true\n                };\n\n                // draggable reorder of rows\n                if (typeof(this.options.dragRows) == \"undefined\")\n                {\n                    this.options.dragRows = false;\n                }\n\n                if (this.options.readonly)\n                {\n                    this.options.dragRows = false;\n                }\n\n                if (this.isDisplayOnly())\n                {\n                    this.options.dragRows = false;\n                }\n            }\n\n            // assume actions column to be shown\n            if (typeof(this.options.showActionsColumn) === \"undefined\")\n            {\n                this.options.showActionsColumn = true;\n\n                if (this.options.readonly)\n                {\n                    this.options.showActionsColumn = false;\n                }\n\n                if (this.isDisplayOnly())\n                {\n                    this.options.showActionsColumn = false;\n                }\n            }\n\n            // data tables columns\n            this.options.datatables.columns = [];\n\n            // initialize data tables to detect alpaca field types and perform alpaca field sorting and filtering\n            if ($.fn.dataTableExt && !$.fn.DataTable.ext.type.search[\"alpaca\"])\n            {\n                $.fn.DataTable.ext.order[\"alpaca\"] = function (settings, col) {\n\n                    // ensure that data property has latest value\n                    self.data = self.getValue();\n\n                    var propertyName = null;\n\n                    // find the property by index\n                    var c = 0;\n                    for (var k in self.schema.items.properties) {\n                        if (c === col) {\n                            propertyName = k;\n                            break;\n                        }\n                        c++;\n                    }\n\n                    // collect values\n                    var values = [];\n                    if (self.data)\n                    {\n                        for (var i = 0; i < self.data.length; i++)\n                        {\n                            values.push(self.data[i][propertyName]);\n                        }\n                    }\n\n                    // sort values\n                    values.sort();\n\n                    return values;\n\n                    /*\n                    return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n                        var alpacaId = $(td).children().attr(\"data-alpaca-field-id\");\n                        return Alpaca.fieldInstances[alpacaId].getValue();\n                    } );\n                    */\n                };\n\n                // this is a kind of hacky function at the moment, trying to do filtering that takes into account\n                // alpaca field values\n                //\n                // according to data tables authors, need to wait for next release for refactoring of filtering\n                // logic in data tables to really take control of this and do it right\n                // this \"sort of\" works for now\n                //\n                $.fn.dataTableExt.afnFiltering.push(function(settings, fields, fieldIndex, data, dataIndex) {\n\n                    var text = $(settings.nTableWrapper).find(\".dataTables_filter input[type='search']\").val();\n\n                    if (!text) {\n                        return true;\n                    }\n\n                    text = \"\" + text;\n\n                    text = $.trim(text);\n                    text = text.toLowerCase();\n\n                    var match = false;\n\n                    for (var i = 0; i < data.length; i++)\n                    {\n                        var dataValue = data[i];\n                        if (dataValue)\n                        {\n                            var z = dataValue.indexOf(\"data-alpaca-field-id=\");\n                            if (z > -1)\n                            {\n                                var alpacaId = $(dataValue).attr(\"data-alpaca-field-id\");\n\n                                var alpacaValue = Alpaca.fieldInstances[alpacaId].getValue();\n                                if (alpacaValue)\n                                {\n                                    alpacaValue = \"\" + alpacaValue;\n                                    alpacaValue = alpacaValue.toLowerCase();\n\n                                    if (alpacaValue.indexOf(text) > -1)\n                                    {\n                                        match = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    return match;\n                });\n            }\n        },\n\n        /**\n         * @see Alpaca.ControlField#getFieldType\n         */\n        getFieldType: function() {\n            return \"table\";\n        },\n\n        prepareContainerModel: function(callback)\n        {\n            var self = this;\n\n            self.base(function(model) {\n\n                // build a separate \"items\" array that we'll use to build out the table header\n                model.headers = [];\n                if (self.schema.items && self.schema.items.properties)\n                {\n                    for (var k in self.schema.items.properties)\n                    {\n                        var header = {};\n                        header.id = k;\n                        header.title = self.schema.items.properties[k].title;\n                        header.hidden = false;\n                        if (self.options.items && self.options.items.fields && self.options.items.fields[k])\n                        {\n                            if (self.options.items.fields[k].label)\n                            {\n                                header.title = self.options.items.fields[k].label;\n                            }\n\n                            if (self.options.items.fields[k].type === \"hidden\")\n                            {\n                                header.hidden = true;\n                            }\n                        }\n\n                        model.headers.push(header);\n                    }\n                }\n\n                callback(model);\n            });\n        },\n\n        /**\n         * The table field uses the \"array\" container convention to render the DOM.  As such, nested objects are wrapped\n         * in \"field\" elements that result in slightly incorrect table structures.  Part of the reason for this is that\n         * browsers are very fussy when it comes to injection of nested TR or TD partials.  Here, we generate most\n         * things as DIVs and then do some cleanup in this method to make sure that the table is put togehter in the\n         * right way.\n         *\n         * @param model\n         * @param callback\n         */\n        afterRenderContainer: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                self.cleanupDomInjections();\n\n                // apply styles of underlying \"table\"\n                var table = $(this.container).find(\"table\");\n                self.applyStyle(\"table\", table);\n\n                // if the DataTables plugin is available, use it\n                if (self.options.datatables)\n                {\n                    if ($.fn.DataTable)\n                    {\n                        // if we're setting up for dragging rows, then add that column\n                        if (self.options.dragRows)\n                        {\n                            self.options.datatables.columns.push({\n                                \"orderable\": false,\n                                \"name\": \"dragRowsIndex\",\n                                \"hidden\": true\n                            });\n\n                            self.options.datatables.columns.push({\n                                \"orderable\": false,\n                                \"name\": \"dragRowsDraggable\"\n                            });\n                        }\n\n                        // mix in fields from the items\n                        for (var k in self.schema.items.properties)\n                        {\n                            var colConfig = {\n                                \"orderable\": true,\n                                \"orderDataType\": \"alpaca\"\n                            };\n\n                            self.options.datatables.columns.push(colConfig);\n                        }\n\n                        // if we have an actions column enabled, then turn off sorting for the actions column (assumed to be last)\n                        if (self.options.showActionsColumn)\n                        {\n                            self.options.datatables.columns.push({\n                                \"orderable\": false,\n                                \"name\": \"actions\"\n                            });\n                        }\n\n                        if (self.options.dragRows)\n                        {\n                            self.options.datatables[\"rowReorder\"] = {\n                                \"selector\": \"tr td.alpaca-table-reorder-draggable-cell\",\n                                \"dataSrc\": 0,\n                                \"snapX\": true,\n                                \"update\": true\n                            };\n                        }\n\n                        // EVENT HANDLERS\n\n                        // listen for the \"ready\" event and when it fires, init data tables\n                        // this ensures that the DOM and anything wrapping our table field instance is ready to rock\n                        // before we proceed\n                        self.off(\"ready\");\n                        self.on(\"ready\", function() {\n\n                            // tear down old data tables data if it is still around\n                            if (self._dt) {\n                                self._dt.destroy();\n                                self._dt = undefined;\n                            }\n\n                            // table dom element\n                            var table = $(self.container).find(\"table\");\n\n                            // data table reference\n                            self._dt = $(table).DataTable(self.options.datatables);\n\n                            // listen for the \"row-reorder\" event\n                            self._dt.on(\"row-reorder\", function(e, diff, edit) {\n\n                                if (self._dt._disableAlpacaHandlers) {\n                                    return;\n                                }\n\n                                // update our data structure to reflect the shift in positions\n                                if (diff.length > 0)\n                                {\n                                    if (diff[0].oldPosition !== diff[0].newPosition)\n                                    {\n                                        self._dt._disableAlpacaHandlers = true;\n                                        self.moveItem(diff[0].oldPosition, diff[0].newPosition, false, function() {\n                                            // all done\n                                        });\n                                    }\n                                }\n                            });\n\n                            // listen for the underlying table DOM element being destroyed\n                            // when that happens, tear down the datatables implementation as well\n                            $(self.container).bind('destroyed', function() {\n                                if (self._dt) {\n                                    self._dt.destroy();\n                                    self._dt = undefined;\n                                }\n                            });\n\n                            // listen for the sorting event\n                            // change the order of children and refresh\n                            self._dt.on('order', function ( e, ctx, sorting, columns ) {\n\n                                if (self._dt._disableAlpacaHandlers) {\n                                    return;\n                                }\n\n                                // if we don't have an original copy of the children, make one\n                                // we're about to re-order the children and datatable assumes we know the original order\n                                if (!self._dt._originalChildren) {\n                                    self._dt._originalChildren = [];\n                                    for (var k = 0; k < self.children.length; k++) {\n                                        self._dt._originalChildren.push(self.children[k]);\n                                    }\n                                }\n\n                                // re-order based on the order that datatables believes is right\n                                var newChildren = [];\n                                for (var z = 0; z < ctx.aiDisplay.length; z++)\n                                {\n                                    var index = ctx.aiDisplay[z];\n                                    newChildren.push(self._dt._originalChildren[index]);\n                                }\n                                self.children = newChildren;\n\n                                self._dt._disableAlpacaHandlers = false;\n                            });\n\n                        });\n                    }\n                }\n\n                // walk through headers and allow for callback-based config\n                $(table).find(\"thead > tr > th[data-header-id]\").each(function() {\n\n                    var key = $(this).attr(\"data-header-id\");\n\n                    var schema = self.schema.items.properties[key];\n                    var options = null;\n                    if (self.options.items.fields && self.options.items.fields[key]) {\n                        options = self.options.items.fields[key];\n                    }\n\n                    // CALLBACK: \"tableHeaderRequired\" or \"tableHeaderOptional\"\n                    if (schema.required || (options && options.required))\n                    {\n                        // CALLBACK: \"tableHeaderRequired\"\n                        self.fireCallback(\"tableHeaderRequired\", schema, options, this);\n                    }\n                    else\n                    {\n                        // CALLBACK: \"tableHeaderOptional\"\n                        self.fireCallback(\"tableHeaderOptional\", schema, options, this);\n                    }\n\n                });\n\n                callback();\n\n            }.bind(self));\n        },\n\n        cleanupDomInjections: function()\n        {\n            /**\n             * Takes a DOM element and merges it \"up\" to the parent element.  Data attributes and some classes are\n             * copied from DOM element into the parent element.  The children of the DOM element are added to the\n             * parent and the DOM element is removed.\n             *\n             * @param mergeElement\n             */\n            var mergeElementUp = function(mergeElement)\n            {\n                var mergeElementParent = $(mergeElement).parent();\n                var mergeElementChildren = $(mergeElement).children();\n\n                // copy merge element classes to parent\n                var classNames =$(mergeElement).attr('class').split(/\\s+/);\n                $.each( classNames, function(index, className){\n                    if (className === \"alpaca-merge-up\") {\n                        // skip\n                    } else {\n                        $(mergeElementParent).addClass(className);\n                    }\n                });\n\n                // copy attributes to TR\n                $.each($(mergeElement)[0].attributes, function() {\n                    if (this.name && this.name.indexOf(\"data-\") === 0)\n                    {\n                        $(mergeElementParent).attr(this.name, this.value);\n                    }\n                });\n\n                // replace field with children\n                if (mergeElementChildren.length > 0)\n                {\n                    $(mergeElement).replaceWith(mergeElementChildren);\n                }\n                else\n                {\n                    $(mergeElement).remove();\n                }\n            };\n\n            // find each TR's .alpaca-field and merge up\n            this.getFieldEl().find(\"tr > .alpaca-field\").each(function() {\n                mergeElementUp(this);\n            });\n\n            // find each TR's .alpaca-container and merge up\n            this.getFieldEl().find(\"tr > .alpaca-container\").each(function() {\n                mergeElementUp(this);\n            });\n\n            // find the action bar and slip a TD around it\n            var alpacaArrayActionbar = this.getFieldEl().find(\".\" + Alpaca.MARKER_CLASS_ARRAY_ITEM_ACTIONBAR);\n            if (alpacaArrayActionbar.length > 0)\n            {\n                alpacaArrayActionbar.each(function() {\n                    var td = $(\"<td class='actionbar' nowrap='nowrap'></td>\");\n                    $(this).before(td);\n                    $(td).append(this);\n                });\n            }\n\n            // find the alpaca-table-reorder-draggable-cell and slip a TD around it\n            var alpacaTableReorderDraggableCells = this.getFieldEl().find(\".alpaca-table-reorder-draggable-cell\");\n            if (alpacaTableReorderDraggableCells.length > 0)\n            {\n                alpacaTableReorderDraggableCells.each(function() {\n                    var td = $(\"<td class='alpaca-table-reorder-draggable-cell'></td>\");\n                    $(this).before(td);\n                    $(td).append($(this).children());\n                    $(this).remove();\n                });\n            }\n\n            // find the alpaca-table-reorder-index-cell, slip a TD around it and insert value\n            var alpacaTableReorderIndexCells = this.getFieldEl().find(\".alpaca-table-reorder-index-cell\");\n            if (alpacaTableReorderIndexCells.length > 0)\n            {\n                alpacaTableReorderIndexCells.each(function(i) {\n                    var td = $(\"<td class='alpaca-table-reorder-index-cell'>\" + i + \"</td>\");\n                    $(this).before(td);\n                    $(this).remove();\n                });\n            }\n\n            // find anything else with .alpaca-merge-up and merge up\n            this.getFieldEl().find(\".alpaca-merge-up\").each(function() {\n                mergeElementUp(this);\n            });\n        },\n\n        doResolveItemContainer: function()\n        {\n            var self = this;\n\n            return $(self.container).find(\"table tbody\");\n        },\n\n        doAfterAddItem: function(item, callback)\n        {\n            var self = this;\n\n            self.data = self.getValue();\n\n            self.cleanupDomInjections();\n\n            // if we're using dragRows support, we have no choice here except to completely reboot the table in order\n            // to get DataTables to bind things correctly for drag-drop support\n            // TODO: change dragRows to use our own drag/drop tooling and get rid of DataTables Row Reorder Plugin\n            // we also have do this if we've added the first row to get DataTables to redraw\n            var usingDataTables = self.options.datatables && $.fn.DataTable;\n            if (self.options.dragRows || (usingDataTables && self.data.length === 1))\n            {\n                // refresh\n                self.refresh(function() {\n                    callback();\n                });\n            }\n            else\n            {\n                // inform data tables that we've added a row\n                // we do this by finding the TR and then adding that way\n                if (self._dt)\n                {\n                    var tr = self.field.find(\"[data-alpaca-field-path='\" + item.path + \"']\");\n                    self._dt.row.add(tr);//.draw(false);\n                }\n\n                callback();\n            }\n        },\n\n        doAfterRemoveItem: function(childIndex, callback)\n        {\n            var self = this;\n\n            self.data = self.getValue();\n\n            self.cleanupDomInjections();\n\n            // TODO: see above\n\n            var usingDataTables = self.options.datatables && $.fn.DataTable;\n            if (self.options.dragRows || (usingDataTables && self.data.length === 0))\n            {\n                // refresh\n                self.refresh(function () {\n                    callback();\n                });\n            }\n            else\n            {\n                // inform data tables that we've removed a row\n                if (self._dt)\n                {\n                    self._dt.rows(childIndex).remove();//.draw(false);\n                }\n\n                callback();\n            }\n        },\n\n        /**\n         * @see Alpaca.ControlField#getType\n         */\n        getType: function() {\n            return \"array\";\n        }\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.ControlField#getTitle\n         */\n        getTitle: function() {\n            return \"Table Field\";\n        },\n\n        /**\n         * @see Alpaca.ControlField#getDescription\n         */\n        getDescription: function() {\n            return \"Renders array items into a table\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"datatables\": {\n                        \"title\": \"DataTables Configuration\",\n                        \"description\": \"Optional configuration to be passed to the underlying DataTables Plugin.\",\n                        \"type\": \"object\"\n                    },\n                    \"showActionsColumn\": {\n                        \"title\": \"Show Actions Column\",\n                        \"default\": true,\n                        \"description\": \"Whether to show or hide the actions column.\",\n                        \"type\": \"boolean\"\n                    },\n                    \"dragRows\": {\n                        \"title\": \"Drag Rows\",\n                        \"default\": false,\n                        \"description\": \"Whether to enable the dragging of rows via a draggable column.  This requires DataTables and the DataTables Row Reorder Plugin.\",\n                        \"type\": \"boolean\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"datatables\": {\n                        \"type\": \"object\"\n                    },\n                    \"showActionsColumn\": {\n                        \"type\": \"checkbox\"\n                    },\n                    \"dragRows\": {\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"table\", Alpaca.Fields.TableField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.TableRowField = Alpaca.Fields.ObjectField.extend(\n    /**\n     * @lends Alpaca.Fields.TableRowField.prototype\n     */\n    {\n        prepareContainerModel: function(callback)\n        {\n            var self = this;\n\n            this.base(function(model) {\n\n                model.options.showActionsColumn = self.parent.options.showActionsColumn;\n                model.options.dragRows = self.parent.options.dragRows;\n\n                // walk all items and mark hiddens so that the template can easily pick this up\n                // hiddens are applied the \"alpaca-table-column-hidden\" css class so that they can be hidden\n                for (var i = 0; i < model.items.length; i++)\n                {\n                    if (model.items[i].options.type === \"hidden\")\n                    {\n                        model.items[i].hidden = true;\n                    }\n                }\n\n                callback(model);\n            });\n        },\n\n        /**\n         * @see Alpaca.ControlField#getFieldType\n         */\n        getFieldType: function() {\n            return \"tablerow\";\n        },\n\n        /**\n         * @see Alpaca.ControlField#getType\n         */\n        getType: function() {\n            return \"object\";\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.ControlField#getTitle\n         */\n        getTitle: function() {\n            return \"Table Row Field\";\n        },\n\n        /**\n         * @see Alpaca.ControlField#getDescription\n         */\n        getDescription: function() {\n            return \"Renders object items into a table row\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"tablerow\", Alpaca.Fields.TableRowField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.TagField = Alpaca.Fields.LowerCaseField.extend(\n    /**\n     * @lends Alpaca.Fields.TagField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"tag\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            this.base();\n\n            if (!this.options.separator)\n            {\n                this.options.separator = \",\";\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getValue\n         */\n        getControlValue: function()\n        {\n            var val = this.base();\n\n            if (val === \"\") {\n                return [];\n            }\n\n            return val.split(this.options.separator);\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setValue\n         */\n        setValue: function(val)\n        {\n            if (val === \"\")\n            {\n                return;\n            }\n\n            if (!val)\n            {\n                return this.base(\"\");\n            }\n\n            this.base(val.join(this.options.separator));\n        },\n\n        /**\n         * @see Alpaca.Field#onBlur\n         */\n        onBlur: function(e)\n        {\n            this.base(e);\n\n            var vals = this.getValue();\n\n            var trimmed = [];\n\n            $.each(vals, function(i, v) {\n\n                if (v.trim() !== \"\")\n                {\n                    trimmed.push(v.trim());\n                }\n            });\n\n            this.setValue(trimmed);\n        }\n\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Tag Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Text field for entering list of tags separated by delimiter.\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"separator\": {\n                        \"title\": \"Separator\",\n                        \"description\": \"Separator used to split tags.\",\n                        \"type\": \"string\",\n                        \"default\":\",\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"separator\": {\n                        \"type\": \"text\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"tag\", Alpaca.Fields.TagField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.TimeField = Alpaca.Fields.DateField.extend(\n    /**\n     * @lends Alpaca.Fields.TimeField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"time\";\n        },\n\n        getDefaultFormat: function() {\n            return \"h:mm:ss a\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            // default html5 input type = \"time\";\n            //this.inputType = \"time\";\n\n            this.base();\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Time Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Time Field\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerMessages({\n        \"invalidTime\": \"Invalid time\"\n    });\n    Alpaca.registerFieldClass(\"time\", Alpaca.Fields.TimeField);\n    Alpaca.registerDefaultFormatFieldMapping(\"time\", \"time\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.TinyMCEField = Alpaca.Fields.TextAreaField.extend(\n        /**\n         * @lends Alpaca.Fields.tinyMCEField.prototype\n         */\n        {\n            /**\n             * @see Alpaca.Fields.TextAreaField#getFieldType\n             */\n            getFieldType: function() {\n                return \"tinymce\";\n            },\n\n            /**\n             * @see Alpaca.Fields.TextAreaField#setup\n             */\n            setup: function()\n            {\n                var self = this;\n\n                if (!this.data)\n                {\n                    this.data = \"\";\n                }\n\n                if (!self.options.toolbar)\n                {\n                    self.options.toolbar = \"insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image\";\n                }\n\n                this.base();\n            },\n\n            setValue: function(value)\n            {\n                var self = this;\n\n                // be sure to call into base method\n                this.base(value);\n\n                if (self.editor)\n                {\n                    self.editor.setContent(value);\n                }\n            },\n\n            /**\n             * @see Alpaca.Fields.ControlField#getControlValue\n             */\n            getControlValue:function()\n            {\n                var self = this;\n\n                var value = null;\n\n                if (self.editor)\n                {\n                    value = self.editor.getContent()\n                }\n\n                return value;\n            },\n\n            initTinyMCEEvents: function()\n            {\n                var self = this;\n\n                if (self.editor) {\n\n                    // click event\n                    self.editor.on(\"click\", function (e) {\n                        self.onClick.call(self, e);\n                        self.trigger(\"click\", e);\n                    });\n\n                    // change event\n                    self.editor.on(\"change\", function (e) {\n                        self.onChange();\n                        self.triggerWithPropagation(\"change\", e);\n                    });\n\n                    // blur event\n                    self.editor.on('blur', function (e) {\n                        self.onBlur();\n                        self.trigger(\"blur\", e);\n                    });\n\n                    // focus event\n                    self.editor.on(\"focus\", function (e) {\n                        self.onFocus.call(self, e);\n                        self.trigger(\"focus\", e);\n                    });\n\n                    // keypress event\n                    self.editor.on(\"keypress\", function (e) {\n                        self.onKeyPress.call(self, e);\n                        self.trigger(\"keypress\", e);\n                    });\n\n                    // keyup event\n                    self.editor.on(\"keyup\", function (e) {\n                        self.onKeyUp.call(self, e);\n                        self.trigger(\"keyup\", e);\n                    });\n\n                    // keydown event\n                    self.editor.on(\"keydown\", function (e) {\n                        self.onKeyDown.call(self, e);\n                        self.trigger(\"keydown\", e);\n                    });\n                }\n            },\n\n            afterRenderControl: function(model, callback)\n            {\n                var self = this;\n\n                this.base(model, function() {\n\n                    if (!self.isDisplayOnly() && self.control && typeof(tinyMCE) !== \"undefined\")\n                    {\n                        // wait for Alpaca to declare the DOM swapped and ready before we attempt to do anything with CKEditor\n                        self.on(\"ready\", function() {\n\n                            if (!self.editor)\n                            {\n                                var rteFieldID = $(self.control)[0].id;\n\n                                tinyMCE.init({\n                                    init_instance_callback: function(editor) {\n                                        self.editor = editor;\n\n                                        self.initTinyMCEEvents();\n                                    },\n                                    selector: \"#\" + rteFieldID,\n                                    toolbar: self.options.toolbar\n                                });\n\n                            }\n                        });\n                    }\n\n                    callback();\n                });\n            },\n\n            /**\n             * @see Alpaca.Field#destroy\n             */\n            destroy: function()\n            {\n                var self = this;\n\n                // destroy the plugin instance\n                if (self.editor)\n                {\n                    self.editor.remove();\n                    self.editor = null;\n                }\n\n                // call up to base method\n                this.base();\n            },\n\n\n            /* builder_helpers */\n\n            /**\n             * @see Alpaca.Fields.TextAreaField#getTitle\n             */\n            getTitle: function() {\n                return \"TinyMCE Editor\";\n            },\n\n            /**\n             * @see Alpaca.Fields.TextAreaField#getDescription\n             */\n            getDescription: function() {\n                return \"Provides an instance of a TinyMCE control for use in editing HTML.\";\n            },\n\n            /**\n             * @private\n             * @see Alpaca.ControlField#getSchemaOfOptions\n             */\n            getSchemaOfOptions: function() {\n                return Alpaca.merge(this.base(), {\n                    \"properties\": {\n                        \"toolbar\": {\n                            \"title\": \"TinyMCE toolbar options\",\n                            \"description\": \"Toolbar options for TinyMCE plugin.\",\n                            \"type\": \"string\"\n                        }\n                    }\n                });\n            },\n\n            /**\n             * @private\n             * @see Alpaca.ControlField#getOptionsForOptions\n             */\n            getOptionsForOptions: function() {\n                return Alpaca.merge(this.base(), {\n                    \"fields\": {\n                        \"toolbar\": {\n                            \"type\": \"text\"\n                        }\n                    }\n                });\n            }\n\n            /* end_builder_helpers */\n        });\n\n    Alpaca.registerFieldClass(\"tinymce\", Alpaca.Fields.TinyMCEField);\n\n})(jQuery);\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.TokenField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.TokenField.prototype\n     */\n    {\n        /**\n         * @override\n         */\n        getFieldType: function() {\n            return \"token\";\n        },\n\n        /**\n         * @override\n         */\n        setup: function()\n        {\n            this.base();\n\n            if (!this.options.separator)\n            {\n                this.options.separator = \",\";\n            }\n\n            if (typeof(this.options.tokenfield) == \"undefined\")\n            {\n                this.options.tokenfield = {};\n            }\n\n            if (typeof(this.options.tokenfield.showAutocompleteOnFocus) === \"undefined\")\n            {\n                this.options.tokenfield.showAutocompleteOnFocus = true;\n            }\n        },\n\n        /**\n         * @override\n         */\n        getControlValue: function()\n        {\n            return this.base();\n        },\n\n        /**\n         * @override\n         */\n        setValue: function(val)\n        {\n            this.base(val);\n        },\n\n        /**\n         * @override\n         */\n        onBlur: function(e)\n        {\n            this.base(e);\n        },\n\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                // see if we can render CK Editor\n                if (!self.isDisplayOnly() && self.control && typeof($.fn.tokenfield) !== \"undefined\")\n                {\n                    // wait for Alpaca to declare the DOM swapped and ready before we attempt to do anything\n                    self.on(\"ready\", function(self, tokenfield) {\n                        $(self.control).tokenfield(tokenfield);\n                    }(self, self.options.tokenfield));\n                }\n\n                callback();\n            });\n        }\n\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @override\n         */\n        getTitle: function() {\n            return \"Token Field\";\n        },\n\n        /**\n         * @override\n         */\n        getDescription: function() {\n            return \"Token field for entering list of tokens separated by delimiter.\";\n        },\n\n        /**\n         * @override\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"separator\": {\n                        \"title\": \"Separator\",\n                        \"description\": \"Separator used to split tokens.\",\n                        \"type\": \"string\",\n                        \"default\":\",\"\n                    },\n                    \"tokenfield\": {\n                        \"title\": \"Token Field options\",\n                        \"description\": \"Settings to pass into the underlying bootstrap-tokenfield control\",\n                        \"type\": \"object\",\n                        \"default\": undefined\n                    }\n                }\n            });\n        },\n\n        /**\n         * @override\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"separator\": {\n                        \"type\": \"text\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"token\", Alpaca.Fields.TokenField);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.UploadField = Alpaca.ControlField.extend(\n    /**\n     * @lends Alpaca.Fields.UploadField.prototype\n     */\n    {\n        /**\n         * @constructs\n         * @augments Alpaca.Fields.ControlField\n         *\n         * @class File upload control that can be mounted on top of \"object\" or \"array\" types.\n         *\n         * @param {Object} container Field container.\n         * @param {Any} data Field data.\n         * @param {Object} options Field options.\n         * @param {Object} schema Field schema.\n         * @param {Object|String} view Field view.\n         * @param {Alpaca.Connector} connector Field connector.\n         */\n        constructor: function(container, data, options, schema, view, connector)\n        {\n            var self = this;\n\n            this.base(container, data, options, schema, view, connector);\n\n            this.isArrayType = function() {\n                return self.schema.type === \"array\";\n            };\n\n            this.isObjectType = function() {\n                return self.schema.type === \"object\";\n            };\n\n            // wraps an existing template descriptor into a method that looks like fn(model)\n            // this is compatible with the requirements of fileinput\n            // config looks like\n            //    {\n            //       \"files\": [],\n            //       \"formatFileSize\": fn,\n            //       \"options\": {}\n            //    }\n            //\n\n            this.wrapTemplate = function(templateId)\n            {\n                return function(config) {\n\n                    var files = config.files;\n                    var formatFileSize = config.formatFileSize;\n                    var options = config.options;\n\n                    var rows = [];\n                    for (var i = 0; i < files.length; i++)\n                    {\n                        var model = {};\n                        model.options = self.options;\n                        model.file = Alpaca.cloneObject(files[i]);\n                        model.size = formatFileSize(model.size);\n                        model.buttons = self.options.buttons;\n                        model.view = self.view;\n                        model.fileIndex = i;\n\n                        var row = Alpaca.tmpl(self.view.getTemplateDescriptor(templateId), model, self);\n\n                        rows.push(row[0]);\n                    }\n\n                    rows = $(rows);\n                    $(rows).each(function() {\n\n                        if (options.fileupload && options.fileupload.autoUpload)\n                        {\n                            // disable start button\n                            $(this).find(\"button.start\").css(\"display\", \"none\");\n                        }\n\n                        self.handleWrapRow(this, options);\n\n                        // this event gets fired when fileimpl has cleaned up the DOM element\n                        // we handle Ajax related stuff on our own here\n                        //$(this).find(\"button.delete\").on(\"destroyed\", function() {\n                        $(this).find(\"button.delete\").on(\"click\", function() {\n\n                            var button = $(row).find(\"button.delete\");\n\n                            var fileIndex = $(button).attr(\"data-file-index\");\n                            var file = files[fileIndex];\n\n                            self.onFileDelete.call(self, row, button, file);\n\n                            // remove from files\n                            if (self.isArrayType())\n                            {\n                                var array = self.getValueAsArray();\n                                array.splice(fileIndex, 1);\n                                self.setValueAsArray(array);\n                            }\n                            else if (self.isObjectType())\n                            {\n                                self.setValueAsArray([]);\n                            }\n\n                            self.triggerWithPropagation(\"change\");\n                            setTimeout(function() {\n                                self.refreshUIState();\n                            }, 200);\n                        });\n                    });\n\n                    return $(rows);\n                };\n            };\n        },\n\n        /**\n         * @see Alpaca.ControlField#getFieldType\n         */\n        getFieldType: function() {\n            return \"upload\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.base();\n\n            // disable bottom control buttons (we have a conflict over the 'buttons' namespace)\n            self.options.renderButtons = false;\n\n            if (!self.options.buttons)\n            {\n                self.options.buttons = [];\n            }\n\n            if (!self.options.hideDeleteButton)\n            {\n                self.options.buttons.push({\n                    \"key\": \"delete\",\n                    \"isDelete\": true\n                });\n            }\n\n            if (typeof(self.options.showUploadPreview) === \"undefined\")\n            {\n                self.options.showUploadPreview = true;\n            }\n\n            if (typeof(self.options.showHeaders) === \"undefined\")\n            {\n                self.options.showHeaders = true;\n            }\n\n            if (!self.data)\n            {\n                self.data = [];\n            }\n\n            // convert to array if not array already\n            if (self.data && Alpaca.isObject(self.data)) {\n                self.data = [self.data];\n            }\n\n            // upload\n            if (!self.options.upload)\n            {\n                self.options.upload = {};\n            }\n\n            // support copying back the maxNumberOfFiles from the upload plugin's settings\n            if (typeof(self.options.maxNumberOfFiles) === \"undefined\")\n            {\n                if (typeof(self.options.upload.maxNumberOfFiles) !== \"undefined\")\n                {\n                    self.options.maxNumberOfFiles = self.options.upload.maxNumberOfFiles;\n                }\n            }\n\n            // figure out reasonable maxNumberOfFiles\n            if (typeof(self.options.maxNumberOfFiles) === \"undefined\")\n            {\n                self.options.maxNumberOfFiles = 1;\n                if (self.isArrayType())\n                {\n                    self.options.maxNumberOfFiles = -1;\n                }\n            }\n\n            // safe guard\n            if (self.isObjectType()) {\n                self.options.maxNumberOfFiles = 1;\n            }\n\n            if (self.options.multiple === false)\n            {\n                self.options.maxNumberOfFiles = 1;\n            }\n\n            if (self.options.maxNumberOfFiles > 1 || self.options.maxNumberOfFiles === -1)\n            {\n                self.options.multiple = true;\n            }\n\n            // copy setting into upload plugin config\n            self.options.upload.maxNumberOfFiles = 9999;\n            if (self.options.maxNumberOfFiles > 0)\n            {\n                self.options.upload.maxNumberOfFiles = self.options.maxNumberOfFiles;\n            }\n\n            // max file size\n            if (typeof(self.options.maxFileSize) === \"undefined\")\n            {\n                if (self.options.upload.maxFileSize)\n                {\n                    self.options.maxFileSize = self.options.upload.maxFileSize;\n                }\n                else\n                {\n                    self.options.maxFileSize = -1; // no limit\n                }\n\n                // copy setting into upload\n                if (self.options.maxFileSize)\n                {\n                    self.options.upload.maxFileSize = self.options.maxFileSize;\n                }\n            }\n\n            // file types\n            if (typeof(self.options.fileTypes) === \"undefined\")\n            {\n                if (self.options.upload.acceptFileTypes)\n                {\n                    self.options.fileTypes = self.options.upload.acceptFileTypes;\n                }\n                else\n                {\n                    self.options.fileTypes = null; // no restrictions\n                }\n\n                // copy setting into upload\n                if (self.options.fileTypes)\n                {\n                    self.options.upload.acceptFileTypes = self.options.fileTypes;\n                }\n            }\n\n            // error handler\n            if (!self.options.errorHandler)\n            {\n                self.options.errorHandler = function(messages)\n                {\n                    alert(messages.join(\"\\n\"));\n                };\n            }\n\n            // if Alpaca is configured for CSRF support and a CSRF cookie or token is available,\n            // then apply it to the headers that are sent over the wire via the underlying ajax\n            // for the file upload control\n\n            // if we have a CSRF token, apply it to the headers\n            var csrfToken = self.determineCsrfToken();\n            if (csrfToken)\n            {\n                if (!self.options.upload) {\n                    self.options.upload = {};\n                }\n\n                if (!self.options.upload.headers) {\n                    self.options.upload.headers = {};\n                }\n\n                self.options.upload.headers[Alpaca.CSRF_HEADER_NAME] = csrfToken;\n            }\n        },\n\n        determineCsrfToken: function()\n        {\n            // is there a direct token specified?\n            var csrfToken = Alpaca.CSRF_TOKEN;\n            if (!csrfToken)\n            {\n                // is there a cookie that we can pull the value from?\n                for (var t = 0; t < Alpaca.CSRF_COOKIE_NAMES.length; t++)\n                {\n                    var cookieName = Alpaca.CSRF_COOKIE_NAMES[t];\n\n                    var cookieValue = Alpaca.readCookie(cookieName);\n                    if (cookieValue)\n                    {\n                        csrfToken = cookieValue;\n                        break;\n                    }\n                }\n            }\n\n            return csrfToken;\n        },\n\n        prepareControlModel: function(callback)\n        {\n            var self = this;\n\n            self.base(function(model) {\n\n                model.chooseButtonLabel = self.options.chooseButtonLabel;\n                if (!model.chooseButtonLabel)\n                {\n                    model.chooseButtonLabel = self.getMessage(\"chooseFiles\");\n                    if (self.options.maxNumberOfFiles === 1)\n                    {\n                        model.chooseButtonLabel = self.getMessage(\"chooseFile\");\n                    }\n                }\n\n                model.dropZoneMessage = self.options.dropZoneMessage;\n                if (!model.dropZoneMessage)\n                {\n                    model.dropZoneMessage = self.getMessage(\"dropZoneMultiple\");\n                    if (model.options.maxNumberOfFiles === 1)\n                    {\n                        model.dropZoneMessage = self.getMessage(\"dropZoneSingle\");\n                    }\n                }\n\n                model.selectFromExistingMessage = self.options.selectFromExistingMessage;\n                if (!model.selectFromExistingMessage)\n                {\n                    model.selectFromExistingMessage = self.getMessage(\"selectFromExistingMultiple\");\n                    if (model.options.maxNumberOfFiles === 1)\n                    {\n                        model.selectFromExistingMessage = self.getMessage(\"selectFromExistingSingle\");\n                    }\n                }\n\n                callback(model);\n            });\n        },\n\n        afterRenderControl: function(model, callback)\n        {\n            var self = this;\n\n            this.base(model, function() {\n\n                self.handlePostRender(function() {\n\n                    // if we're in display-only mode, we hide a bunch of things\n                    if (self.isDisplayOnly())\n                    {\n                        $(self.control).find(\"button\").hide();\n                        $(self.control).find(\".btn\").hide();\n                        $(self.control).find(\".alpaca-fileupload-chooserow\").hide();\n                        $(self.control).find(\".dropzone-message\").hide();\n                    }\n\n                    callback();\n                });\n\n            });\n        },\n\n        /**\n         * Gets the upload template.\n         */\n        getUploadTemplate: function() {\n            return this.wrapTemplate(\"control-upload-partial-upload\");\n        },\n\n        /**\n         * Gets the download template.\n         */\n        getDownloadTemplate: function() {\n            return this.wrapTemplate(\"control-upload-partial-download\");\n        },\n\n        /**\n         * Extension point for modifying the data ahead of an upload submit.\n         *\n         * @param data\n         */\n        handleBeforeFileUploadSubmit: function(data)\n        {\n\n        },\n\n        handlePostRender: function(callback)\n        {\n            var self = this;\n\n            var el = this.control;\n\n            // file upload config\n            var fileUploadConfig = {};\n\n            // defaults\n            fileUploadConfig[\"dataType\"] = \"json\";\n            fileUploadConfig[\"uploadTemplateId\"] = null;\n            fileUploadConfig[\"uploadTemplate\"] = this.getUploadTemplate();\n            fileUploadConfig[\"downloadTemplateId\"] = null;\n            fileUploadConfig[\"downloadTemplate\"] = this.getDownloadTemplate();\n            fileUploadConfig[\"filesContainer\"] = $(el).find(\".files\");\n            fileUploadConfig[\"dropZone\"] = $(el).find(\".fileupload-active-zone\");\n            fileUploadConfig[\"url\"] = \"/\";\n            fileUploadConfig[\"method\"] = \"post\";\n            fileUploadConfig[\"showUploadPreview\"] = self.options.showUploadPreview;\n\n            if (self.options.upload)\n            {\n                for (var k in self.options.upload)\n                {\n                    fileUploadConfig[k] = self.options.upload[k];\n                }\n            }\n\n            if (self.options.multiple)\n            {\n                $(el).find(\".alpaca-fileupload-input\").attr(\"multiple\", true);\n                //$(el).find(\".alpaca-fileupload-input\").attr(\"name\", self.name + \"_files[]\");\n            }\n\n            if (self.options.name)\n            {\n                $(el).find(\".alpaca-fileupload-input\").attr(\"name\", self.options.name);\n            }\n\n            // hide the progress bar at first\n            $(el).find(\".progress\").css(\"display\", \"none\");\n\n            /**\n             * If a file is being uploaded, show the progress bar.  Otherwise, hide it.\n             *\n             * @param e\n             * @param data\n             */\n            fileUploadConfig[\"progressall\"] = function (e, data) {\n\n                var showProgressBar = false;\n                if (data.loaded < data.total)\n                {\n                    showProgressBar = true;\n                }\n                if (showProgressBar)\n                {\n                    $(el).find(\".progress\").css(\"display\", \"block\");\n                    var progress = parseInt(data.loaded / data.total * 100, 10);\n                    $('#progress .progress-bar').css(\n                        'width',\n                        progress + '%'\n                    );\n                }\n                else\n                {\n                    $(el).find(\".progress\").css(\"display\", \"none\");\n                }\n            };\n\n            // some limit checks\n            fileUploadConfig[\"add\"] = function(e, data) {\n\n                var uploadErrors = [];\n\n                var i = 0;\n                do\n                {\n                    var bad = false;\n\n                    if (i < data.files.length)\n                    {\n                        // file types\n                        if (self.options.fileTypes)\n                        {\n                            var re = self.options.fileTypes;\n                            if (typeof(self.options.fileTypes) === \"string\")\n                            {\n                                re = new RegExp(self.options.fileTypes);\n                            }\n\n                            if (!re.test(data.files[i][\"type\"]))\n                            {\n                                uploadErrors.push('Not an accepted file type: ' + data.files[i][\"type\"]);\n                                bad = true;\n                            }\n                        }\n\n                        // size\n                        if (self.options.maxFileSize > -1)\n                        {\n                            if (data.files[i].size > self.options.maxFileSize) {\n                                uploadErrors.push('Filesize is too big: ' + data.files[i].size);\n                                bad = true;\n                            }\n                        }\n                    }\n\n                    if (bad)\n                    {\n                        i++;\n                    }\n                    else\n                    {\n                        i++;\n                    }\n                }\n                while (i < data.files.length);\n\n                if (uploadErrors.length > 0)\n                {\n                    self.options.errorHandler(uploadErrors);\n                }\n                else\n                {\n                    data.submit();\n                }\n            };\n\n            // allow for extension\n            self.applyConfiguration(fileUploadConfig);\n\n            // instantiate the control\n            var fileUpload = self.fileUpload = $(el).find('.alpaca-fileupload-input').fileupload(fileUploadConfig);\n\n            // When file upload of a file completes, we offer the chance to adjust the data ahead of FileUpload\n            // getting it.  This is useful for cases where you can't change the server side JSON but could do\n            // a little bit of magic in the client.\n            fileUpload.bindFirst(\"fileuploaddone\", function(e, data) {\n\n                var enhanceFiles = self.options.enhanceFiles;\n                if (enhanceFiles)\n                {\n                    enhanceFiles(fileUploadConfig, data);\n                }\n                else\n                {\n                    self.enhanceFiles(fileUploadConfig, data);\n                }\n\n                // copy back down into data.files\n                data.files = data.result.files;\n\n                setTimeout(function() {\n                    self.refreshValidationState(true);\n                    self.refreshUIState();\n                }, 250);\n\n            });\n\n            // When files are submitted, the \"properties\" and \"parameters\" options map are especially treated\n            // and are written into property<index>__<key> and param<index>__key entries in the form data.\n            // This allows for multi-part receivers to get values on a per-file basis.\n            // Plans are to allow token substitution and other client-side treatment ahead of posting.\n            fileUpload.bindFirst(\"fileuploadsubmit\", function(e, data) {\n\n                if (self.options[\"properties\"])\n                {\n                    $.each(data.files, function(index, file) {\n\n                        for (var key in self.options[\"properties\"])\n                        {\n                            var propertyName = \"property\" + index + \"__\" + key;\n                            var propertyValue = self.options[\"properties\"][key];\n\n                            // token substitutions\n                            propertyValue = self.applyTokenSubstitutions(propertyValue, index, file);\n\n                            if (!data.formData) {\n                                data.formData = {};\n                            }\n\n                            data.formData[propertyName] = propertyValue;\n                        }\n                    });\n                }\n\n                if (self.options[\"parameters\"])\n                {\n                    $.each(data.files, function(index, file) {\n\n                        for (var key in self.options[\"parameters\"])\n                        {\n                            var paramName = \"param\" + index + \"__\" + key;\n                            var paramValue = self.options[\"parameters\"][key];\n\n                            // token substitutions\n                            paramValue = self.applyTokenSubstitutions(paramValue, index, file);\n\n                            if (!data.formData) {\n                                data.formData = {};\n                            }\n\n                            data.formData[paramName] = paramValue;\n                        }\n                    });\n                }\n\n                self.handleBeforeFileUploadSubmit(data);\n\n                if (self.options.beforeFileUploadSubmitHandler)\n                {\n                    self.options.beforeFileUploadSubmitHandler.call(self, data);\n                }\n\n            });\n\n            /**\n             * When files are uploaded, we adjust the value of the field.\n             */\n            fileUpload.bind(\"fileuploaddone\", function(e, data) {\n\n                // existing\n                var array = self.getValueAsArray();\n\n                var f = function(i)\n                {\n                    if (i === data.files.length) // jshint ignore:line\n                    {\n                        self.setValueAsArray(array);\n                        return;\n                    }\n\n                    self.convertFileToDescriptor(data.files[i], function (err, descriptor) {\n\n                        if (descriptor)\n                        {\n                            array.push(descriptor);\n                        }\n\n                        f(i + 1);\n                    });\n\n                };\n                f(0);\n            });\n\n            /**\n             * When file uploads fail, alert...\n             */\n            fileUpload.bind(\"fileuploadfail\", function(e, data) {\n\n                if (data.errorThrown)\n                {\n                    self.onUploadFail(data);\n                }\n            });\n\n\n            /**\n             * Whether success or fail, we handle the results.\n             */\n            fileUpload.bind(\"fileuploadalways\", function(e, data) {\n                self.refreshUIState();\n            });\n\n            // allow for extension\n            self.applyBindings(fileUpload, el);\n\n            // allow for preloading of documents\n            self.preload(fileUpload, el, function(files) {\n\n                if (files)\n                {\n                    var form = $(self.control).find('.alpaca-fileupload-input');\n                    $(form).fileupload('option', 'done').call(form, $.Event('done'), {\n                        result: {\n                            files: files\n                        }\n                    });\n\n                    self.afterPreload(fileUpload, el, files, function() {\n                        callback();\n                    });\n                }\n                else\n                {\n                    callback();\n                }\n            });\n\n            if (typeof(document) !== \"undefined\")\n            {\n                $(document).bind('drop dragover', function (e) {\n                    e.preventDefault();\n                });\n            }\n        },\n\n        handleWrapRow: function(row, options)\n        {\n\n        },\n\n        applyTokenSubstitutions: function(text, index, file)\n        {\n            var tokens = {\n                \"index\": index,\n                \"name\": file.name,\n                \"size\": file.size,\n                \"url\": file.url,\n                \"thumbnailUrl\": file.thumbnailUrl\n            };\n\n            // substitute any tokens\n            var x = -1;\n            var b = 0;\n            do\n            {\n                x = text.indexOf(\"{\", b);\n                if (x > -1)\n                {\n                    var y = text.indexOf(\"}\", x);\n                    if (y > -1)\n                    {\n                        var token = text.substring(x + car.length, y);\n\n                        var replacement = tokens[token];\n                        if (replacement)\n                        {\n                            text = text.substring(0, x) + replacement + text.substring(y+1);\n                        }\n\n                        b = y + 1;\n                    }\n                }\n            }\n            while(x > -1);\n\n            return text;\n        },\n\n        /**\n         * Extension point for adding properties and callbacks to the file upload config.\n         *\n         * @param fileUploadconfig\n         */\n        applyConfiguration: function(fileUploadconfig)\n        {\n        },\n\n        /**\n         * Extension point for binding event handlers to file upload instance.\n         *\n         * @param fileUpload\n         */\n        applyBindings: function(fileUpload)\n        {\n        },\n\n        /**\n         * Converts from a file to a storage descriptor.\n         *\n         * A descriptor looks like:\n         *\n         *      {\n         *          \"id\": \"\"\n         *          ...\n         *      }\n         *\n         * A descriptor may contain additional properties as needed by the underlying storage implementation\n         * so as to retrieve metadata about the described file.\n         *\n         * Assumption is that the underlying persistence mechanism may need to be consulted.  Thus, this is async.\n         *\n         * By default, the descriptor mimics the file.\n         *\n         * @param file\n         * @param callback function(err, descriptor)\n         */\n        convertFileToDescriptor: function(file, callback)\n        {\n            var descriptor = {\n                \"id\": file.id,\n                \"name\": file.name,\n                \"size\": file.size,\n                \"url\": file.url,\n                \"thumbnailUrl\":file.thumbnailUrl,\n                \"deleteUrl\": file.deleteUrl,\n                \"deleteType\": file.deleteType\n            };\n\n            callback(null, descriptor);\n        },\n\n        /**\n         * Converts a storage descriptor to a file.\n         *\n         * A file looks like:\n         *\n         *      {\n         *          \"id\": \"\",\n         *          \"name\": \"picture1.jpg\",\n         *          \"size\": 902604,\n         *          \"url\": \"http:\\/\\/example.org\\/files\\/picture1.jpg\",\n         *          \"thumbnailUrl\": \"http:\\/\\/example.org\\/files\\/thumbnail\\/picture1.jpg\",\n         *          \"deleteUrl\": \"http:\\/\\/example.org\\/files\\/picture1.jpg\",\n         *          \"deleteType\": \"DELETE\"\n         *      }\n         *\n         * Since an underlying storage mechanism may be consulted, an async callback hook is provided.\n         *\n         * By default, the descriptor mimics the file.\n         *\n         * @param descriptor\n         * @param callback function(err, file)\n         */\n        convertDescriptorToFile: function(descriptor, callback)\n        {\n            var file = {\n                \"id\": descriptor.id,\n                \"name\": descriptor.name,\n                \"size\": descriptor.size,\n                \"url\": descriptor.url,\n                \"thumbnailUrl\":descriptor.thumbnailUrl,\n                \"deleteUrl\": descriptor.deleteUrl,\n                \"deleteType\": descriptor.deleteType\n            };\n\n            callback(null, file);\n        },\n\n        /**\n         * Extension point for \"enhancing\" data received from the remote server after uploads have been submitted.\n         * This provides a place to convert the data.rows back into the format which the upload control expects.\n         *\n         * Expected format:\n         *\n         *    data.result.rows = [{...}]\n         *    data.result.files = [{\n         *      \"id\": \"\",\n         *      \"path\": \"\",\n         *      \"name\": \"picture1.jpg\",\n         *      \"size\": 902604,\n         *      \"url\": \"http:\\/\\/example.org\\/files\\/picture1.jpg\",\n         *      \"thumbnailUrl\": \"http:\\/\\/example.org\\/files\\/thumbnail\\/picture1.jpg\",\n         *      \"deleteUrl\": \"http:\\/\\/example.org\\/files\\/picture1.jpg\",\n         *      \"deleteType\": \"DELETE\"*\n         *    }]\n         *\n         * @param fileUploadConfig\n         * @param data\n         */\n        enhanceFiles: function(fileUploadConfig, data)\n        {\n        },\n\n        /**\n         * Preloads data descriptors into files.\n         *\n         * @param fileUpload\n         * @param el\n         * @param callback\n         */\n        preload: function(fileUpload, el, callback)\n        {\n            var self = this;\n\n            var files = [];\n\n            // now preload with files based on property value\n            var descriptors = self.getValueAsArray();\n\n            var f = function(i)\n            {\n                if (i == descriptors.length) // jshint ignore:line\n                {\n                    // all done\n                    return callback(files);\n                }\n\n                self.convertDescriptorToFile(descriptors[i], function(err, file) {\n                    if (file)\n                    {\n                        files.push(file);\n                    }\n                    f(i+1);\n                });\n            };\n            f(0);\n        },\n\n        afterPreload: function(fileUpload, el, files, callback)\n        {\n            var self = this;\n\n            self.refreshUIState();\n\n            callback();\n        },\n\n        /**\n         * @see Alpaca.Fields.ControlField#getControlValue\n         */\n        getControlValue: function()\n        {\n            return this.data;\n        },\n\n        /**\n         * Hands back the value as either an object or array, depending on the schema type.\n         *\n         * @returns {*}\n         */\n        getValue: function()\n        {\n            var value = this.data;\n\n            if (this.isObjectType())\n            {\n                if (this.data && this.data.length > 0)\n                {\n                    value = this.data[0];\n                }\n                else\n                {\n                    value = undefined;\n                }\n            }\n\n            return value;\n        },\n\n        setValue: function(value)\n        {\n            if (!value)\n            {\n                this.data = [];\n            }\n            else\n            {\n                if (Alpaca.isArray(value))\n                {\n                    this.data = value;\n                }\n                else if (Alpaca.isObject(value))\n                {\n                    this.data = [value];\n                }\n            }\n\n            this.updateObservable();\n\n            this.triggerUpdate();\n        },\n\n        /**\n         * @returns {Array} the value as an array\n         */\n        getValueAsArray: function()\n        {\n            return this.data || [];\n        },\n\n        /**\n         * Sets the value as an array.\n         *\n         * @param array\n         */\n        setValueAsArray: function(array)\n        {\n            var self = this;\n\n            if (self.isArrayType())\n            {\n                self.setValue(array);\n            }\n            else if (self.isObjectType())\n            {\n                var val = null;\n                if (array && array.length > 0) {\n                    val = array[0];\n                }\n\n                self.setValue(val);\n            }\n        },\n\n        reload: function(callback)\n        {\n            var self = this;\n\n            var descriptors = this.getValueAsArray();\n\n            var files = [];\n\n            var f = function(i)\n            {\n                if (i === descriptors.length) // jshint ignore:line\n                {\n                    // all done\n\n                    var form = $(self.control).find('.alpaca-fileupload-input');\n                    $(form).fileupload('option', 'done').call(form, $.Event('done'), {\n                        result: {\n                            files: files\n                        }\n                    });\n\n                    // refresh validation state\n                    self.refreshValidationState();\n\n                    return callback();\n                }\n\n                self.convertDescriptorToFile(descriptors[i], function(err, file) {\n                    if (file)\n                    {\n                        files.push(file);\n                    }\n                    f(i+1);\n                });\n            };\n            f(0);\n        },\n\n        plugin: function()\n        {\n            var self = this;\n\n            return $(self.control).find('.alpaca-fileupload-input').data().blueimpFileupload;\n        },\n\n        refreshUIState: function()\n        {\n            var self = this;\n\n            var fileUpload = self.plugin();\n            if (fileUpload)\n            {\n                var maxNumberOfFiles = self.options.maxNumberOfFiles;\n\n                if (maxNumberOfFiles === -1)\n                {\n                    self.refreshButtons(true);\n                }\n                else\n                {\n                    if (fileUpload.options.getNumberOfFiles && fileUpload.options.getNumberOfFiles() >= maxNumberOfFiles)\n                    {\n                        self.refreshButtons(false);\n                    }\n                    else\n                    {\n                        self.refreshButtons(true);\n                    }\n                }\n            }\n        },\n\n        refreshButtons: function(enabled)\n        {\n            var self = this;\n\n            // disable select files button\n            $(self.control).find(\".btn.fileinput-button\").prop(\"disabled\", true);\n            $(self.control).find(\".btn.fileinput-button\").attr(\"disabled\", \"disabled\");\n\n            // hide dropzone message\n            $(self.control).find(\".fileupload-active-zone p.dropzone-message\").css(\"display\", \"none\");\n\n            if (enabled)\n            {\n                // enable select files button\n                $(self.control).find(\".btn.fileinput-button\").prop(\"disabled\", false);\n                $(self.control).find(\".btn.fileinput-button\").attr(\"disabled\", null);\n\n                // show dropzone message\n                $(self.control).find(\".fileupload-active-zone p.dropzone-message\").css(\"display\", \"block\");\n            }\n        },\n\n        onFileDelete: function(rowEl, buttonEl, file)\n        {\n            var self = this;\n\n            var deleteUrl = file.deleteUrl;\n            var deleteMethod = file.deleteType;\n\n            var c = {\n                \"method\": deleteMethod,\n                \"url\": deleteUrl,\n                \"headers\": {}\n            };\n\n            var csrfToken = self.determineCsrfToken();\n            if (csrfToken)\n            {\n                c.headers[Alpaca.CSRF_HEADER_NAME] = csrfToken;\n            }\n\n            $.ajax(c);\n        },\n\n        onUploadFail: function(data)\n        {\n            var self = this;\n\n            if (self.options.errorHandler)\n            {\n                self.options.errorHandler.call(self, data);\n            }\n\n            for (var i = 0; i < data.files.length; i++)\n            {\n                data.files[i].error = data.errorThrown;\n            }\n        },\n\n        /**\n         * @see Alpaca.Field#disable\n         */\n        disable: function()\n        {\n            // disable select button\n            $(this.field).find(\".fileinput-button\").prop(\"disabled\", true);\n            $(this.field).find(\".fileinput-button\").attr(\"disabled\", \"disabled\");\n\n            // hide the upload well\n            $(this.field).find(\".alpaca-fileupload-well\").css(\"visibility\", \"hidden\");\n        },\n\n        /**\n         * @see Alpaca.Field#enable\n         */\n        enable: function()\n        {\n            $(this.field).find(\".fileinput-button\").prop(\"disabled\", false);\n            $(this.field).find(\".fileinput-button\").removeAttr(\"disabled\");\n\n            // show the upload well\n            $(this.field).find(\".alpaca-fileupload-well\").css(\"visibility\", \"visible\");\n        },\n\n        /* builder_helpers */\n\n        /**\n         * @see Alpaca.ControlField#getTitle\n         */\n        getTitle: function() {\n            return \"Upload Field\";\n        },\n\n        /**\n         * @see Alpaca.ControlField#getDescription\n         */\n        getDescription: function() {\n            return \"Provides an upload field with support for thumbnail preview\";\n        },\n\n        /**\n         * @see Alpaca.ControlField#getType\n         */\n        getType: function() {\n            return \"array\";\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfSchema\n         */\n        getSchemaOfOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"maxNumberOfFiles\": {\n                        \"title\": \"Maximum Number of Files\",\n                        \"description\": \"The maximum number of files to allow to be uploaded.  If greater than zero, the maximum number will be constrained.  If -1, then no limit is imposed.\",\n                        \"type\": \"number\",\n                        \"default\": 1\n                    },\n                    \"maxFileSize\": {\n                        \"title\": \"Maximum File Size (in bytes)\",\n                        \"description\": \"The maximum file size allowed per upload.  If greater than zero, the maximum file size will be limited to the given size in bytes.  If -1, then no limit is imposed.\",\n                        \"type\": \"number\",\n                        \"default\": -1\n                    },\n                    \"fileTypes\": {\n                        \"title\": \"File Types\",\n                        \"description\": \"A regular expression limiting the file types that can be uploaded based on filename\",\n                        \"type\": \"string\"\n                    },\n                    \"multiple\": {\n                        \"title\": \"Multiple\",\n                        \"description\": \"Whether to allow multiple file uploads.  If maxNumberOfFiles is not specified, multiple will toggle between 1 and unlimited.\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    },\n                    \"showUploadPreview\": {\n                        \"title\": \"Show Upload Preview\",\n                        \"description\": \"Whether to show thumbnails for uploaded assets (requires preview support)\",\n                        \"type\": \"boolean\",\n                        \"default\": true\n                    },\n                    \"errorHandler\": {\n                        \"title\": \"Error Handler\",\n                        \"description\": \"Optional function handler to be called when one or more files fails to upload.  This function is responsible for parsing the underlying xHR request and populating the error message state.\",\n                        \"type\": \"function\"\n                    }\n                }\n            });\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"upload\", Alpaca.Fields.UploadField);\n\n    Alpaca.registerMessages({\n        \"chooseFile\": \"Choose File...\",\n        \"chooseFiles\": \"Choose Files...\",\n        \"dropZoneSingle\": \"Click the Choose button or Drag and Drop a file here to upload...\",\n        \"dropZoneMultiple\": \"Click the Choose button or Drag and Drop files here to upload...\"\n    });\n\n    // https://github.com/private-face/jquery.bind-first/blob/master/dev/jquery.bind-first.js\n    // jquery.bind-first.js\n    (function($) {\n        var splitVersion = $.fn.jquery.split(\".\");\n        var major = parseInt(splitVersion[0]);\n        var minor = parseInt(splitVersion[1]);\n\n        var JQ_LT_17 = (major < 1) || (major === 1 && minor < 7);\n\n        function eventsData($el)\n        {\n            return JQ_LT_17 ? $el.data('events') : $._data($el[0]).events;\n        }\n\n        function moveHandlerToTop($el, eventName, isDelegated)\n        {\n            var data = eventsData($el);\n            var events = data[eventName];\n\n            if (!JQ_LT_17) {\n                var handler = isDelegated ? events.splice(events.delegateCount - 1, 1)[0] : events.pop();\n                events.splice(isDelegated ? 0 : (events.delegateCount || 0), 0, handler);\n\n                return;\n            }\n\n            if (isDelegated) {\n                data.live.unshift(data.live.pop());\n            } else {\n                events.unshift(events.pop());\n            }\n        }\n\n        function moveEventHandlers($elems, eventsString, isDelegate) {\n            var events = eventsString.split(/\\s+/);\n            $elems.each(function() {\n                for (var i = 0; i < events.length; ++i) {\n                    var pureEventName = $.trim(events[i]).match(/[^\\.]+/i)[0];\n                    moveHandlerToTop($(this), pureEventName, isDelegate);\n                }\n            });\n        }\n\n        $.fn.bindFirst = function()\n        {\n            var args = $.makeArray(arguments);\n            var eventsString = args.shift();\n\n            if (eventsString) {\n                $.fn.bind.apply(this, arguments);\n                moveEventHandlers(this, eventsString);\n            }\n\n            return this;\n        };\n\n    })($);\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.UpperCaseField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.UpperCaseField.prototype\n     */\n    {\n\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"uppercase\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            var self = this;\n\n            this.base();\n\n            if (this.data) {\n                this.data = this.data.toUpperCase();\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setValue\n         */\n        setValue: function(val)\n        {\n            if (!val) {\n                return this.base(val);\n            }\n\n            var upperValue = null;\n            if (val && Alpaca.isString(val)) {\n                upperValue = val.toUpperCase();\n            }\n\n            if (upperValue != this.getValue()) // jshint ignore:line\n            {\n                this.base(upperValue);\n            }\n        },\n\n        /**\n         * @see Alpaca.ControlField#onKeyPress\n         */\n        onKeyPress: function(e)\n        {\n            this.base(e);\n\n            var _this = this;\n\n            Alpaca.later(25, this, function() {\n                var v = _this.getValue();\n                _this.setValue(v);\n            });\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Uppercase Text\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Text field for uppercase text.\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerFieldClass(\"uppercase\", Alpaca.Fields.UpperCaseField);\n    Alpaca.registerDefaultFormatFieldMapping(\"uppercase\", \"uppercase\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.URLField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.URLField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"url\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            // default html5 input type = \"url\";\n            this.inputType = \"url\";\n\n            this.base();\n\n            if (typeof(this.options.allowIntranet) === \"undefined\")\n            {\n                this.options.allowIntranet = false;\n            }\n\n            if (this.options.allowIntranet)\n            {\n                this.schema.pattern = Alpaca.regexps[\"intranet-url\"];\n            }\n            else\n            {\n                this.schema.pattern = Alpaca.regexps.url;\n            }\n            this.schema.format = \"uri\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function() {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            if (!valInfo[\"invalidPattern\"][\"status\"]) {\n\n                valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidURLFormat\");\n            }\n\n            return baseStatus;\n        }\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"allowIntranet\": {\n                        \"title\": \"Allow intranet\",\n                        \"description\": \"Allows URLs with unqualified hostnames\"\n                    }\n                }\n            });\n\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"allowIntranet\": {\n                        \"type\": \"checkbox\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"URL Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Provides a text control with validation for an internet web address.\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerMessages({\n        \"invalidURLFormat\": \"The URL provided is not a valid web address.\"\n    });\n    Alpaca.registerFieldClass(\"url\", Alpaca.Fields.URLField);\n    Alpaca.registerDefaultFormatFieldMapping(\"url\", \"url\");\n\n})(jQuery);\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.Fields.ZipcodeField = Alpaca.Fields.TextField.extend(\n    /**\n     * @lends Alpaca.Fields.ZipcodeField.prototype\n     */\n    {\n        /**\n         * @see Alpaca.Fields.TextField#getFieldType\n         */\n        getFieldType: function() {\n            return \"zipcode\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#setup\n         */\n        setup: function()\n        {\n            this.base();\n\n            this.options.format = (this.options.format ? this.options.format : \"nine\");\n\n            if (this.options.format === \"nine\")\n            {\n                this.schema.pattern = Alpaca.regexps[\"zipcode-nine\"];\n            }\n            else if (this.options.format === \"five\")\n            {\n                this.schema.pattern = Alpaca.regexps[\"zipcode-five\"];\n            }\n            else\n            {\n                Alpaca.logError(\"The configured zipcode format: \" + this.options.format + \" is not a legal value [five, nine]\");\n\n                // default to nine format\n                this.options.format = \"nine\";\n                this.schema.pattern = Alpaca.regexps[\"zipcode-nine\"];\n            }\n\n            // set mask string\n            if (this.options.format === \"nine\")\n            {\n                this.options[\"maskString\"] = \"99999-9999\";\n            }\n            else if (this.options.format === \"five\")\n            {\n                this.options[\"maskString\"] = \"99999\";\n            }\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#handleValidate\n         */\n        handleValidate: function()\n        {\n            var baseStatus = this.base();\n\n            var valInfo = this.validation;\n\n            if (!valInfo[\"invalidPattern\"][\"status\"]) {\n\n                if (this.options.format === \"nine\")\n                {\n                    valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidZipcodeFormatNine\");\n                }\n                else if (this.options.format === \"five\")\n                {\n                    valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidZipcodeFormatFive\");\n                }\n            }\n\n            return baseStatus;\n        }\n\n\n\n        /* builder_helpers */\n        ,\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getSchemaOfOptions\n         */\n        getSchemaOfOptions: function() {\n\n            return Alpaca.merge(this.base(), {\n                \"properties\": {\n                    \"format\": {\n                        \"title\": \"Format\",\n                        \"description\": \"How to represent the zipcode field\",\n                        \"type\": \"string\",\n                        \"default\": \"five\",\n                        \"enum\":[\"five\", \"nine\"],\n                        \"readonly\": true\n                    }\n                }\n            });\n\n        },\n\n        /**\n         * @private\n         * @see Alpaca.Fields.TextField#getOptionsForOptions\n         */\n        getOptionsForOptions: function() {\n            return Alpaca.merge(this.base(), {\n                \"fields\": {\n                    \"format\": {\n                        \"type\": \"text\"\n                    }\n                }\n            });\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getTitle\n         */\n        getTitle: function() {\n            return \"Zipcode Field\";\n        },\n\n        /**\n         * @see Alpaca.Fields.TextField#getDescription\n         */\n        getDescription: function() {\n            return \"Provides a five or nine-digital US zipcode control with validation.\";\n        }\n\n        /* end_builder_helpers */\n    });\n\n    Alpaca.registerMessages({\n        \"invalidZipcodeFormatFive\": \"Invalid Five-Digit Zipcode (#####)\",\n        \"invalidZipcodeFormatNine\": \"Invalid Nine-Digit Zipcode (#####-####)\"\n    });\n    Alpaca.registerFieldClass(\"zipcode\", Alpaca.Fields.ZipcodeField);\n    Alpaca.registerDefaultFormatFieldMapping(\"zipcode\", \"zipcode\");\n\n})(jQuery);\n\n/**\n * Defines the base class implementation for views.  All views in Alpaca ultimately extend this form.\n * This provides the ideal place for any global overrides of view templates, message bundles or other settings.\n */\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.registerView({\n        \"id\": \"base\",\n        \"title\": \"Abstract base view\",\n        \"messages\": {\n            \"countries\": {\n                \"afg\":\"Afghanistan\",\n                \"ala\":\"Aland Islands\",\n                \"alb\":\"Albania\",\n                \"dza\":\"Algeria\",\n                \"asm\":\"American Samoa\",\n                \"and\":\"Andorra\",\n                \"ago\":\"Angola\",\n                \"aia\":\"Anguilla\",\n                \"ata\":\"Antarctica\",\n                \"atg\":\"Antigua and Barbuda\",\n                \"arg\":\"Argentina\",\n                \"arm\":\"Armenia\",\n                \"abw\":\"Aruba\",\n                \"aus\":\"Australia\",\n                \"aut\":\"Austria\",\n                \"aze\":\"Azerbaijan\",\n                \"bhs\":\"Bahamas\",\n                \"bhr\":\"Bahrain\",\n                \"bgd\":\"Bangladesh\",\n                \"brb\":\"Barbados\",\n                \"blr\":\"Belarus\",\n                \"bel\":\"Belgium\",\n                \"blz\":\"Belize\",\n                \"ben\":\"Benin\",\n                \"bmu\":\"Bermuda\",\n                \"btn\":\"Bhutan\",\n                \"bol\":\"Bolivia\",\n                \"bih\":\"Bosnia and Herzegovina\",\n                \"bwa\":\"Botswana\",\n                \"bvt\":\"Bouvet Island\",\n                \"bra\":\"Brazil\",\n                \"iot\":\"British Indian Ocean Territory\",\n                \"brn\":\"Brunei Darussalam\",\n                \"bgr\":\"Bulgaria\",\n                \"bfa\":\"Burkina Faso\",\n                \"bdi\":\"Burundi\",\n                \"khm\":\"Cambodia\",\n                \"cmr\":\"Cameroon\",\n                \"can\":\"Canada\",\n                \"cpv\":\"Cape Verde\",\n                \"cym\":\"Cayman Islands\",\n                \"caf\":\"Central African Republic\",\n                \"tcd\":\"Chad\",\n                \"chl\":\"Chile\",\n                \"chn\":\"China\",\n                \"cxr\":\"Christmas Island\",\n                \"cck\":\"Cocos (Keeling), Islands\",\n                \"col\":\"Colombia\",\n                \"com\":\"Comoros\",\n                \"cog\":\"Congo\",\n                \"cod\":\"Congo, the Democratic Republic of the\",\n                \"cok\":\"Cook Islands\",\n                \"cri\":\"Costa Rica\",\n                \"hrv\":\"Croatia\",\n                \"cub\":\"Cuba\",\n                \"cyp\":\"Cyprus\",\n                \"cze\":\"Czech Republic\",\n                \"civ\":\"Cote d'Ivoire\",\n                \"dnk\":\"Denmark\",\n                \"dji\":\"Djibouti\",\n                \"dma\":\"Dominica\",\n                \"dom\":\"Dominican Republic\",\n                \"ecu\":\"Ecuador\",\n                \"egy\":\"Egypt\",\n                \"slv\":\"El Salvador\",\n                \"gnq\":\"Equatorial Guinea\",\n                \"eri\":\"Eritrea\",\n                \"est\":\"Estonia\",\n                \"eth\":\"Ethiopia\",\n                \"flk\":\"Falkland Islands (Malvinas),\",\n                \"fro\":\"Faroe Islands\",\n                \"fji\":\"Fiji\",\n                \"fin\":\"Finland\",\n                \"fra\":\"France\",\n                \"guf\":\"French Guiana\",\n                \"pyf\":\"French Polynesia\",\n                \"atf\":\"French Southern Territories\",\n                \"gab\":\"Gabon\",\n                \"gmb\":\"Gambia\",\n                \"geo\":\"Georgia\",\n                \"deu\":\"Germany\",\n                \"gha\":\"Ghana\",\n                \"gib\":\"Gibraltar\",\n                \"grc\":\"Greece\",\n                \"grl\":\"Greenland\",\n                \"grd\":\"Grenada\",\n                \"glp\":\"Guadeloupe\",\n                \"gum\":\"Guam\",\n                \"gtm\":\"Guatemala\",\n                \"ggy\":\"Guernsey\",\n                \"gin\":\"Guinea\",\n                \"gnb\":\"Guinea-Bissau\",\n                \"guy\":\"Guyana\",\n                \"hti\":\"Haiti\",\n                \"hmd\":\"Heard Island and McDonald Islands\",\n                \"vat\":\"Holy See (Vatican City State),\",\n                \"hnd\":\"Honduras\",\n                \"hkg\":\"Hong Kong\",\n                \"hun\":\"Hungary\",\n                \"isl\":\"Iceland\",\n                \"ind\":\"India\",\n                \"idn\":\"Indonesia\",\n                \"irn\":\"Iran, Islamic Republic of\",\n                \"irq\":\"Iraq\",\n                \"irl\":\"Ireland\",\n                \"imn\":\"Isle of Man\",\n                \"isr\":\"Israel\",\n                \"ita\":\"Italy\",\n                \"jam\":\"Jamaica\",\n                \"jpn\":\"Japan\",\n                \"jey\":\"Jersey\",\n                \"jor\":\"Jordan\",\n                \"kaz\":\"Kazakhstan\",\n                \"ken\":\"Kenya\",\n                \"kir\":\"Kiribati\",\n                \"prk\":\"Korea, Democratic People's Republic of\",\n                \"kor\":\"Korea, Republic of\",\n                \"kwt\":\"Kuwait\",\n                \"kgz\":\"Kyrgyzstan\",\n                \"lao\":\"Lao People's Democratic Republic\",\n                \"lva\":\"Latvia\",\n                \"lbn\":\"Lebanon\",\n                \"lso\":\"Lesotho\",\n                \"lbr\":\"Liberia\",\n                \"lby\":\"Libyan Arab Jamahiriya\",\n                \"lie\":\"Liechtenstein\",\n                \"ltu\":\"Lithuania\",\n                \"lux\":\"Luxembourg\",\n                \"mac\":\"Macao\",\n                \"mkd\":\"Macedonia, the former Yugoslav Republic of\",\n                \"mdg\":\"Madagascar\",\n                \"mwi\":\"Malawi\",\n                \"mys\":\"Malaysia\",\n                \"mdv\":\"Maldives\",\n                \"mli\":\"Mali\",\n                \"mlt\":\"Malta\",\n                \"mhl\":\"Marshall Islands\",\n                \"mtq\":\"Martinique\",\n                \"mrt\":\"Mauritania\",\n                \"mus\":\"Mauritius\",\n                \"myt\":\"Mayotte\",\n                \"mex\":\"Mexico\",\n                \"fsm\":\"Micronesia, Federated States of\",\n                \"mda\":\"Moldova, Republic of\",\n                \"mco\":\"Monaco\",\n                \"mng\":\"Mongolia\",\n                \"mne\":\"Montenegro\",\n                \"msr\":\"Montserrat\",\n                \"mar\":\"Morocco\",\n                \"moz\":\"Mozambique\",\n                \"mmr\":\"Myanmar\",\n                \"nam\":\"Namibia\",\n                \"nru\":\"Nauru\",\n                \"npl\":\"Nepal\",\n                \"nld\":\"Netherlands\",\n                \"ant\":\"Netherlands Antilles\",\n                \"ncl\":\"New Caledonia\",\n                \"nzl\":\"New Zealand\",\n                \"nic\":\"Nicaragua\",\n                \"ner\":\"Niger\",\n                \"nga\":\"Nigeria\",\n                \"niu\":\"Niue\",\n                \"nfk\":\"Norfolk Island\",\n                \"mnp\":\"Northern Mariana Islands\",\n                \"nor\":\"Norway\",\n                \"omn\":\"Oman\",\n                \"pak\":\"Pakistan\",\n                \"plw\":\"Palau\",\n                \"pse\":\"Palestinian Territory, Occupied\",\n                \"pan\":\"Panama\",\n                \"png\":\"Papua New Guinea\",\n                \"pry\":\"Paraguay\",\n                \"per\":\"Peru\",\n                \"phl\":\"Philippines\",\n                \"pcn\":\"Pitcairn\",\n                \"pol\":\"Poland\",\n                \"prt\":\"Portugal\",\n                \"pri\":\"Puerto Rico\",\n                \"qat\":\"Qatar\",\n                \"rou\":\"Romania\",\n                \"rus\":\"Russian Federation\",\n                \"rwa\":\"Rwanda\",\n                \"reu\":\"Reunion\",\n                \"blm\":\"Saint Barthelemy\",\n                \"shn\":\"Saint Helena\",\n                \"kna\":\"Saint Kitts and Nevis\",\n                \"lca\":\"Saint Lucia\",\n                \"maf\":\"Saint Martin (French part)\",\n                \"spm\":\"Saint Pierre and Miquelon\",\n                \"vct\":\"Saint Vincent and the Grenadines\",\n                \"wsm\":\"Samoa\",\n                \"smr\":\"San Marino\",\n                \"stp\":\"Sao Tome and Principe\",\n                \"sau\":\"Saudi Arabia\",\n                \"sen\":\"Senegal\",\n                \"srb\":\"Serbia\",\n                \"syc\":\"Seychelles\",\n                \"sle\":\"Sierra Leone\",\n                \"sgp\":\"Singapore\",\n                \"svk\":\"Slovakia\",\n                \"svn\":\"Slovenia\",\n                \"slb\":\"Solomon Islands\",\n                \"som\":\"Somalia\",\n                \"zaf\":\"South Africa\",\n                \"sgs\":\"South Georgia and the South Sandwich Islands\",\n                \"esp\":\"Spain\",\n                \"lka\":\"Sri Lanka\",\n                \"sdn\":\"Sudan\",\n                \"sur\":\"Suriname\",\n                \"sjm\":\"Svalbard and Jan Mayen\",\n                \"swz\":\"Swaziland\",\n                \"swe\":\"Sweden\",\n                \"che\":\"Switzerland\",\n                \"syr\":\"Syrian Arab Republic\",\n                \"twn\":\"Taiwan, Province of China\",\n                \"tjk\":\"Tajikistan\",\n                \"tza\":\"Tanzania, United Republic of\",\n                \"tha\":\"Thailand\",\n                \"tls\":\"Timor-Leste\",\n                \"tgo\":\"Togo\",\n                \"tkl\":\"Tokelau\",\n                \"ton\":\"Tonga\",\n                \"tto\":\"Trinidad and Tobago\",\n                \"tun\":\"Tunisia\",\n                \"tur\":\"Turkey\",\n                \"tkm\":\"Turkmenistan\",\n                \"tca\":\"Turks and Caicos Islands\",\n                \"tuv\":\"Tuvalu\",\n                \"uga\":\"Uganda\",\n                \"ukr\":\"Ukraine\",\n                \"are\":\"United Arab Emirates\",\n                \"gbr\":\"United Kingdom\",\n                \"usa\":\"United States\",\n                \"umi\":\"United States Minor Outlying Islands\",\n                \"ury\":\"Uruguay\",\n                \"uzb\":\"Uzbekistan\",\n                \"vut\":\"Vanuatu\",\n                \"ven\":\"Venezuela\",\n                \"vnm\":\"Viet Nam\",\n                \"vgb\":\"Virgin Islands, British\",\n                \"vir\":\"Virgin Islands, U.S.\",\n                \"wlf\":\"Wallis and Futuna\",\n                \"esh\":\"Western Sahara\",\n                \"yem\":\"Yemen\",\n                \"zmb\":\"Zambia\",\n                \"zwe\":\"Zimbabwe\"\n            },\n            \"empty\": \"\",\n            \"required\": \"This field is required\",\n            \"valid\": \"\",\n            \"invalid\": \"This field is invalid\",\n            \"months\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n            \"timeUnits\": { SECOND: \"seconds\", MINUTE: \"minutes\", HOUR: \"hours\", DAY: \"days\", MONTH: \"months\", YEAR: \"years\" }\n        }\n    });\n\n})(jQuery);\n(function($) {\n\n\t// czech - czech republic\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n\t\t\t\"cs_CZ\": {\n\t\t\t\trequired: \"Toto pole je vyžadováno\",\n\t\t\t\tinvalid: \"Toto pole je neplatné\",\n\t\t\t\tmonths: [\"Leden\", \"Únor\", \"Březen\", \"Duben\", \"Květen\", \"Červen\", \"Červenec\", \"Srpen\", \"Září\", \"Říjen\", \"Listopad\", \"Prosinec\"],\n\t\t\t\ttimeUnits: {\n\t\t\t\t\tSECOND: \"sekundy\",\n\t\t\t\t\tMINUTE: \"minuty\",\n\t\t\t\t\tHOUR: \"hodiny\",\n\t\t\t\t\tDAY: \"dny\",\n\t\t\t\t\tMONTH: \"měsíce\",\n\t\t\t\t\tYEAR: \"roky\"\n\t\t\t\t},\n\t\t\t\t// ControlField.js\n\t\t\t\t\"invalidValueOfEnum\": \"Toto pole musí obsahovat jednu hodnotu z {0}. Aktuální hodnota je: {1}\",\n\n\t\t\t\t// Field.js\n\t\t\t\t\"notOptional\": \"Toto pole není volitelné\",\n\t\t\t\t\"disallowValue\": \"{0} jsou zakázané hodnoty.\",\n\n\t\t\t\t// fields/basic/ArrayField.js\n\t\t\t\t\"notEnoughItems\": \"Minimální počet položek je {0}\",\n\t\t\t\t\"tooManyItems\": \"Maximální počet položek je {0}\",\n\t\t\t\t\"valueNotUnique\": \"Hodnoty nejsou unikátní\",\n\t\t\t\t\"notAnArray\": \"Tato hodnota není pole\",\n\t\t\t\t\"addItemButtonLabel\": \"Přidat novou položku\",\n\t\t\t\t\"addButtonLabel\": \"Přidat\",\n\t\t\t\t\"removeButtonLabel\": \"Odebrat\",\n\t\t\t\t\"upButtonLabel\": \"Nahoru\",\n\t\t\t\t\"downButtonLabel\": \"Dolů\",\n\n\t\t\t\t// fields/basic/ListField.js\n\t\t\t\t\"noneLabel\": \"Žádný\",\n\n\t\t\t\t// fields/basic/NumberField.js\n\t\t\t\t\"stringValueTooSmall\": \"Minimální hodnota tohoto pole je {0}\",\n\t\t\t\t\"stringValueTooLarge\": \"Maximální hodnota tohoto pole je {0}\",\n\t\t\t\t\"stringValueTooSmallExclusive\": \"Hodnota tohoto pole musí být větší než {0}\",\n\t\t\t\t\"stringValueTooLargeExclusive\": \"Hodnota tohoto pole musí být menší než {0}\",\n\t\t\t\t\"stringDivisibleBy\": \"Hodnota musí být dělitelná {0}\",\n\t\t\t\t\"stringNotANumber\": \"Hodnota není číslo.\",\n\t\t\t\t\"stringValueNotMultipleOf\": \"Číslo není násobkem {0}\",\n\n\t\t\t\t// fields/basic/ObjectField.js\n\t\t\t\t\"tooManyProperties\": \"Maximální počet vlastností ({0}) byl překročen.\",\n\t\t\t\t\"tooFewProperties\": \"Není dostatek vlastností (je požadováno {0})\",\n\n\t\t\t\t// fields/basic/TextAreaField.js\n\t\t\t\t\"wordLimitExceeded\": \"Maximální počet slov ({0}) byl překročen.\",\n\n\t\t\t\t// fields/basic/TextField.js\n\t\t\t\t\"invalidPattern\": \"Toto pole má mít vzor {0}\",\n\t\t\t\t\"stringTooShort\": \"Toto pole musí obsahovat nejmeně {0} znaků\",\n\t\t\t\t\"stringTooLong\": \"Toto pole musí obsahovat maximálně {0} znaků\",\n\n\t\t\t\t// fields/advanced/DateField.js\n\t\t\t\t\"invalidDate\": \"Nesprávné datum pro formát {0}\",\n\n\t\t\t\t// fields/advaned/EditorField.js\n\t\t\t\t\"editorAnnotationsExist\": \"Editor má v sobě chyby, které musí být opraveny\",\n\n\t\t\t\t// fields/advanced/EmailField.js\n\t\t\t\t\"invalidEmail\": \"Chybná e-mailová adresa, př.: info@cloudcms.com\",\n\n\t\t\t\t// fields/advanced.IntegerField.js\n\t\t\t\t\"stringNotAnInteger\": \"Tato hodnota není číslo.\",\n\n\t\t\t\t// fields/advanced/IPv4Field.js\n\t\t\t\t\"invalidIPv4\": \"Chybná IPv4 adresa, ex: 192.168.0.1\",\n\n\t\t\t\t// fields/advanced/JSONField.js\n\t\t\t\t\"stringNotAJSON\": \"Tato hodnota není platný JSON text.\",\n\n\t\t\t\t// fields/advanced/MapField.js\n\t\t\t\t\"keyMissing\": \"Mapa obsahuje prázdný klíč.\",\n\t\t\t\t\"keyNotUnique\": \"Klíče nejsou jedinečné.\",\n\n\t\t\t\t// fields/advanced/PasswordField.js\n\t\t\t\t\"invalidPassword\": \"Špatné heslo\",\n\n\t\t\t\t// fields/advanced/PasswordField.js\n\t\t\t\t\"invalidPhone\": \"Špatné telefonní číslo, př.: (123) 456-9999\", // TODO: invalid pattern for czech locale\n\n\t\t\t\t// fields/advanced/UploadField.js\n\t\t\t\t\"chooseFile\": \"Vyberte soubor...\",\n\t\t\t\t\"chooseFiles\": \"Vyberte soubory...\",\n\t\t\t\t\"dropZoneSingle\": \"Vyberte soubor nebo jej přetáhněte sem pro nahrání...\",\n\t\t\t\t\"dropZoneMultiple\": \"Vyberte soubory nebo je přetáhněte sem pro nahrání...\",\n\n\t\t\t\t// fields/advanced/URLField.js\n\t\t\t\t\"invalidURLFormat\": \"Uvedená URL není platna webová adresa.\",\n\n\t\t\t\t// fields/advanced/CipcodeField.js\n\t\t\t\t\"invalidZipcodeFormatFive\": \"Chybné poštovní směrovací číslo (#####)\",\n\t\t\t\t\"invalidZipcodeFormatNine\": \"Chybné devíti-místné poštovní směrovací číslo (#####-####)\"\n\t\t\t}\n        }\n\t});\n\n})(jQuery);\n\n(function($) {\n\n\t// german - austria\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n            \"de_AT\": {\n                required: \"Eingabe erforderlich\",\n                invalid: \"Eingabe invalid\",\n                months: [\"Jänner\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"],\n                timeUnits: {\n                    SECOND: \"Sekunden\",\n                    MINUTE: \"Minuten\",\n                    HOUR: \"Stunden\",\n                    DAY: \"Tage\",\n                    MONTH: \"Monate\",\n                    YEAR: \"Jahre\"\n                },\n                \"notOptional\": \"Dieses Feld ist nicht optional\",\n                \"disallowValue\": \"Diese Werte sind nicht erlaubt: {0}\",\n                \"invalidValueOfEnum\": \"Diese Feld sollte einen der folgenden Werte enthalten: {0}. [{1}]\",\n                \"notEnoughItems\": \"Die Mindestanzahl von Elementen ist {0}\",\n                \"tooManyItems\": \"Die Maximalanzahl von Elementen ist {0}\",\n                \"valueNotUnique\": \"Diese Werte sind nicht eindeutig\",\n                \"notAnArray\": \"Keine Liste von Werten\",\n                \"invalidDate\": \"Falsches Datumsformat: {0}\",\n                \"invalidEmail\": \"Ungültige e-Mail Adresse, z.B.: info@cloudcms.com\",\n                \"stringNotAnInteger\": \"Eingabe ist keine Ganz Zahl.\",\n                \"invalidIPv4\": \"Ungültige IPv4 Adresse, z.B.: 192.168.0.1\",\n                \"stringValueTooSmall\": \"Die Mindestanzahl von Zeichen ist {0}\",\n                \"stringValueTooLarge\": \"Die Maximalanzahl von Zeichen ist {0}\",\n                \"stringValueTooSmallExclusive\": \"Die Anzahl der Zeichen muss größer sein als {0}\",\n                \"stringValueTooLargeExclusive\": \"Die Anzahl der Zeichen muss kleiner sein als {0}\",\n                \"stringDivisibleBy\": \"Der Wert muss durch {0} dividierbar sein\",\n                \"stringNotANumber\": \"Die Eingabe ist keine Zahl\",\n                \"invalidPassword\": \"Ungültiges Passwort.\",\n                \"invalidPhone\": \"Ungültige Telefonnummer, z.B.: (123) 456-9999\",\n                \"invalidPattern\": \"Diese Feld stimmt nicht mit folgender Vorgabe überein {0}\",\n                \"stringTooShort\": \"Dieses Feld sollte mindestens {0} Zeichen enthalten\",\n                \"stringTooLong\": \"Dieses Feld sollte höchstens {0} Zeichen enthalten\"\n            }\n\t\t}\n\t});\n\n})(jQuery);\n\n(function($) {\n\n\t// german - germany\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n            \"de_DE\": {\n                required: \"Eingabe erforderlich\",\n                invalid: \"Eingabe ungültig\",\n                months: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"],\n                timeUnits: {\n                    SECOND: \"Sekunden\",\n                    MINUTE: \"Minuten\",\n                    HOUR: \"Stunden\",\n                    DAY: \"Tage\",\n                    MONTH: \"Monate\",\n                    YEAR: \"Jahre\"\n                },\n                \"notOptional\": \"Dieses Feld ist nicht optional\",\n                \"disallowValue\": \"Diese Werte sind nicht erlaubt: {0}\",\n                \"invalidValueOfEnum\": \"Diese Feld sollte einen der folgenden Werte enthalten: {0}. [{1}]\",\n                \"notEnoughItems\": \"Die Mindestanzahl von Elementen ist {0}\",\n                \"tooManyItems\": \"Die Maximalanzahl von Elementen ist {0}\",\n                \"valueNotUnique\": \"Diese Werte sind nicht eindeutig\",\n                \"notAnArray\": \"Keine Liste von Werten\",\n                \"invalidDate\": \"Falsches Datumsformat: {0}\",\n                \"invalidEmail\": \"Keine gültige E-Mail Adresse\",\n                \"stringNotAnInteger\": \"Keine Ganze Zahl\",\n                \"invalidIPv4\": \"Ungültige IPv4 Adresse\",\n                \"stringValueTooSmall\": \"Die Mindestanzahl von Zeichen ist {0}\",\n                \"stringValueTooLarge\": \"Die Maximalanzahl von Zeichen ist {0}\",\n                \"stringValueTooSmallExclusive\": \"Die Anzahl der Zeichen muss größer sein als {0}\",\n                \"stringValueTooLargeExclusive\": \"Die Anzahl der Zeichen muss kleiner sein als {0}\",\n                \"stringDivisibleBy\": \"Der Wert muss durch {0} dividierbar sein\",\n                \"stringNotANumber\": \"Die Eingabe ist keine Zahl\",\n                \"invalidPassword\": \"Ungültiges Passwort\",\n                \"invalidPhone\": \"Ungültige Telefonnummer\",\n                \"invalidPattern\": \"Diese Feld stimmt nicht mit folgender Vorgabe überein {0}\",\n                \"stringTooShort\": \"Dieses Feld sollte mindestens {0} Zeichen enthalten\",\n                \"stringTooLong\": \"Dieses Feld sollte höchstens {0} Zeichen enthalten\"\n            }\n\t\t}\n\t});\n\n})(jQuery);\n\n(function($) {\n\n\t// spanish - spain\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n\t\t\t\"es_ES\": {\n\t\t\t\trequired: \"Este campo es obligatorio\",\n\t\t\t\tinvalid: \"Este campo es inválido\",\n\t\t\t\tmonths: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"],\n\t\t\t\ttimeUnits: {\n\t\t\t\t\tSECOND: \"segundos\",\n\t\t\t\t\tMINUTE: \"minutos\",\n\t\t\t\t\tHOUR: \"horas\",\n\t\t\t\t\tDAY: \"días\",\n\t\t\t\t\tMONTH: \"meses\",\n\t\t\t\t\tYEAR: \"años\"\n\t\t\t\t},\n\t\t\t\t\"notOptional\": \"Este campo no es opcional.\",\n\t\t\t\t\"disallowValue\": \"{0} son los valores rechazados.\",\n\t\t\t\t\"invalidValueOfEnum\": \"Este campo debe tener uno de los valores adentro {0}. [{1}]\",\n\t\t\t\t\"notEnoughItems\": \"El número mínimo de artículos es {0}\",\n\t\t\t\t\"tooManyItems\": \"El número máximo de artículos es {0}\",\n\t\t\t\t\"valueNotUnique\": \"Los valores no son únicos\",\n\t\t\t\t\"notAnArray\": \"Este valor no es un arsenal\",\n\t\t\t\t\"invalidDate\": \"Fecha inválida para el formato {0}\",\n\t\t\t\t\"invalidEmail\": \"Email address inválido, ex: info@cloudcms.com\",\n\t\t\t\t\"stringNotAnInteger\": \"Este valor no es un número entero.\",\n\t\t\t\t\"invalidIPv4\": \"Dirección inválida IPv4, ex: 192.168.0.1\",\n\t\t\t\t\"stringValueTooSmall\": \"El valor mínimo para este campo es {0}\",\n\t\t\t\t\"stringValueTooLarge\": \"El valor máximo para este campo es {0}\",\n\t\t\t\t\"stringValueTooSmallExclusive\": \"El valor de este campo debe ser mayor que {0}\",\n\t\t\t\t\"stringValueTooLargeExclusive\": \"El valor de este campo debe ser menos que {0}\",\n\t\t\t\t\"stringDivisibleBy\": \"El valor debe ser divisible cerca {0}\",\n\t\t\t\t\"stringNotANumber\": \"Este valor no es un número.\",\n\t\t\t\t\"invalidPassword\": \"Contraseña inválida\",\n\t\t\t\t\"invalidPhone\": \"Número de teléfono inválido, ex: (123) 456-9999\",\n\t\t\t\t\"invalidPattern\": \"Este campo debe tener patrón {0}\",\n\t\t\t\t\"stringTooShort\": \"Este campo debe contener por lo menos {0} números o caracteres\",\n\t\t\t\t\"stringTooLong\": \"Este campo debe contener a lo más {0} números o caracteres\",\n\t\t\t\t\"noneLabel\": \"Ninguno\",\n\t\t\t\t\"addItemButtonLabel\": \"Añadir\",\n\t\t\t\t\"addButtonLabel\": \"Añadir\",\n\t\t\t\t\"removeButtonLabel\": \"Quitar\",\n\t\t\t\t\"upButtonLabel\": \"Arriba\",\n\t\t\t\t\"downButtonLabel\": \"Abajo\"\n\t\t\t}\n        }\n\t});\n\n})(jQuery);\n\n(function($) {\n\n\t// finnish - finland\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n            \"fi_FI\": {\n                required: \"Kenttä on pakollinen\",\n                invalid: \"Syöte on virheellinen\",\n                months: [\"Tammikuu\", \"Helmikuu\", \"Maaliskuu\", \"Huhtikuu\", \"Toukokuu\", \"Kesäkuu\", \"Heinäkuu\", \"Elokuu\", \"Syyskuu\", \"Lokakuu\", \"Marraskuu\", \"Joulukuu\"],\n                timeUnits: {\n                    SECOND: \"sekuntia\",\n                    MINUTE: \"minuuttia\",\n                    HOUR: \"tuntia\",\n                    DAY: \"päivää\",\n                    MONTH: \"kuukautta\",\n                    YEAR: \"vuotta\"\n                },\n                \"notOptional\": \"Tämä kenttä on pakollinen\",\n                \"disallowValue\": \"Seuraavat syötteet eivät ole sallittuja: {0}\",\n                \"invalidValueOfEnum\": \"Kentän pitää sisältää yksi seuraavista arvoista: {0}. [{1}]\",\n                \"notEnoughItems\": \"Pienin sallittu määrä arvoja on {0}\",\n                \"tooManyItems\": \"Suurin sallittu määrä arvoja on {0}\",\n                \"valueNotUnique\": \"Syötetyt arvot eivät ole uniikkeja\",\n                \"notAnArray\": \"Syöte ei ole lista\",\n                \"invalidDate\": \"Virheellinen päivämäärämuoto: {0}\",\n                \"invalidEmail\": \"Virheellinen sähköpostiosoite\",\n                \"stringNotAnInteger\": \"Arvo ei ole kokonaisluku\",\n                \"invalidIPv4\": \"Virheellinen IPv4-osoite\",\n                \"stringValueTooSmall\": \"Pienin sallittu arvo on {0}\",\n                \"stringValueTooLarge\": \"Suurin sallittu arvo on {0}\",\n                \"stringValueTooSmallExclusive\": \"Arvon pitää olla suurempi kuin {0}\",\n                \"stringValueTooLargeExclusive\": \"Arvon pitää olla pienempi kuin {0}\",\n                \"stringDivisibleBy\": \"Luvun pitää olla jaollinen luvulla {0}\",\n                \"stringNotANumber\": \"Syöte ei ole luku\",\n                \"invalidPassword\": \"Virheellinen salasana\",\n                \"invalidPhone\": \"Virheellinen puhelinnumero\",\n                \"invalidPattern\": \"Syötteen täytyy olla seuraavassa muodossa: {0}\",\n                \"stringTooShort\": \"Syötteen minimipituus on {0} merkkiä\",\n                \"stringTooLong\": \"Syötteen maksimipituus on {0} merkkiä\"\n            }\n\t\t}\n\t});\n\n})(jQuery);\n\n(function($) {\n\n\t// french - france\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n\t\t\t\"fr_FR\": {\n\t\t\t\trequired: \"Ce champ est requis\",\n\t\t\t\tinvalid: \"Ce champ est invalide\",\n\t\t\t\tmonths: [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Août\", \"Septembre\", \"Octobre\", \"Novembre\", \"Décembre\"],\n\t\t\t\ttimeUnits: {\n\t\t\t\t\tSECOND: \"secondes\",\n\t\t\t\t\tMINUTE: \"minutes\",\n\t\t\t\t\tHOUR: \"heures\",\n\t\t\t\t\tDAY: \"jours\",\n\t\t\t\t\tMONTH: \"mois\",\n\t\t\t\t\tYEAR: \"années\"\n\t\t\t\t},\n\t\t\t\t\"notOptional\": \"Ce champ n'est pas optionnel.\",\n\t\t\t\t\"disallowValue\": \"{0} sont des valeurs interdites.\",\n\t\t\t\t\"invalidValueOfEnum\": \"Ce champ doit prendre une des valeurs suivantes : {0}. [{1}]\",\n\t\t\t\t\"notEnoughItems\": \"Le nombre minimum d'éléments est {0}\",\n\t\t\t\t\"tooManyItems\": \"Le nombre maximum d'éléments est {0}\",\n\t\t\t\t\"valueNotUnique\": \"Les valeurs sont uniques\",\n\t\t\t\t\"notAnArray\": \"Cette valeur n'est pas une liste\",\n\t\t\t\t\"invalidDate\": \"Cette date ne correspond pas au format {0}\",\n\t\t\t\t\"invalidEmail\": \"Adresse de courriel invalide, ex: info@cloudcms.com\",\n\t\t\t\t\"stringNotAnInteger\": \"Cette valeur n'est pas un nombre entier.\",\n\t\t\t\t\"invalidIPv4\": \"Adresse IPv4 invalide, ex: 192.168.0.1\",\n\t\t\t\t\"stringValueTooSmall\": \"La valeur minimale pour ce champ est {0}\",\n\t\t\t\t\"stringValueTooLarge\": \"La valeur maximale pour ce champ est {0}\",\n\t\t\t\t\"stringValueTooSmallExclusive\": \"La valeur doit-être supérieure à {0}\",\n\t\t\t\t\"stringValueTooLargeExclusive\": \"La valeur doit-être inférieure à {0}\",\n\t\t\t\t\"stringDivisibleBy\": \"La valeur doit-être divisible par {0}\",\n\t\t\t\t\"stringNotANumber\": \"Cette valeur n'est pas un nombre.\",\n\t\t\t\t\"invalidPassword\": \"Mot de passe invalide\",\n\t\t\t\t\"invalidPhone\": \"Numéro de téléphone invalide, ex: (123) 456-9999\",\n\t\t\t\t\"invalidPattern\": \"Ce champ doit correspondre au motif {0}\",\n                \"stringTooShort\": \"Ce champ doit contenir au moins {0} caractères\",\n                \"stringTooLong\": \"Ce champ doit contenir au plus {0} caractères\"\n            }\n        }\n    });\n\n})(jQuery);\n\n(function($) {\n\n\t// croatian - croatia\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n\t\t\t\"hr_HR\": {\n\t\t\t\trequired: \"Polje je obavezno\",\n\t\t\t\tinvalid: \"Pogrešna vrijednost\",\n\t\t\t\tmonths: [\"Siječanj\", \"Veljača\", \"Ožujak\", \"Travanj\", \"Svibanj\", \"Lipanj\", \"Srpanj\", \"Kolovoz\", \"Rujan\", \"Listopad\", \"Studeni\", \"Prosinac\"],\n\t\t\t\ttimeUnits: {\n\t\t\t\t\tSECOND: \"sekunda\",\n\t\t\t\t\tMINUTE: \"minuta\",\n\t\t\t\t\tHOUR: \"sati\",\n\t\t\t\t\tDAY: \"dan\",\n\t\t\t\t\tMONTH: \"mjesec\",\n\t\t\t\t\tYEAR: \"godina\"\n\t\t\t\t},\n\t\t\t\t\"notOptional\": \"Polje nije opciono.\",\n\t\t\t\t\"disallowValue\": \"{0} vrijednost nije dozvoljena.\",\n\t\t\t\t\"invalidValueOfEnum\": \"Moguće vrijednosti : {0}. [{1}]\",\n\t\t\t\t\"notEnoughItems\": \"Odaberite najmanje {0}\",\n\t\t\t\t\"tooManyItems\": \"Odaberite najviše {0}\",\n\t\t\t\t\"valueNotUnique\": \"Vrijednost nije jedinstvena\",\n\t\t\t\t\"notAnArray\": \"Vrijednost nije popis\",\n\t\t\t\t\"invalidDate\": \"Datum nije u formatu {0}\",\n\t\t\t\t\"invalidEmail\": \"E-mail adresa nije u ispravnom formatu, npr: ime.prezime@internet.com\",\n\t\t\t\t\"stringNotAnInteger\": \"Vrijednost nije cijeli broj.\",\n\t\t\t\t\"invalidIPv4\": \"IPv4 adresa nije ispravna, npr: 192.168.0.1\",\n\t\t\t\t\"stringValueTooSmall\": \"Vrijednost je ispod dopuštenog {0}\",\n\t\t\t\t\"stringValueTooLarge\": \"Vrijednost je iznad dopuštenog {0}\",\n\t\t\t\t\"stringValueTooSmallExclusive\": \"Vrijednost mora biti veća od {0}\",\n\t\t\t\t\"stringValueTooLargeExclusive\": \"Vrijednost mora biti manja od {0}\",\n\t\t\t\t\"stringDivisibleBy\": \"Vrijednost mora biti djeljiva sa {0}\",\n\t\t\t\t\"stringNotANumber\": \"Vrijednost nije broj.\",\n\t\t\t\t\"invalidPassword\": \"Neispravna lozinka\",\n\t\t\t\t\"invalidPhone\": \"Telefon nije ispravan, npr: (123) 456-9999\",\n\t\t\t\t\"invalidPattern\": \"Pogrešan uzorak {0}\",\n                \"stringTooShort\": \"Polje mora imati namjanje {0} znakova\",\n                \"stringTooLong\": \"Polje mora imati najviše {0} znakova\"\n            }\n        }\n    });\n\n})(jQuery);\n\n(function($) {\n\n\t// italian - italy\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n\t\t\t\"it_IT\": {\n\t\t\t\trequired: \"Questo campo è obbligatorio\",\n\t\t\t\tinvalid: \"Questo campo è invalido\",\n\t\t\t\tmonths: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n\t\t\t\ttimeUnits: {\n\t\t\t\t\tSECOND: \"secondi\",\n\t\t\t\t\tMINUTE: \"minuti\",\n\t\t\t\t\tHOUR: \"ore\",\n\t\t\t\t\tDAY: \"giorni\",\n\t\t\t\t\tMONTH: \"mesi\",\n\t\t\t\t\tYEAR: \"anni\"\n\t\t\t\t},\n\t\t\t\t\"notOptional\": \"Questo campo non è opzionale\",\n\t\t\t\t\"disallowValue\": \"{0} sono valori invalidi\",\n\t\t\t\t\"invalidValueOfEnum\": \"Questo campo deve avere uno dei seguenti valori {0} (valore attuale: {1})\",\n\t\t\t\t\"notEnoughItems\": \"Il numero minimo di elementi richiesti è {0}\",\n\t\t\t\t\"tooManyItems\": \"Il numero massimo di elementi ammessi è {0}\",\n\t\t\t\t\"valueNotUnique\": \"I valori non sono univoci\",\n\t\t\t\t\"notAnArray\": \"Questo valore non è di tipo array\",\n\t\t\t\t\"invalidDate\": \"Data invalida per il formato {0}\",\n\t\t\t\t\"invalidEmail\": \"Indirizzo email invalido, si attendono valori del tipo: info@cloudcms.com\",\n\t\t\t\t\"stringNotAnInteger\": \"Questo valore non è un numero intero\",\n\t\t\t\t\"invalidIPv4\": \"Indirizzo IPv4 invalido, si attendono valori del tipo: 192.168.0.1\",\n\t\t\t\t\"stringValueTooSmall\": \"Il valore minimo per questo campo è {0}\",\n\t\t\t\t\"stringValueTooLarge\": \"Il valore massimo per questo campo è {0}\",\n\t\t\t\t\"stringValueTooSmallExclusive\": \"Il valore di questo campo deve essere maggiore di {0}\",\n\t\t\t\t\"stringValueTooLargeExclusive\": \"Il valore di questo campo deve essere minore di {0}\",\n\t\t\t\t\"stringDivisibleBy\": \"Il valore di questo campo deve essere divisibile per {0}\",\n\t\t\t\t\"stringNotANumber\": \"Questo valore non è un numero\",\n\t\t\t\t\"invalidPassword\": \"Password invalida\",\n\t\t\t\t\"invalidPhone\": \"Numero di telefono invalido, si attendono valori del tipo: (123) 456-9999\",\n\t\t\t\t\"invalidPattern\": \"Questo campo deve avere la seguente struttura: {0}\",\n\t\t\t\t\"stringTooShort\": \"Questo campo non deve contenere meno di {0} caratteri\",\n\t\t\t\t\"stringTooLong\": \"Questo campo non deve contenere più di {0} caratteri\",\n\t\t\t\t\"noneLabel\": \"Nessuno\",\n\t\t\t\t\"addItemButtonLabel\": \"Aggiungi\",\n\t\t\t\t\"addButtonLabel\": \"Aggiungi\",\n\t\t\t\t\"removeButtonLabel\": \"Rimuovi\",\n\t\t\t\t\"upButtonLabel\": \"Su\",\n\t\t\t\t\"downButtonLabel\": \"Giù\"\n\t\t\t}\n\t\t}\n\t});\n\n})(jQuery);\n\n(function($) {\n\n    // japanese - japan\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.registerView ({\n        \"id\": \"base\",\n        \"messages\": {\n            \"ja_JP\": {\n                required: \"この項目は必須です\",\n                invalid: \"この項目は正しい値ではありません\",\n                months: [\"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\"],\n                timeUnits: {\n                    SECOND: \"秒\",\n                    MINUTE: \"分\",\n                    HOUR: \"時\",\n                    DAY: \"日\",\n                    MONTH: \"月\",\n                    YEAR: \"年\"\n                },\n                \"notOptional\": \"この項目は任意の回答項目ではありません\",\n                \"disallowValue\": \"{0} は禁止されている値です\",\n                \"invalidValueOfEnum\": \"この項目は {0} の中から選ばなければなりません。現在の値は {1} です\",\n                \"notEnoughItems\": \"項目数は {0} 以上必要です\",\n                \"tooManyItems\": \"項目数は {0} 以下でなければなりません\",\n                \"valueNotUnique\": \"値が一意ではありません\",\n                \"notAnArray\": \"この項目の値が配列でありません\",\n                \"stringValueTooSmall\": \"この項目の最小値は {0} です\",\n                \"stringValueTooLarge\": \"この項目の最大値は {0} です\",\n                \"stringValueTooSmallExclusive\": \"この項目の値は {0} より小さくなければなりません\",\n                \"stringValueTooLargeExclusive\": \"この項目の値は {0} より大きくなければなりません\",\n                \"stringDivisibleBy\": \"値は {0} によって割り切れなければなりません\",\n                \"stringNotANumber\": \"この項目の値が数値ではありません\",\n                \"stringValueNotMultipleOf\": \"値が {0} の倍数ではありません\",\n                \"stringNotAnInteger\": \"この項目の値が整数ではありません\",\n                \"stringNotAJSON\": \"値が正しい JSON 形式の文字列ではありません\",\n                \"stringTooShort\": \"この項目は {0} 文字以上必要です\",\n                \"stringTooLong\": \"この項目は {0} 文字以下でなければなりません\",\n                \"invalidTime\": \"時間が正しくありません\",\n                \"invalidDate\": \"日付が {0} ではありません\",\n                \"invalidEmail\": \"メールアドレスが正しくありません。例えば info@cloudcms.com のような形式です\",\n                \"invalidIPv4\": \"IPv4 アドレスが正しくありません。例えば 192.168.0.1 のような形式です\",\n                \"invalidPassword\": \"パスワードが正しくありません\",\n                \"invalidPhone\": \"電話番号が正しくありません。例えば (123) 456-9999 のような形式です\",\n                \"invalidPattern\": \"この項目は {0} のパターンでなければなりません\",\n                \"invalidURLFormat\": \"URL が正しい形式ではありません\",\n                \"keyMissing\": \"地図が空のキーを含んでいます\",\n                \"keyNotUnique\": \"地図のキーが一意ではありません\",\n                \"ObjecttooFewProperties\": \"プロパティが足りません ({0} が必要です)\",\n                \"tooManyProperties\": \"プロパティ ({0}) の最大数を超えています\",\n                \"wordLimitExceeded\": \"{0} の単語数の制限を超えています\",\n                \"editorAnnotationsExist\": \"エディタが修正すべきエラーを報告しています\",\n                \"invalidZipcodeFormatFive\": \"5桁の Zipcode (#####) ではありません\",\n                \"invalidZipcodeFormatNine\": \"9桁の Zipcode (#####-####) ではありません\"\n            }\n        }\n    });\n\n})(jQuery);\n\n(function($) {\n\n\t// dutch - belgium\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n\t\t\t\"nl_BE\": {\n\t\t\t\trequired: \"Dit veld is verplicht\",\n\t\t\t\tinvalid: \"Dit veld is ongeldig\",\n\t\t\t\tmonths: [\"Januari\", \"Februari\", \"Maart\", \"April\", \"Mei\", \"Juni\", \"July\", \"Augustus\", \"September\", \"Oktober\", \"November\", \"December\"],\n\t\t\t\ttimeUnits: {\n\t\t\t\t\tSECOND: \"seconden\",\n\t\t\t\t\tMINUTE: \"minuten\",\n\t\t\t\t\tHOUR: \"uren\",\n\t\t\t\t\tDAY: \"dagen\",\n\t\t\t\t\tMONTH: \"maanden\",\n\t\t\t\t\tYEAR: \"jaren\"\n\t\t\t\t},\n\t\t\t\t\"notOptional\": \"Dit veld is niet optioneel.\",\n\t\t\t\t\"disallowValue\": \"{0} zijn verboden waarden.\",\n\t\t\t\t\"invalidValueOfEnum\": \"Dit veld moet één van volgende bevatten : {0}. [{1}]\",\n\t\t\t\t\"notEnoughItems\": \"Het minimum aantal elementen is {0}\",\n\t\t\t\t\"tooManyItems\": \"Het maximum aantal elementen is {0}\",\n\t\t\t\t\"valueNotUnique\": \"De waarden zijn uniek\",\n\t\t\t\t\"notAnArray\": \"Deze waarde is geen lijst\",\n\t\t\t\t\"invalidDate\": \"De datum komt niet overeen met formaat {0}\",\n\t\t\t\t\"invalidEmail\": \"Ongeldig e-mailadres, vb.: info@cloudcms.com\",\n\t\t\t\t\"stringNotAnInteger\": \"Deze waarde is geen geheel getal.\",\n\t\t\t\t\"invalidIPv4\": \"Ongeldig IPv4 adres, vb.: 192.168.0.1\",\n\t\t\t\t\"stringValueTooSmall\": \"De minimale waarde voor dit veld is {0}\",\n\t\t\t\t\"stringValueTooLarge\": \"De maximale waarde voor dit veld is {0}\",\n\t\t\t\t\"stringValueTooSmallExclusive\": \"De waarde moet groter zijn dan {0}\",\n\t\t\t\t\"stringValueTooLargeExclusive\": \"De waarde moet kleiner zijn dan {0}\",\n\t\t\t\t\"stringDivisibleBy\": \"De waarde moet deelbaar zijn door {0}\",\n\t\t\t\t\"stringNotANumber\": \"Deze waarde is geen getal.\",\n\t\t\t\t\"invalidPassword\": \"Ongeldig wachtwoord\",\n\t\t\t\t\"invalidPhone\": \"Ongeldig telefoonnummer, vb: (123) 456-9999\",\n\t\t\t\t\"invalidPattern\": \"Dit veld moet overeenkomen met patroon {0}\",\n                \"stringTooShort\": \"Dit veld moet minstens {0} tekens bevatten\",\n                \"stringTooLong\": \"Dit veld moet minder dan {0} tekens bevatten\"\n            }\n        }\n    });\n\n})(jQuery);\n\n(function($) {\n\n    // polish - poland\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.registerView ({\n        \"id\": \"base\",\n        \"messages\": {\n            \"pl_PL\": {\n                required: \"To pole jest wymagane\",\n                invalid: \"To pole jest nieprawidłowe\",\n                months: [\"Styczeń\", \"Luty\", \"Marzec\", \"Kwiecień\", \"Maj\", \"Czerwiec\", \"Lipiec\", \"Sierpień\", \"Wrzesień\", \"Październik\", \"Listopad\", \"Grudzień\"],\n                timeUnits: {\n                    SECOND: \"sekundy\",\n                    MINUTE: \"minuty\",\n                    HOUR: \"godziny\",\n                    DAY: \"dni\",\n                    MONTH: \"miesiące\",\n                    YEAR: \"lata\"\n                },\n                \"notOptional\": \"To pole nie jest opcjonalne\",\n                \"disallowValue\": \"Ta wartość nie jest dozwolona: {0}\",\n                \"invalidValueOfEnum\": \"To pole powinno zawierać jedną z następujących wartości: {0}. [{1}]\",\n                \"notEnoughItems\": \"Minimalna liczba elementów wynosi {0}\",\n                \"tooManyItems\": \"Maksymalna liczba elementów wynosi {0}\",\n                \"valueNotUnique\": \"Te wartości nie są unikalne\",\n                \"notAnArray\": \"Ta wartość nie jest tablicą\",\n                \"invalidDate\": \"Niepoprawny format daty: {0}\",\n                \"invalidEmail\": \"Niepoprawny adres email, n.p.: info@cloudcms.com\",\n                \"stringNotAnInteger\": \"Ta wartość nie jest liczbą całkowitą\",\n                \"invalidIPv4\": \"Niepoprawny adres IPv4, n.p.: 192.168.0.1\",\n                \"stringValueTooSmall\": \"Minimalna wartość dla tego pola wynosi {0}\",\n                \"stringValueTooLarge\": \"Maksymalna wartość dla tego pola wynosi {0}\",\n                \"stringValueTooSmallExclusive\": \"Wartość dla tego pola musi być większa niż {0}\",\n                \"stringValueTooLargeExclusive\": \"Wartość dla tego pola musi być mniejsza niż {0}\",\n                \"stringDivisibleBy\": \"Wartość musi być podzielna przez {0}\",\n                \"stringNotANumber\": \"Wartość nie jest liczbą\",\n                \"invalidPassword\": \"Niepoprawne hasło\",\n                \"invalidPhone\": \"Niepoprawny numer telefonu, n.p.: (123) 456-9999\",\n                \"invalidPattern\": \"To pole powinno mieć format {0}\",\n                \"stringTooShort\": \"To pole powinno zawierać co najmniej {0} znaków\",\n                \"stringTooLong\": \"To pole powinno zawierać najwyżej {0} znaków\"\n            }\n        }\n    });\n\n})(jQuery);\n(function($) {\n\n    // portuguese - portugal\n\n    var Alpaca = $.alpaca;\n\n    Alpaca.registerView ({\n        \"id\": \"base\",\n        \"messages\": {\n            \"pt_BR\": {\n                required: \"Este campo é obrigatório\",\n                invalid: \"Este campo é inválido\",\n                months: [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"],\n                timeUnits: {\n                    SECOND: \"segundos\",\n                    MINUTE: \"minutos\",\n                    HOUR: \"horas\",\n                    DAY: \"dias\",\n                    MONTH: \"meses\",\n                    YEAR: \"anos\"\n                },\n                \"notOptional\": \"Este campo não é opcional.\",\n                \"disallowValue\": \"{0} são valores proibidas.\",\n                \"invalidValueOfEnum\": \"Este campo deve ter um dos seguintes valores: {0}. [{1}]\",\n                \"notEnoughItems\": \"O número mínimo de elementos é {0}\",\n                \"tooManyItems\": \"O número máximo de elementos é {0}\",\n                \"valueNotUnique\": \"Os valores não são únicos\",\n                \"notAnArray\": \"Este valor não é uma lista\",\n                \"invalidDate\": \"Esta data não tem o formato {0}\",\n                \"invalidEmail\": \"Endereço de email inválida, ex: info@cloudcms.com\",\n                \"stringNotAnInteger\": \"Este valor não é um número inteiro.\",\n                \"invalidIPv4\": \"Endereço IPv4 inválida, ex: 192.168.0.1\",\n                \"stringValueTooSmall\": \"O valor mínimo para este campo é {0}\",\n                \"stringValueTooLarge\": \"O valor máximo para este campo é {0}\",\n                \"stringValueTooSmallExclusive\": \"O valor deste campo deve ser maior que {0}\",\n                \"stringValueTooLargeExclusive\": \"O valor deste campo deve ser menor que {0}\",\n                \"stringDivisibleBy\": \"O valor deve ser divisível por {0}\",\n                \"stringNotANumber\": \"Este valor não é um número.\",\n                \"invalidPassword\": \"Senha inválida\",\n                \"invalidPhone\": \"Número de telefone inválido, ex: (123) 456-9999\",\n                \"invalidPattern\": \"Este campo deve ter o padrão {0}\",\n                \"stringTooShort\": \"Este campo deve incluir pelo menos {0} caracteres\",\n                \"stringTooLong\": \"Este campo pode incluir no máximo {0} caracteres\"\n            }\n        }\n    });\n\n})(jQuery);\n\n(function($) {\n\n\t// swedish - sweden\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n            \"sv_SE\": {\n                required: \"Fältet är obligatoriskt\",\n                invalid: \"Värdet är felaktigt\",\n                months: [\"Januari\", \"Februari\", \"Mars\", \"April\", \"Maj\", \"Juni\", \"Juli\", \"Augusti\", \"September\", \"Oktober\", \"November\", \"December\"],\n                timeUnits: {\n                    SECOND: \"sekunder\",\n                    MINUTE: \"minuter\",\n                    HOUR: \"timmar\",\n                    DAY: \"dagar\",\n                    MONTH: \"månader\",\n                    YEAR: \"år\"\n                },\n                \"notOptional\": \"Detta fält är obligatoriskt\",\n                \"disallowValue\": \"Dessa värden är inte tillåtna: {0}\",\n                \"invalidValueOfEnum\": \"Fältet måste innehålla ett av följande värden: {0}. [{1}]\",\n                \"notEnoughItems\": \"Det minsta tillåtna antalet element är {0}\",\n                \"tooManyItems\": \"Det största tillåtna antalet element är {0}\",\n                \"valueNotUnique\": \"Värdena är inte unika\",\n                \"notAnArray\": \"Inte en lista av värden\",\n                \"invalidDate\": \"Felaktigt format för datum: {0}\",\n                \"invalidEmail\": \"Ogiltig e-postadress\",\n                \"stringNotAnInteger\": \"Värdet är inte ett heltal\",\n                \"invalidIPv4\": \"Ogiltig IPv4-adress\",\n                \"stringValueTooSmall\": \"Det minsta tillåtna värdet är {0}\",\n                \"stringValueTooLarge\": \"Det största tillåtna värdet är {0}\",\n                \"stringValueTooSmallExclusive\": \"Värdet måste vara större än {0}\",\n                \"stringValueTooLargeExclusive\": \"Värdet måste vara mindre än {0}\",\n                \"stringDivisibleBy\": \"Talet måste vara delbart med {0}\",\n                \"stringNotANumber\": \"Värdet är inte ett tal\",\n                \"invalidPassword\": \"Ogiltigt lösenord\",\n                \"invalidPhone\": \"Ogiltigt telefonnummer\",\n                \"invalidPattern\": \"Fältet måste vara i följande format: {0}\",\n                \"stringTooShort\": \"Detta fält måste innehålla minst {0} tecken\",\n                \"stringTooLong\": \"Detta fält får innehålla högst {0} tecken\"\n            }\n\t\t}\n\t});\n\n})(jQuery);\n\n(function($) {\n\n    // chinese - china\n\n\tvar Alpaca = $.alpaca;\n\n\tAlpaca.registerView ({\n\t\t\"id\": \"base\",\n\t\t\"messages\": {\n\t\t\t\"zh_CN\": {\n\t\t\t\trequired: \"&#27492;&#22495;&#24517;&#39035;\",\n\t\t\t\tinvalid: \"&#27492;&#22495;&#19981;&#21512;&#26684;\",\n\t\t\t\tmonths: [\"&#19968;&#26376;\", \"&#20108;&#26376;\", \"&#19977;&#26376;\", \"&#22235;&#26376;\", \"&#20116;&#26376;\", \"&#20845;&#26376;\", \"&#19971;&#26376;\", \"&#20843;&#26376;\", \"&#20061;&#26376;\", \"&#21313;&#26376;\", \"&#21313;&#19968;&#26376;\", \"&#21313;&#20108;&#26376;\"],\n\t\t\t\ttimeUnits: {\n\t\t\t\t\tSECOND: \"&#31186;\",\n\t\t\t\t\tMINUTE: \"&#20998;\",\n\t\t\t\t\tHOUR: \"&#26102;\",\n\t\t\t\t\tDAY: \"&#26085;\",\n\t\t\t\t\tMONTH: \"&#26376;\",\n\t\t\t\t\tYEAR: \"&#24180;\"\n\t\t\t\t},\n\t\t\t\t\"notOptional\": \"&#27492;&#22495;&#38750;&#20219;&#36873;\",\n\t\t\t\t\"disallowValue\": \"&#38750;&#27861;&#36755;&#20837;&#21253;&#25324; {0}.\",\n\t\t\t\t\"invalidValueOfEnum\": \"&#20801;&#35768;&#36755;&#20837;&#21253;&#25324; {0}. [{1}]\",\n\t\t\t\t\"notEnoughItems\": \"&#26368;&#23567;&#20010;&#25968; {0}\",\n\t\t\t\t\"tooManyItems\": \"&#26368;&#22823;&#20010;&#25968; {0}\",\n\t\t\t\t\"valueNotUnique\": \"&#36755;&#20837;&#20540;&#19981;&#29420;&#29305;\",\n\t\t\t\t\"notAnArray\": \"&#19981;&#26159;&#25968;&#32452;\",\n\t\t\t\t\"invalidDate\": \"&#26085;&#26399;&#26684;&#24335;&#22240;&#35813;&#26159; {0}\",\n\t\t\t\t\"invalidEmail\": \"&#20234;&#22969;&#20799;&#26684;&#24335;&#19981;&#23545;, ex: info@cloudcms.com\",\n\t\t\t\t\"stringNotAnInteger\": \"&#19981;&#26159;&#25972;&#25968;.\",\n\t\t\t\t\"invalidIPv4\": \"&#19981;&#26159;&#21512;&#27861;IP&#22320;&#22336;, ex: 192.168.0.1\",\n\t\t\t\t\"stringValueTooSmall\": \"&#26368;&#23567;&#20540;&#26159; {0}\",\n\t\t\t\t\"stringValueTooLarge\": \"&#26368;&#22823;&#20540;&#26159; {0}\",\n\t\t\t\t\"stringValueTooSmallExclusive\": \"&#20540;&#24517;&#39035;&#22823;&#20110; {0}\",\n\t\t\t\t\"stringValueTooLargeExclusive\": \"&#20540;&#24517;&#39035;&#23567;&#20110; {0}\",\n\t\t\t\t\"stringDivisibleBy\": \"&#20540;&#24517;&#39035;&#33021;&#34987; {0} &#25972;&#38500;\",\n\t\t\t\t\"stringNotANumber\": \"&#19981;&#26159;&#25968;&#23383;.\",\n\t\t\t\t\"invalidPassword\": \"&#38750;&#27861;&#23494;&#30721;\",\n\t\t\t\t\"invalidPhone\": \"&#38750;&#27861;&#30005;&#35805;&#21495;&#30721;, ex: (123) 456-9999\",\n\t\t\t\t\"invalidPattern\": \"&#27492;&#22495;&#39035;&#26377;&#26684;&#24335; {0}\",\n\t\t\t\t\"stringTooShort\": \"&#27492;&#22495;&#33267;&#23569;&#38271;&#24230; {0}\",\n\t\t\t\t\"stringTooLong\": \"&#27492;&#22495;&#26368;&#22810;&#38271;&#24230; {0}\"\n\t\t\t}\n        }\n    });\n\n})(jQuery);\n\n/**\n * Web Theme (\"web\")\n *\n * Defines the default web theme for pure HTML5 forms.\n *\n * The views are:\n *\n *    web-view\n *    web-edit\n *    web-create\n *\n * This theme can also be selected by specifying the following view:\n *\n *    {\n *       \"ui\": \"web\",\n *       \"type\": null | \"view\" | \"edit\" | \"create\"\n *    }\n *\n */\n\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    /**\n     * This is the default injector (\"web\").\n     *\n     * The hooks provided here are empty.  The web view falls back on straight HTML5 for pretty much everything.\n     * As such, these mostly serve as a reference for extension.\n     */\n    var callbacks = {};\n    // fires after a field renders\n    callbacks[\"field\"] = function()\n    {\n    };\n    // fires after a control renders\n    callbacks[\"control\"] = function()\n    {\n    };\n    // fires after a container renders\n    callbacks[\"container\"] = function()\n    {\n    };\n    // fires after a form renders\n    callbacks[\"form\"] = function()\n    {\n    };\n    // fires when a field is marked as required\n    callbacks[\"required\"] = function()\n    {\n    };\n    // fires when a field is marked as optional\n    callbacks[\"optional\"] = function()\n    {\n    };\n    // fires when a field is marked as readonly\n    callbacks[\"readonly\"] = function()\n    {\n    };\n    // fires when a field is marked as disabled\n    callbacks[\"disabled\"] = function()\n    {\n    };\n    // fires when a field is marked as enabled\n    callbacks[\"enabled\"] = function()\n    {\n    };\n    // called when validity state for a field is being cleared\n    callbacks[\"clearValidity\"] = function()\n    {\n    };\n    // fires when a field is marked as invalid\n    callbacks[\"invalid\"] = function(hidden)\n    {\n    };\n    // fires when a field is marked a valid\n    callbacks[\"valid\"] = function()\n    {\n    };\n    // fired to add a message to an invalid field\n    callbacks[\"addMessage\"] = function(index, messageId, messageText, hidden)\n    {\n    };\n    // fired to remove all messages for a field\n    callbacks[\"removeMessages\"] = function()\n    {\n    };\n    // fired when a button is being enabled\n    callbacks[\"enableButton\"] = function(button)\n    {\n    };\n    // fired when a button is being disabled\n    callbacks[\"disableButton\"] = function(button)\n    {\n    };\n    // fired to add or remove the array toolbar for a field\n    callbacks[\"arrayToolbar\"] = function(remove)\n    {\n        // NOTE: this = array field\n\n        var self = this;\n\n        if (remove)\n        {\n            // swap existing toolbar with an insertion point marker\n            var existingToolbar = $(self.getFieldEl()).find(\".alpaca-array-toolbar[data-alpaca-array-toolbar-field-id='\" + self.getId() + \"']\");\n            if (existingToolbar.length > 0)\n            {\n                var insertionPointEl = $(\"<div class='\" + Alpaca.MARKER_CLASS_ARRAY_TOOLBAR + \"' \" + Alpaca.MARKER_DATA_ARRAY_TOOLBAR_FIELD_ID + \"='\" + self.getId() + \"'></div>\");\n\n                existingToolbar.before(insertionPointEl);\n                existingToolbar.remove();\n            }\n        }\n        else\n        {\n            // find the the insertion point marker\n            var insertionPointEl = $(self.getContainerEl()).find(\".\" + Alpaca.MARKER_CLASS_ARRAY_TOOLBAR + \"[\" + Alpaca.MARKER_DATA_ARRAY_TOOLBAR_FIELD_ID + \"='\" + self.getId() + \"']\");\n            if (insertionPointEl.length > 0)\n            {\n                // render toolbar\n                var templateDescriptor = self.view.getTemplateDescriptor(\"container-array-toolbar\", self);\n                if (templateDescriptor)\n                {\n                    var toolbar = Alpaca.tmpl(templateDescriptor, {\n                        \"actions\": self.toolbar.actions,\n                        \"id\": self.getId(),\n                        \"toolbarStyle\": self.options.toolbarStyle,\n                        \"view\": self.view\n                    });\n\n                    // replace the insertion point\n                    $(insertionPointEl).before(toolbar);\n                    $(insertionPointEl).remove();\n                }\n            }\n        }\n    };\n    // fired to add or remove the array actionbars all children of an array field\n    callbacks[\"arrayActionbars\"] = function(remove)\n    {\n        // NOTE: this = array field\n\n        var self = this;\n\n        // walk over all children\n        for (var childIndex = 0; childIndex < self.children.length; childIndex++)\n        {\n            var childField = self.children[childIndex];\n            var childFieldId = childField.getId();\n\n            if (remove)\n            {\n                // find the existing action bar for this child\n                // if we have one, remove it and replace it with an insertion point marker\n                var existingActionbar = $(self.getFieldEl()).find(\".alpaca-array-actionbar[data-alpaca-array-actionbar-field-id='\" + childFieldId + \"']\");\n                if (existingActionbar.length > 0)\n                {\n                    var insertionPointEl = $(\"<div class='\" + Alpaca.MARKER_CLASS_ARRAY_ITEM_ACTIONBAR + \"' \" + Alpaca.MARKER_DATA_ARRAY_ITEM_KEY + \"='\" + childField.name + \"'></div>\");\n\n                    existingActionbar.before(insertionPointEl);\n                    existingActionbar.remove();\n                }\n            }\n            else\n            {\n                // find the insertion point marker\n                // if we find one, bind in the action toolbar\n                var insertionPointEl = $(self.getFieldEl()).find(\".\" + Alpaca.MARKER_CLASS_ARRAY_ITEM_ACTIONBAR + \"[\" + Alpaca.MARKER_DATA_ARRAY_ITEM_KEY + \"='\" + childField.name + \"']\");\n                if (insertionPointEl.length > 0)\n                {\n                    var templateDescriptor = self.view.getTemplateDescriptor(\"container-array-actionbar\", self);\n                    if (templateDescriptor)\n                    {\n                        var actionbar = Alpaca.tmpl(templateDescriptor, {\n                            \"actions\": self.actionbar.actions,\n                            \"name\": childField.name,\n                            \"parentFieldId\": self.getId(),\n                            \"fieldId\": childField.getId(),\n                            \"itemIndex\": childIndex,\n                            \"actionbarStyle\": self.options.actionbarStyle,\n                            \"view\": self.view\n                        });\n\n                        // replace the insertion point\n                        $(insertionPointEl).before(actionbar);\n                        $(insertionPointEl).remove();\n                    }\n                }\n            }\n        }\n    };\n    // fired after a text field is deemed to be autocomplete-able\n    callbacks[\"autocomplete\"] = function()\n    {\n    };\n\n\n    var styles = {};\n    styles[\"button\"] = \"\";\n    styles[\"smallButton\"] = \"\";\n    styles[\"addIcon\"] = \"\";\n    styles[\"removeIcon\"] = \"\";\n    styles[\"upIcon\"] = \"\";\n    styles[\"downIcon\"] = \"\";\n    styles[\"expandedIcon\"] = \"\";\n    styles[\"collapsedIcon\"] = \"\";\n    styles[\"table\"] = \"\";\n\n    Alpaca.registerView({\n        \"id\": \"web-display\",\n        \"parent\": \"base\",\n        \"type\": \"display\",\n        \"ui\": \"web\",\n        \"title\": \"Default HTML5 display view\",\n        \"displayReadonly\": true,\n        \"templates\": {},\n        \"callbacks\": callbacks,\n        \"styles\": styles,\n        \"horizontal\": false\n    });\n\n    Alpaca.registerView({\n        \"id\": \"web-display-horizontal\",\n        \"parent\": \"web-display\",\n        \"horizontal\": true\n    });\n\n    Alpaca.registerView({\n        \"id\": \"web-edit\",\n        \"parent\": \"base\",\n        \"type\": \"edit\",\n        \"ui\": \"web\",\n        \"title\": \"Default HTML5 edit view\",\n        \"displayReadonly\": true,\n        \"templates\": {},\n        \"callbacks\": callbacks,\n        \"styles\": styles,\n        \"horizontal\": false\n    });\n\n    Alpaca.registerView({\n        \"id\": \"web-edit-horizontal\",\n        \"parent\": \"web-edit\",\n        \"horizontal\": true\n    });\n\n    Alpaca.registerView({\n        \"id\": \"web-create\",\n        \"parent\": \"web-edit\",\n        \"type\": \"create\",\n        \"title\": \"Default HTML5 create view\",\n        \"displayReadonly\": false,\n        \"templates\": {},\n        \"horizontal\": false\n    });\n\n    Alpaca.registerView({\n        \"id\": \"web-create-horizontal\",\n        \"parent\": \"web-create\",\n        \"horizontal\": true\n    });\n\n})(jQuery);\n\n/**\n * Twitter Bootstrap Theme (\"bootstrap\")\n *\n * Defines the Alpaca theme for Twitter Bootstrap v3.\n *\n * The views are:\n *\n *    bootstrap-view\n *    bootstrap-edit\n *    bootstrap-create\n *\n * This theme can also be selected by specifying the following view:\n *\n *    {\n *       \"ui\": \"bootstrap\",\n *       \"type\": \"view\" | \"edit\" | \"create\"\n *    }\n *\n */\n(function($) {\n\n    var Alpaca = $.alpaca;\n\n    // custom styles\n    var styles = {};\n    styles[\"button\"] = \"btn btn-default\";\n    styles[\"smallButton\"] = \"btn btn-default btn-sm\";\n    styles[\"addIcon\"] = \"glyphicon glyphicon-plus-sign\";\n    styles[\"removeIcon\"] = \"glyphicon glyphicon-minus-sign\";\n    styles[\"upIcon\"] = \"glyphicon glyphicon-chevron-up\";\n    styles[\"downIcon\"] = \"glyphicon glyphicon-chevron-down\";\n    styles[\"expandedIcon\"] = \"glyphicon glyphicon-circle-arrow-down\";\n    styles[\"collapsedIcon\"] = \"glyphicon glyphicon-circle-arrow-right\";\n    styles[\"table\"] = \"table table-striped table-bordered table-hover\";\n\n    // custom callbacks\n    var callbacks = {};\n    callbacks[\"required\"] = function()\n    {\n        var fieldEl = this.getFieldEl();\n\n        // required fields get a little star in their label\n        var label = $(fieldEl).find(\"label.alpaca-control-label\");\n        $('<span class=\"alpaca-icon-required glyphicon glyphicon-star\"></span>').prependTo(label);\n\n    };\n    callbacks[\"invalid\"] = function()\n    {\n        // if this is a control field, add class \"has-error\"\n        if (this.isControlField)\n        {\n            $(this.getFieldEl()).addClass('has-error');\n        }\n\n        /*\n        // if this is a container field, add class \"has-error\"\n        if (this.isContainerField)\n        {\n            $(this.getFieldEl()).addClass('has-error');\n        }\n        */\n\n    };\n    callbacks[\"valid\"] = function()\n    {\n        // valid fields remove the class 'has-error'\n        $(this.getFieldEl()).removeClass('has-error');\n    };\n    callbacks[\"control\"] = function()\n    {\n        // controls get some special formatting\n\n        // fieldEl\n        var fieldEl = this.getFieldEl();\n\n        // controlEl\n        var controlEl = this.getControlEl();\n\n        // all controls get the \"form-control\" class injected\n        $(fieldEl).find(\"input\").addClass(\"form-control\");\n        $(fieldEl).find(\"textarea\").addClass(\"form-control\");\n        $(fieldEl).find(\"select\").addClass(\"form-control\");\n        // except for the following\n        $(fieldEl).find(\"input[type=checkbox]\").removeClass(\"form-control\");\n        $(fieldEl).find(\"input[type=file]\").removeClass(\"form-control\");\n        $(fieldEl).find(\"input[type=radio]\").removeClass(\"form-control\");\n\n        // special case for type == color, remove form-control\n        if (this.inputType === \"color\")\n        {\n            $(fieldEl).find(\"input\").removeClass(\"form-control\");\n        }\n\n        // any checkbox inputs get the \"checkbox\" class on their checkbox\n        $(fieldEl).find(\"input[type=checkbox]\").parent().parent().addClass(\"checkbox\");\n        // any radio inputs get the \"radio\" class on their radio\n        $(fieldEl).find(\"input[type=radio]\").parent().parent().addClass(\"radio\");\n\n        // if form has \"form-inline\" class, then radio and checkbox labels get inline classes\n        if ($(fieldEl).parents(\"form\").hasClass(\"form-inline\"))\n        {\n            // checkboxes\n            $(fieldEl).find(\"input[type=checkbox]\").parent().addClass(\"checkbox-inline\");\n\n            // radios\n            $(fieldEl).find(\"input[type=radio]\").parent().addClass(\"radio-inline\");\n        }\n\n        // all control labels get class \"control-label\"\n        $(fieldEl).find(\"label.alpaca-control-label\").addClass(\"control-label\");\n\n        // if in horizontal mode, add a wrapper div (col-sm-9) and label gets (col-sm-3)\n        if (this.view.horizontal)\n        {\n            $(fieldEl).find(\"label.alpaca-control-label\").addClass(\"col-sm-3\");\n\n            var wrapper = $(\"<div></div>\");\n            wrapper.addClass(\"col-sm-9\");\n\n            $(controlEl).after(wrapper);\n            wrapper.append(controlEl);\n\n            $(fieldEl).append(\"<div style='clear:both;'></div>\");\n        }\n    };\n    callbacks[\"container\"] = function()\n    {\n        var containerEl = this.getContainerEl();\n\n        if (this.view.horizontal)\n        {\n            $(containerEl).addClass(\"form-horizontal\");\n        }\n    };\n    callbacks[\"form\"] = function()\n    {\n        var formEl = this.getFormEl();\n\n        // use pull-right for form buttons\n        //$(formEl).find(\".alpaca-form-buttons-container\").addClass(\"pull-right\");\n    };\n    callbacks[\"enableButton\"] = function(button)\n    {\n        $(button).removeAttr(\"disabled\");\n    };\n    callbacks[\"disableButton\"] = function(button)\n    {\n        $(button).attr(\"disabled\", \"disabled\");\n    };\n    callbacks[\"collapsible\"] = function()\n    {\n        var fieldEl = this.getFieldEl();\n        var legendEl = $(fieldEl).find(\"legend\").first();\n        var anchorEl = $(\"[data-toggle='collapse']\", legendEl);\n        if ($(anchorEl).length > 0)\n        {\n            var containerEl = this.getContainerEl();\n\n            // container id\n            var id = $(containerEl).attr(\"id\");\n            if (!id) {\n                id = Alpaca.generateId();\n                $(containerEl).attr(\"id\", id);\n            }\n\n            // set up container to be collapsible\n            $(containerEl).addClass(\"collapse in\");\n\n            // set up legend anchor\n            if (!$(anchorEl).attr(\"data-target\")) {\n                $(anchorEl).attr(\"data-target\", \"#\" + id);\n            }\n\n            $(anchorEl).mouseover(function(e) {\n                $(this).css(\"cursor\", \"pointer\");\n            })\n        }\n    };\n\n    // table-control callbacks\n    callbacks[\"tableHeaderRequired\"] = function(schema, options, domEl)\n    {\n        // required fields get a little star in their label\n        $('<span class=\"alpaca-icon-required glyphicon glyphicon-star\"></span>').prependTo(domEl);\n\n    };\n    callbacks[\"tableHeaderOptional\"] = function(schema, options, domEl)\n    {\n    };\n\n    Alpaca.registerView({\n        \"id\": \"bootstrap-display\",\n        \"parent\": \"web-display\",\n        \"type\": \"display\",\n        \"ui\": \"bootstrap\",\n        \"title\": \"Display View for Bootstrap 3\",\n        \"displayReadonly\": true,\n        \"callbacks\": callbacks,\n        \"styles\": styles,\n        \"templates\": {}\n    });\n\n    Alpaca.registerView({\n        \"id\": \"bootstrap-display-horizontal\",\n        \"parent\": \"bootstrap-display\",\n        \"horizontal\": true\n    });\n\n    Alpaca.registerView({\n        \"id\": \"bootstrap-edit\",\n        \"parent\": \"web-edit\",\n        \"type\": \"edit\",\n        \"ui\": \"bootstrap\",\n        \"title\": \"Edit View for Bootstrap 3\",\n        \"displayReadonly\": true,\n        \"callbacks\": callbacks,\n        \"styles\": styles,\n        \"templates\": {}\n    });\n\n    Alpaca.registerView({\n        \"id\": \"bootstrap-edit-horizontal\",\n        \"parent\": \"bootstrap-edit\",\n        \"horizontal\": true\n    });\n\n    Alpaca.registerView({\n        \"id\": \"bootstrap-create\",\n        \"parent\": \"bootstrap-edit\",\n        \"title\": \"Create View for Bootstrap 3\",\n        \"type\": \"create\",\n        \"displayReadonly\": false\n    });\n\n    Alpaca.registerView({\n        \"id\": \"bootstrap-create-horizontal\",\n        \"parent\": \"bootstrap-create\",\n        \"horizontal\": true\n    });\n\n})(jQuery);\n\n        \n            Alpaca.defaultView = 'bootstrap';\n        \n        return Alpaca;\n\n    \n\n}));\n\n}.call({umd:false,jQuery:jQuery,Handlebars:Handlebars}));"

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	// Modules
	var Navigator = __webpack_require__(29);
	var ActionEmitter = __webpack_require__(30);


	/**
	Only expose a tiny API to keep internal routing safe

	@singleton Aviator
	**/
	var Aviator = {

	  /**
	  @property pushStateEnabled
	  @type {Boolean}
	  @default true if the browser supports pushState
	  **/
	  pushStateEnabled: ('pushState' in window.history),

	  /**
	  @property linkSelector
	  @type {String}
	  @default 'a.navigate'
	  **/
	  linkSelector: 'a.navigate',

	  /**
	  the root of the uri from which routing will append to

	  @property root
	  @type {String}
	  @default ''
	  **/
	  root: '',

	  /**
	  @property _navigator
	  @type {Navigator}

	  @private
	  **/
	  _navigator: new Navigator(),
	  _ActionEmitter: ActionEmitter,

	  /**
	  @method setRoutes
	  @param {Object} routes
	  **/
	  setRoutes: function (routes) {
	    this._navigator.setRoutes(routes);
	  },

	  /**
	  dispatches routes to targets and sets up event handlers

	  @method dispatch
	  **/
	  dispatch: function () {
	    var navigator = this._navigator;

	    navigator.setup({
	      pushStateEnabled: this.pushStateEnabled,
	      linkSelector:     this.linkSelector,
	      root:             this.root
	    });

	    navigator.dispatch();
	  },

	  /**
	  @method navigate
	  @param {String} uri to navigate to
	  @param {Object} [options]
	  **/
	  navigate: function (uri, options) {
	    this._navigator.navigate(uri, options);
	  },

	  /**
	   @method hrefFor
	   @param {String} uri to navigate to
	   @param {Object} [options]
	   **/
	  hrefFor: function (uri, options) {
	    return this._navigator.hrefFor(uri, options);
	  },


	  /**
	  @method serializeQueryParams
	  @param {Object} queryParams
	  @return {String} queryString "?foo=bar&baz[]=boo&baz=[]oob"
	  **/
	  serializeQueryParams: function (queryParams) {
	    return this._navigator.serializeQueryParams(queryParams);
	  },

	  /**
	  @method getCurrentRequest
	  @return {String}
	  **/
	  getCurrentRequest: function () {
	    return this._navigator.getCurrentRequest();
	  },

	  /**
	  @method getCurrentURI
	  @return {String}
	  **/
	  getCurrentURI: function () {
	    return this._navigator.getCurrentURI();
	  },

	  /**
	  @method refresh
	  **/
	  refresh: function () {
	    this._navigator.refresh();
	  },

	  /**
	  @method rewriteRouteTo
	  @param {String} newRoute
	  @return {Object}
	  **/
	  rewriteRouteTo: function (newRoute) {
	    var target = {
	      rewrite: function (request) {
	        Aviator.navigate(newRoute, {
	          namedParams: request.namedParams,
	          replace: true
	        });
	      }
	    };

	    return {
	      target: target,
	      '/': 'rewrite'
	    };
	  }

	};

	if (window) {
	  window.Aviator = Aviator;
	}

	module.exports = Aviator;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	
	var ActionEmitter = __webpack_require__(30);

	var helpers = __webpack_require__(35),
	    Request = __webpack_require__(37),
	    Route   = __webpack_require__(38);

	// helpers
	var each      = helpers.each,
	    map       = helpers.map,
	    compact   = helpers.compact,
	    addEvent  = helpers.addEvent,
	    isArray   = helpers.isArray;


	/**
	@class Navigator
	@constructor
	@private
	**/
	var Navigator = function () {
	  this._routes  = null;
	  this._exits   = [];
	  this._silent  = false;
	  this._dispatchingStarted = false;
	  this._emitters = [];
	};

	Navigator.prototype = {

	  /**
	  @method setup
	  @param {Object} options
	  **/
	  setup: function (options) {
	    options = options || {};

	    for (var k in options) {
	      if (options.hasOwnProperty(k)) {
	        this[k] = options[k];
	      }
	    }

	    this._attachEvents();
	  },

	  /**
	  @method setRoutes
	  @param {Object} routes a configuration of routes and targets
	  **/
	  setRoutes: function (routes) {
	    this._routes = routes;
	  },

	  /**
	  @method createRouteForURI
	  @param {String} uri
	  @return {Request}
	  **/
	  createRouteForURI: function (uri) {
	    return new Route(this._routes, uri);
	  },

	  /**
	  @method createRequest
	  @param {String} uri
	  @param {String|Null} queryString
	  @param {String} matchedRoute
	  @return {Request}
	  **/
	  createRequest: function (uri, queryString, matchedRoute) {
	    this._request = new Request({
	      uri: uri,
	      queryString: queryString,
	      matchedRoute: matchedRoute
	    });

	    return this._request;
	  },

	  /**
	  @method getCurrentRequest
	  @return {Request}
	  **/
	  getCurrentRequest: function () {
	    return this._request;
	  },

	  /**
	  @method getCurrentPathname
	  @return {String}
	  **/
	  getCurrentPathname: function () {
	    if (this.pushStateEnabled) {
	      return this._removeURIRoot(location.pathname);
	    }
	    else {
	      return location.hash.replace('#', '').split('?')[0];
	    }
	  },

	  /**
	  @method getCurrentURI
	  @return {String}
	  **/
	  getCurrentURI: function () {
	    if (this.pushStateEnabled) {
	      return this._removeURIRoot(location.pathname) + location.search;
	    }
	    else {
	      return location.hash.replace('#', '');
	    }
	  },

	  /**
	  @method getQueryString
	  @return {String|Null}
	  **/
	  getQueryString: function () {
	    var uri, queryString;

	    if (this.pushStateEnabled) {
	      return location.search || null;
	    }
	    else {
	      queryString = this.getCurrentURI().split('?')[1];

	      if (queryString) {
	        return '?' + queryString;
	      }
	      else {
	        return null;
	      }
	    }
	  },

	  /**
	  @method dispatch
	  **/
	  dispatch: function () {
	    var uri         = this.getCurrentPathname(),
	        route       = this.createRouteForURI(uri),
	        queryString = this.getQueryString(),
	        request     = this.createRequest(uri, queryString, route.matchedRoute);

	    this._emitters = [];
	    this._invokeExits(request);

	    // temporary action array that can be halted
	    this._actions = route.actions;

	    if (!this._silent) {
	      this._invokeActions(request, route.options);
	    }

	    // collect exits of the current matching route
	    this._exits = route.exits;

	    if (!this._dispatchingStarted) {
	      this._dispatchingStarted = true;
	    }
	  },

	  /**
	  @method onURIChange
	  **/
	  onURIChange: function () {
	    this.dispatch();
	    this._silent = false;
	  },

	  /**
	  @method onPopState
	  @param {Event}
	  **/
	  onPopState: function (ev) {
	    // Some browsers fire 'popstate' on the initial page load with a null state
	    // object. We always want manual control over the initial page dispatch, so
	    // prevent any popStates from changing the url until we have started
	    // dispatching.
	    if (this._dispatchingStarted) {
	      this.onURIChange();
	    }
	  },

	  /**
	  @method onClick
	  @param {Event} ev
	  **/
	  onClick: function (ev) {
	    var target = ev.target,
	        matchesSelector = this._matchesSelector(target),
	        pathname,
	        uri;

	    if (ev.button === 1 || ev.metaKey || ev.ctrlKey) return;

	    // Sub optimal. It itererates through all ancestors on every single click :/
	    while (target) {
	      if (this._matchesSelector(target)) {
	        break;
	      }

	      target = target.parentNode;
	    }

	    if (!target) return;

	    ev.preventDefault();

	    pathname = target.pathname;

	    // Some browsers drop the leading slash
	    // from an `a` tag's href location.
	    if ( pathname.charAt(0) !== '/' ) pathname = '/' + pathname;

	    uri = pathname.replace(this.root, '');

	    this.navigate(uri);
	  },

	  getExitMessage: function () {
	    return compact(map(this._emitters, function (emitter) {
	      return emitter.getExitMessage();
	    })).join(', ') || undefined;
	  },

	  onBeforeUnload: function (ev) {
	    var exitMessage = this.getExitMessage();

	    if (exitMessage) {
	      ev.returnValue = exitMessage;
	      return exitMessage;
	    }
	  },

	  /**
	  @method navigate
	  @param {String} uri
	  @param {Object} [options]
	  **/
	  navigate: function (uri, options) {
	    var link;

	    var exitMessage = this.getExitMessage();
	    if (exitMessage && !window.confirm(exitMessage)) {
	      return
	    }

	    options = options || {};
	    // halt any previous action invocations
	    this._actions = [];

	    link = this.hrefFor(uri, options);

	    if (options.silent) {
	      this._silent = true;
	    }

	    if (this.pushStateEnabled) {
	      link = this._removeURIRoot(link);

	      link = this.root + link;

	      if (options.replace) {
	        history.replaceState('navigate', '', link);
	      }
	      else {
	        history.pushState('navigate', '', link);
	      }

	      this.onURIChange();
	    }
	    else {
	      if (options.replace) location.replace('#' + link);
	      else location.hash = link;
	    }
	  },

	  /**
	  @method hrefFor
	  @param {String} uri
	  @param {Object} [options]
	   **/
	  hrefFor: function (uri, options) {
	    options = options || {};

	    var link        = uri + '';
	    var request     = this.getCurrentRequest();
	    var namedParams = options.namedParams;
	    var queryParams = options.queryParams;

	    if (!namedParams && request) {
	      namedParams = request.namedParams;
	    }

	    if (queryParams) {
	      link += this.serializeQueryParams(queryParams);
	    }

	    if (namedParams) {
	      for (var p in namedParams) {
	        if (namedParams.hasOwnProperty(p)) {
	          link = link.replace(':' + p, encodeURIComponent(namedParams[p]));
	        }
	      }
	    }

	    return link;
	  },

	  /**
	  @method refresh
	  **/
	  refresh: function () {
	    this.dispatch();
	  },

	  /**
	  @method _attachEvents
	  @protected
	  **/
	  _attachEvents: function () {
	    var pushStateEnabled = this.pushStateEnabled;

	    if (pushStateEnabled) {
	      // Popstate fired on initial page load causes double trigger
	      // Hack to prevent popState firing two times in Safari (workaround found here: https://github.com/visionmedia/page.js/commit/6e6af2f6c0d7638e06a5ea3de0ff808237bdf2ef)
	      var self = this;
	      setTimeout(function() {
	        addEvent(window, 'popstate', self.onPopState, self);
	      }, 0);
	    }
	    else {
	      addEvent(window, 'hashchange', this.onURIChange, this);
	    }

	    addEvent(document, 'click', this.onClick, this);
	    addEvent(window, 'beforeunload', this.onBeforeUnload, this);
	  },

	  /**
	  @method _matchesSelector
	  @param {DOMNode} node
	  @protected
	  **/
	  _matchesSelector: function (node) {
	    var nodeList = document.querySelectorAll(this.linkSelector),
	        contains = false,
	        i;

	    for ( i = 0; i < nodeList.length; i++ ) {
	      if (!contains) contains = ( node === nodeList[i] );
	      else break;
	    }

	    return contains;
	  },

	  /**
	  pop of any exits function and invoke them

	  @method _invokeExits
	  @param {Request} nextRequest
	  @protected
	  **/
	  _invokeExits: function (nextRequest) {
	    var exit, target, method;

	    while(this._exits.length) {
	      exit = this._exits.pop();
	      target = exit.target;
	      method = exit.method;

	      if (!(method in target)) {
	        throw new Error("Can't call exit " + method + ' on target when changing uri to ' + request.uri);
	      }

	      target[method].call(target, nextRequest);
	    }
	  },

	  /**
	  invoke all actions with request and options

	  @method _invokeActions
	  @param {Request} request
	  @param {Object} options
	  @protected
	  **/
	  _invokeActions: function (request, options) {
	    var action, target, method, emitter;

	    while (this._actions.length) {
	      action = this._actions.shift();
	      target = action.target;
	      method = action.method;
	      emitter = new ActionEmitter;

	      if (!(method in target)) {
	        throw new Error("Can't call action " + method + ' on target for uri ' + request.uri);
	      }

	      this._emitters.push(emitter);

	      target[method].call(target, request, options, emitter);
	    }
	  },

	  /**
	  @method _removeURIRoot
	  @param {String} uri '/partners/s/foo-bar'
	  @return {String} uri '/s/foo-bar'
	  **/
	  _removeURIRoot: function (uri) {
	    var rootRegex = new RegExp('^' + this.root);

	    return uri.replace(rootRegex, '');
	  },

	  /**
	  @method serializeQueryParams
	  @param {Object} queryParams
	  @return {String} queryString "?foo=bar&baz[]=boo&baz=[]oob"
	  **/
	  serializeQueryParams: function (queryParams) {
	    var queryString = [],
	        val;

	    for (var key in queryParams) {
	      if (queryParams.hasOwnProperty(key)) {
	        val = queryParams[key];

	        if (isArray(val)) {
	          each(val, function (item) {
	            queryString.push(encodeURIComponent(key) + '[]=' + encodeURIComponent(item));
	          });
	        }
	        else {
	          queryString.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));
	        }
	      }
	    }

	    queryString = '?' + queryString.join('&');

	    return queryString;
	  }

	};

	module.exports = Navigator;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(31);
	var helpers = __webpack_require__(35);
	var compact = helpers.compact;
	var map = helpers.map;

	var EventEmitter = __webpack_require__(36).EventEmitter;
	var ActionEmitter = function () {
		this.getExitMessage = function (){
			return compact(map(this.listeners('exit'), function (listener) {
				return listener()
			})).join(', ') || undefined;
		}
		return this;
	};

	util.inherits(ActionEmitter, EventEmitter);

	module.exports = ActionEmitter;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(33);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(34);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(32)))

/***/ },
/* 32 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 34 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	binds a function to a context

	@method bind
	@param {Function} func
	@param {Object} context
	@return {Function}
	@private
	**/
	var bind = function (func, context) {
	  return function () {
	    func.apply(context, Array.prototype.slice.call(arguments));
	  };
	};

	/**
	@method each
	@param {Array} arr
	@param {Function} iterator
	@private
	**/
	var each = function (arr, iterator, context) {
	  context = context || this;

	  for (var i = 0, len = arr.length; i < len; i++) {
	    iterator.call(context, arr[i], i);
	  }
	};

	/**
	@method compact
	@param {Array} arr
	@private
	**/
	var compact = function (arr) {
	  return arr.filter(function (x) {
	    return !!x;
	  });
	};

	/**
	@method map
	@param {Array} arr
	@param {Function} iterator
	@private
	**/

	var map = function (arr, iterator) {
	  return arr.map(iterator);
	};

	/**
	@method merge
	@return {Object}
	@private
	**/
	var merge = function () {
	  var result = {},
	      arr = Array.prototype.slice.call(arguments, 0);

	  each(arr, function (obj) {
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        result[key] = obj[key];
	      }
	    }
	  });

	  return result;
	};

	/**
	@method addEvent
	@param {Any} host
	@param {String} eventName
	@param {Function} handler
	@param {Any} [context]
	@private
	**/
	var addEvent = function (host, eventName, handler, context) {
	  host.addEventListener(eventName, bind(handler, context), false);
	};

	/**
	@method isArray
	@param {Object} o
	@return {Boolean}
	@private
	**/
	var isArray = function (o) {
	  return Array.isArray(o);
	};

	/**
	@method isPlainObject
	@param {any} val
	@return {Boolean}
	@private
	**/
	var isPlainObject = function (val) {
	  return (!!val) && (val.constructor === Object);
	};

	/**
	@method isString
	@param {Any} val
	@return {Boolean}
	@private
	**/
	var isString = function (val) {
	  return typeof val === 'string';
	};

	module.exports = {
	  bind: bind,
	  each: each,
	  compact: compact,
	  map: map,
	  merge: merge,
	  addEvent: addEvent,
	  isArray: isArray,
	  isPlainObject: isPlainObject,
	  isString: isString
	};


/***/ },
/* 36 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var helpers = __webpack_require__(35),
	    each = helpers.each,
	    merge = helpers.merge,
	    isArray = helpers.isArray;

	/**
	@class Request
	@constructor
	**/
	var Request = function (options) {
	  this.namedParams  = {};
	  this.queryParams  = {};
	  this.params       = {};

	  this.uri          = options.uri;
	  this.queryString  = options.queryString;
	  this.matchedRoute = options.matchedRoute;

	  this._extractNamedParamsFromURI();
	  this._extractQueryParamsFromQueryString();
	  this._mergeParams();
	};

	Request.prototype = {
	  /**
	  @method _extractNamedParamsFromURI
	  @private
	  **/
	  _extractNamedParamsFromURI: function () {
	    var uriParts = this.uri.split('/'),
	        routeParts = this.matchedRoute.split('/'),
	        params = {};

	    each(routeParts, function (part, i) {
	      var key;

	      if (part.indexOf(':') === 0) {
	        key = part.replace(':', '');

	        params[key] = decodeURIComponent( uriParts[i] );
	      }
	    });

	    this.namedParams = params;
	  },

	  /**
	  Splits the query string by '&'. Splits each part by '='.
	  Passes the key and value for each part to _applyQueryParam

	  @method _extractQueryParamsFromQueryString
	  @private
	  **/
	  _extractQueryParamsFromQueryString: function () {
	    var parts;

	    if (!this.queryString) return;

	    parts = this.queryString.replace('?','').split('&');

	    each(parts, function (part) {
	      var key = decodeURIComponent( part.split('=')[0] ),
	          val = decodeURIComponent( part.split('=')[1] );

	      if ( part.indexOf( '=' ) === -1 ) return;
	      this._applyQueryParam( key, val );

	    }, this);

	  },

	  /**
	  Update the queryParams property with a new key and value.
	  Values for keys with the [] notation are put into arrays
	  or pushed into an existing array for that key.

	  @method _applyQueryParam
	  @param {String} key
	  @param {String} val
	  **/
	  _applyQueryParam: function (key, val) {
	    if ( key.indexOf( '[]' ) !== -1 ) {
	      key = key.replace( '[]', '' );

	      if (isArray(this.queryParams[key])) {
	        this.queryParams[key].push(val);
	      }
	      else {
	        this.queryParams[key] = [val];
	      }
	    }
	    else {
	      this.queryParams[key] = val;
	    }
	  },

	  /**
	  @method _mergeParams
	  @private
	  **/
	  _mergeParams: function () {
	    this.params = merge(this.namedParams, this.queryParams);
	  }
	};

	module.exports = Request;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var helpers = __webpack_require__(35),
	    merge = helpers.merge,
	    isString = helpers.isString,
	    isPlainObject = helpers.isPlainObject;

	/**
	Contains the properties for a route
	After attempting to match a uri to the Routes map

	@class Route
	@constructor
	@private
	**/
	var Route = function (routes, uri) {
	  this.uri          = uri;
	  this.matchedRoute = '';
	  this.targets      = [];
	  this.actions      = [];
	  this.exits        = [];
	  this.options      = {};
	  this.notFound     = null;
	  this.fullMatch    = false;

	  this.matchOrNotFound(routes);

	  this.uri = uri;
	};

	Route.prototype = {

	  /**
	  Attempt to match the uri, or call a notFound handler if nothing matches.

	  @method matchOrNotFound
	  @param {Object} routeLevel
	  **/
	  matchOrNotFound: function (routeLevel) {
	    this.match(routeLevel);

	    if (!this.fullMatch && this.notFound) {
	      this.actions.push(this.notFound);
	    }
	  },

	  /**
	  Matches the uri from the routes map.

	  @method match
	  @param {Object} routeLevel
	  **/
	  match: function (routeLevel) {
	    var value, action, target;

	    if (routeLevel.target) {
	      this.targets.push(routeLevel.target);
	    }

	    if (this.targets.length) {
	      target = this.targets[this.targets.length - 1];
	    }

	    if (routeLevel.notFound && target[routeLevel.notFound]) {
	      this.notFound = {
	        target: target,
	        method: routeLevel.notFound
	      };
	    }


	    action = {
	      target: target,
	      method: null
	    };

	    for (var key in routeLevel) {
	      if (routeLevel.hasOwnProperty(key)) {
	        value = routeLevel[key];

	        if (this.isFragment(key) && this.isFragmentInURI(key)) {
	          this.updateMatchedRoute(key);
	          this.removeFragmentFromURI(key);

	          if (this.isActionDescriptor(value)) {

	            // Check that if this fragment is a namedParam,
	            // we never override a regular fragment.
	            if (!this.isNamedParam(key) || !action.method) {
	              if (isString(value)) {
	                action.method = value;
	              }
	              else {
	                action.method = value.method;

	                if (value.exit) {
	                  this.exits.unshift({
	                    method: value.exit,
	                    target: routeLevel.target
	                  });
	                }

	                if (value.options) {
	                  this.mergeOptions(value.options);
	                }
	              }

	              // Adding the action
	              this.actions.push(action);

	              if (key !== '/*') {
	                this.fullMatch = true;
	              }
	            }
	          }
	          else if (value.hasOwnProperty('options')) {
	            this.mergeOptions(value.options);
	          }

	          if (isPlainObject(value)) {
	            // recurse
	            this.match(value);
	          }
	        }
	      }
	    }
	  },

	  /**
	  @method mergeOptions
	  @param {Object} options
	  **/
	  mergeOptions: function (options) {
	    this.options = merge(this.options, options);
	  },

	  /**
	  appends the matched fragment to the matched route

	  @method updateMatchedRoute
	  @param {String} fragment
	  **/
	  updateMatchedRoute: function (fragment) {
	    if (fragment !== '/' && fragment !== '/*') {
	      this.matchedRoute += fragment;
	    }
	  },

	  /**
	  removes matched fragments from the beginning of the uri

	  @method removeFragmentFromURI
	  @param {String} fragment
	  **/
	  removeFragmentFromURI: function (fragment) {
	    var uri = this.uri,
	        uriParts, subFrags;

	    if (fragment !== '/' && fragment !== '/*') {
	      if (this.includesNamedParam(fragment)) {
	        uriParts = uri.split('/'),
	        subFrags = fragment.split('/');

	        subFrags.forEach(function (f, i) {
	          if (f.indexOf(':') === 0) {
	            uri = uri.replace('/' + uriParts[i], '');
	          }
	          else if (f) {
	            uri = uri.replace('/' + f, '');
	          }
	        });
	      }
	      else {
	        uri = uri.replace(fragment, '');
	      }
	    }

	    this.uri = uri;
	  },

	  /**
	  @method isFragmentInURI
	  @param {Any} fragment
	  @return {Boolean}
	  **/
	  isFragmentInURI: function (fragment) {
	    var uri = this.uri,
	        uriParts, subFrags;

	    if (uri === '/' || uri === '') {
	      return fragment === '/' || fragment === '/*';
	    }

	    if ( fragment === '/' ) {
	      return false;
	    }
	    else if ( fragment === '/*' ) {
	      return true;
	    }
	    // includes vs is named param
	    else if (this.includesNamedParam(fragment)) {
	      uriParts = uri.split('/'),
	      subFrags = fragment.split('/');

	      if (subFrags.length === 2) {
	        return true;
	      }

	      return subFrags.map(function (f, i) {
	        if (f.indexOf(':') === 0) {
	          return true;
	        }
	        else {
	          return uriParts[i].indexOf(f) !== -1;
	        }
	      }).reduce(function (a, b) { return a && b; });
	    }
	    else {
	      return uri.indexOf(fragment) === 0;
	    }
	  },

	  /**
	  @method includesNamedParam
	  @param {String} fragment
	  @return {Boolean}
	  **/
	  includesNamedParam: function (fragment) {
	    return fragment.indexOf('/:') !== -1;
	  },

	  /**
	  @method isFragment
	  @param {Any} key
	  @return {Boolean}
	  **/
	  isFragment: function (key) {
	    return key.indexOf('/') === 0;
	  },

	  /**
	  @method isActionDescriptor
	  @param {Any} val
	  @return {Boolean}
	  **/
	  isActionDescriptor: function (val) {
	    return isString(val) || isPlainObject(val) && val.method;
	  },

	  /**
	  @method isNamedParam
	  @param {String} fragment
	  @return {Boolean}
	  **/
	  isNamedParam: function (fragment) {
	    return fragment.indexOf('/:') === 0;
	  }
	};

	module.exports = Route;


/***/ },
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * @license
	 * Lodash <https://lodash.com/>
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.0';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      reLeadingDot = /^\./,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
	      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `map.set` because it's not chainable in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }

	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    // Don't return `set.add` because it's not chainable in IE 11.
	    set.add(value);
	    return set;
	  }

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
	        symIterator = Symbol ? Symbol.iterator : undefined,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array of at least `200` elements
	     * and any iteratees accept only one argument. The heuristic for whether a
	     * section qualifies for shortcut fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
	          (arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function assignInDefaults(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined ? undefinedTag : nullTag;
	      }
	      value = Object(value);
	      return (symToStringTag && symToStringTag in value)
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      if (!isKey(path, object)) {
	        path = castPath(path);
	        object = parent(object, path);
	        path = last(path);
	      }
	      var func = object == null ? object : object[toKey(path)];
	      return func == null ? undefined : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = getTag(object);
	        objTag = objTag == argsTag ? objectTag : objTag;
	      }
	      if (!othIsArr) {
	        othTag = getTag(other);
	        othTag = othTag == argsTag ? objectTag : othTag;
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;

	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;

	      var isCommon = newValue === undefined;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      object = Object(object);
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, path, value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          }
	          else if (!isKey(index, array)) {
	            var path = castPath(index),
	                object = parent(array, path);

	            if (object != null) {
	              delete object[toKey(last(path))];
	            }
	          }
	          else {
	            delete array[toKey(index)];
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined;
	          if (newValue === undefined) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array == null ? 0 : array.length,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);
	      object = parent(object, path);

	      var key = toKey(last(path));
	      return !(object != null && hasOwnProperty.call(object, key)) || delete object[key];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value) {
	      return isArray(value) ? value : stringToPath(value);
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined;

	        if (newValue === undefined) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 &&
	              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined && other === undefined) {
	          return defaultValue;
	        }
	        if (value !== undefined) {
	          result = value;
	        }
	        if (other !== undefined) {
	          if (result === undefined) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = nativeMin(toInteger(precision), 292);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] == null
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return !!length &&
	        (typeof value == 'number' || reIsUint.test(value)) &&
	        (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      string = toString(string);

	      var result = [];
	      if (reLeadingDot.test(string)) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;

	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined;
	      }

	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            lastIndex = args.length - 1,
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        if (start != lastIndex) {
	          arrayPush(otherArgs, castSlice(args, start + 1));
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are **not** supported.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(args) {
	      args.push(undefined, assignInDefaults);
	      return apply(assignInWith, undefined, args);
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined, mergeDefaults);
	      return apply(mergeWith, undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      copyObject(object, getAllKeysIn(object), result);
	      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG);

	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, arrayMap(paths, toKey));
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        object = undefined;
	        length = 1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[toKey(path[index])];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = baseClamp(toInteger(position), 0, string.length);
	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, assignInDefaults);

	      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;

	      if (pattern === undefined) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (true) {
	    // Expose Lodash on the global object to prevent errors when Lodash is
	    // loaded by a script tag in the presence of an AMD loader.
	    // See http://requirejs.org/docs/errors.html#mismatch for more details.
	    // Use `_.noConflict` to remove Lodash from the global object.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds it.
	  else if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(47)(module)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.16.0
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';

	var hookCallback;

	function hooks () {
	    return hookCallback.apply(null, arguments);
	}

	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}

	function isArray(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}

	function isObject(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}

	function isObjectEmpty(obj) {
	    var k;
	    for (k in obj) {
	        // even if its not own property I'd still call it non-empty
	        return false;
	    }
	    return true;
	}

	function isNumber(input) {
	    return typeof value === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}

	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}

	function map(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}

	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}

	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }

	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }

	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }

	    return a;
	}

	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}

	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null
	    };
	}

	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}

	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;

	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }

	        return false;
	    };
	}

	var some$1 = some;

	function isValid(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));

	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }

	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}

	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }

	    return m;
	}

	function isUndefined(input) {
	    return input === void 0;
	}

	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];

	function copyConfig(to, from) {
	    var i, prop, val;

	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }

	    if (momentProperties.length > 0) {
	        for (i in momentProperties) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }

	    return to;
	}

	var updateInProgress = false;

	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}

	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}

	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}

	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;

	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }

	    return value;
	}

	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}

	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}

	function deprecate(msg, fn) {
	    var firstTime = true;

	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}

	var deprecations = {};

	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}

	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;

	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}

	function set (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _ordinalParseLenient.
	    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	}

	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}

	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}

	var keys;

	if (Object.keys) {
	    keys = Object.keys;
	} else {
	    keys = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}

	var keys$1 = keys;

	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};

	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction(output) ? output.call(mom, now) : output;
	}

	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};

	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];

	    if (format || !formatUpper) {
	        return format;
	    }

	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });

	    return this._longDateFormat[key];
	}

	var defaultInvalidDate = 'Invalid date';

	function invalidDate () {
	    return this._invalidDate;
	}

	var defaultOrdinal = '%d';
	var defaultOrdinalParse = /\d{1,2}/;

	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}

	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};

	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}

	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}

	var aliases = {};

	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}

	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}

	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;

	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }

	    return normalizedInput;
	}

	var priorities = {};

	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}

	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}

	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$1(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get(this, unit);
	        }
	    };
	}

	function get (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}

	function set$1 (mom, unit, value) {
	    if (mom.isValid()) {
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }
	}

	// MOMENTS

	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	        return this[units]();
	    }
	    return this;
	}


	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}

	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}

	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	var formatFunctions = {};

	var formatTokenFunctions = {};

	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}

	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}

	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;

	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }

	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}

	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }

	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	    return formatFunctions[format](m);
	}

	function expandFormat(format, locale) {
	    var i = 5;

	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }

	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }

	    return format;
	}

	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


	var regexes = {};

	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}

	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }

	    return regexes[token](config._strict, config._locale);
	}

	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}

	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}

	var tokens = {};

	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}

	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}

	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}

	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;

	var indexOf;

	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}

	var indexOf$1 = indexOf;

	function daysInMonth(year, month) {
	    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	}

	// FORMATTING

	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});

	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});

	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});

	// ALIASES

	addUnitAlias('month', 'M');

	// PRIORITY

	addUnitPriority('month', 8);

	// PARSING

	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});

	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});

	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});

	// LOCALES

	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return this._months;
	    }
	    return isArray(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}

	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return this._monthsShort;
	    }
	    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}

	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;

	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }

	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }

	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function setMonth (mom, value) {
	    var dayOfMonth;

	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }

	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }

	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}

	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get(this, 'Month');
	    }
	}

	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}

	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}

	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}

	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}

	// FORMATTING

	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});

	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});

	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	// ALIASES

	addUnitAlias('year', 'y');

	// PRIORITIES

	addUnitPriority('year', 1);

	// PARSING

	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);

	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});

	// HELPERS

	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}

	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}

	// HOOKS

	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};

	// MOMENTS

	var getSetYear = makeGetSet('FullYear', true);

	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}

	function createDate (y, m, d, h, M, s, ms) {
	    //can't just apply() to create a date:
	    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	    var date = new Date(y, m, d, h, M, s, ms);

	    //the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}

	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));

	    //the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}

	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	    return -fwdlw + fwd - 1;
	}

	//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;

	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }

	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}

	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;

	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }

	    return {
	        week: resWeek,
	        year: resYear
	    };
	}

	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}

	// FORMATTING

	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	// ALIASES

	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');

	// PRIORITIES

	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);

	// PARSING

	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);

	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});

	// HELPERS

	// LOCALES

	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}

	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};

	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}

	function localeFirstDayOfYear () {
	    return this._week.doy;
	}

	// MOMENTS

	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	// FORMATTING

	addFormatToken('d', 0, 'do', 'day');

	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});

	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});

	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});

	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');

	// ALIASES

	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');

	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);

	// PARSING

	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});

	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});

	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});

	// HELPERS

	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }

	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }

	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }

	    return null;
	}

	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}

	// LOCALES

	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return this._weekdays;
	    }
	    return isArray(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}

	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}

	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}

	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];

	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;

	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }

	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }

	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already

	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}

	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}

	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }

	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.

	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}

	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}

	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}

	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}


	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;

	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}

	// FORMATTING

	function hFormat() {
	    return this.hours() % 12 || 12;
	}

	function kFormat() {
	    return this.hours() || 24;
	}

	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);

	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});

	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});

	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}

	meridiem('a', true);
	meridiem('A', false);

	// ALIASES

	addUnitAlias('hour', 'h');

	// PRIORITY
	addUnitPriority('hour', 13);

	// PARSING

	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}

	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);

	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);

	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});

	// LOCALES

	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}

	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}


	// MOMENTS

	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);

	// months
	// week
	// weekdays
	// meridiem
	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    ordinalParse: defaultOrdinalParse,
	    relativeTime: defaultRelativeTime,

	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,

	    week: defaultLocaleWeek,

	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,

	    meridiemParse: defaultLocaleMeridiemParse
	};

	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;

	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}

	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;

	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return null;
	}

	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            !(function webpackMissingModule() { var e = new Error("Cannot find module \"./locale\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
	            // because defineLocale currently also sets the global locale, we
	            // want to undo that for lazy loaded locales
	            getSetGlobalLocale(oldLocale);
	        } catch (e) { }
	    }
	    return locales[name];
	}

	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }

	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	    }

	    return globalLocale._abbr;
	}

	function defineLocale (name, config) {
	    if (config !== null) {
	        var parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                if (!localeFamilies[config.parentLocale]) {
	                    localeFamilies[config.parentLocale] = [];
	                }
	                localeFamilies[config.parentLocale].push({
	                    name: name,
	                    config: config
	                });
	                return null;
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));

	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }

	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);


	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}

	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, parentConfig = baseConfig;
	        // MERGE
	        if (locales[name] != null) {
	            parentConfig = locales[name]._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;

	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}

	// returns locale data
	function getLocale (key) {
	    var locale;

	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }

	    if (!key) {
	        return globalLocale;
	    }

	    if (!isArray(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }

	    return chooseLocale(key);
	}

	function listLocales() {
	    return keys$1(locales);
	}

	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;

	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;

	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }

	        getParsingFlags(m).overflow = overflow;
	    }

	    return m;
	}

	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];

	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];

	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;

	    if (match) {
	        getParsingFlags(config).iso = true;

	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}

	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);

	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }

	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	        hooks.createFromInputFallback(config);
	    }
	}

	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);

	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}

	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}

	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, yearToUse;

	    if (config._d) {
	        return;
	    }

	    currentDate = currentDateArray(config);

	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }

	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear) {
	        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	        if (config._dayOfYear > daysInYear(yearToUse)) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }

	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }

	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }

	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }

	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }

	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }

	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }
	}

	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;

	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults(w.W, 1);
	        weekday = defaults(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;

	        var curWeek = weekOfYear(createLocal(), dow, doy);

	        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	        // Default to current week.
	        week = defaults(w.w, curWeek.week);

	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}

	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};

	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }

	    config._a = [];
	    getParsingFlags(config).empty = true;

	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;

	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }

	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }

	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }

	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	    configFromArray(config);
	    checkOverflow(config);
	}


	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;

	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}

	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,

	        scoreToBeat,
	        i,
	        currentScore;

	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }

	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);

	        if (!isValid(tempConfig)) {
	            continue;
	        }

	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;

	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	        getParsingFlags(tempConfig).score = currentScore;

	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }

	    extend(config, bestMoment || tempConfig);
	}

	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }

	    var i = normalizeObjectUnits(config._i);
	    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });

	    configFromArray(config);
	}

	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }

	    return res;
	}

	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;

	    config._locale = config._locale || getLocale(config._l);

	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }

	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }

	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }

	    if (!isValid(config)) {
	        config._d = null;
	    }

	    return config;
	}

	function configFromInput(config) {
	    var input = config._i;
	    if (input === undefined) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray(input)) {
	        config._a = map(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (typeof(input) === 'object') {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}

	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};

	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }

	    if ((isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;

	    return createFromConfig(c);
	}

	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}

	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}

	// TODO: Use [].sort instead?
	function min () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isBefore', args);
	}

	function max () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isAfter', args);
	}

	var now = function () {
	    return Date.now ? Date.now() : +(new Date());
	};

	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;

	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;

	    this._data = {};

	    this._locale = getLocale();

	    this._bubble();
	}

	function isDuration (obj) {
	    return obj instanceof Duration;
	}

	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}

	// FORMATTING

	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}

	offset('Z', ':');
	offset('ZZ', '');

	// PARSING

	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});

	// HELPERS

	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;

	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);

	    if (matches === null) {
	        return null;
	    }

	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);

	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}

	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}

	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}

	// HOOKS

	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};

	// MOMENTS

	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}

	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }

	        this.utcOffset(input, keepLocalTime);

	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}

	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}

	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;

	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}

	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}

	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;

	    return (this.utcOffset() - input) % 60 === 0;
	}

	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}

	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }

	    var c = {};

	    copyConfig(c, this);
	    c = prepareConfig(c);

	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }

	    return this._isDSTShifted;
	}

	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}

	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}

	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}

	// ASP.NET json date format regex
	var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;

	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }

	    ret = new Duration(duration);

	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }

	    return ret;
	}

	createDuration.fn = Duration.prototype;

	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}

	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};

	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }

	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	    return res;
	}

	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }

	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }

	    return res;
	}

	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }

	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}

	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);

	    if (!mom.isValid()) {
	        // No op
	        return;
	    }

	    updateOffset = updateOffset == null ? true : updateOffset;

	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (days) {
	        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	    }
	    if (months) {
	        setMonth(mom, get(mom, 'Month') + months * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}

	var add      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');

	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}

	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';

	    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}

	function clone () {
	    return new Moment(this);
	}

	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}

	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}

	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}

	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}

	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}

	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}

	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        delta, output;

	    if (!this.isValid()) {
	        return NaN;
	    }

	    that = cloneWithOffset(input, this);

	    if (!that.isValid()) {
	        return NaN;
	    }

	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	    units = normalizeUnits(units);

	    if (units === 'year' || units === 'month' || units === 'quarter') {
	        output = monthDiff(this, that);
	        if (units === 'quarter') {
	            output = output / 3;
	        } else if (units === 'year') {
	            output = output / 12;
	        }
	    } else {
	        delta = this - that;
	        output = units === 'second' ? delta / 1e3 : // 1000
	            units === 'minute' ? delta / 6e4 : // 1000 * 60
	            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	            delta;
	    }
	    return asFloat ? output : absFloor(output);
	}

	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;

	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }

	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}

	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	function toString () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}

	function toISOString () {
	    var m = this.clone().utc();
	    if (0 < m.year() && m.year() <= 9999) {
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            return this.toDate().toISOString();
	        } else {
	            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    } else {
	        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	    }
	}

	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';

	    return this.format(prefix + year + datetime + suffix);
	}

	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}

	function from (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}

	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}

	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;

	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}

	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);

	function localeData () {
	    return this._locale;
	}

	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }

	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }

	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }

	    return this;
	}

	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }

	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }

	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}

	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}

	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}

	function toDate () {
	    return new Date(this.valueOf());
	}

	function toArray () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}

	function toObject () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}

	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}

	function isValid$1 () {
	    return isValid(this);
	}

	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}

	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}

	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}

	// FORMATTING

	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});

	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});

	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}

	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	// ALIASES

	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');

	// PRIORITY

	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);


	// PARSING

	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);

	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});

	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});

	// MOMENTS

	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}

	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}

	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}

	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}

	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}

	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}

	// FORMATTING

	addFormatToken('Q', 0, 'Qo', 'quarter');

	// ALIASES

	addUnitAlias('quarter', 'Q');

	// PRIORITY

	addUnitPriority('quarter', 7);

	// PARSING

	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});

	// MOMENTS

	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}

	// FORMATTING

	addFormatToken('D', ['DD', 2], 'Do', 'date');

	// ALIASES

	addUnitAlias('date', 'D');

	// PRIOROITY
	addUnitPriority('date', 9);

	// PARSING

	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	});

	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0], 10);
	});

	// MOMENTS

	var getSetDayOfMonth = makeGetSet('Date', true);

	// FORMATTING

	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	// ALIASES

	addUnitAlias('dayOfYear', 'DDD');

	// PRIORITY
	addUnitPriority('dayOfYear', 4);

	// PARSING

	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});

	// HELPERS

	// MOMENTS

	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}

	// FORMATTING

	addFormatToken('m', ['mm', 2], 0, 'minute');

	// ALIASES

	addUnitAlias('minute', 'm');

	// PRIORITY

	addUnitPriority('minute', 14);

	// PARSING

	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);

	// MOMENTS

	var getSetMinute = makeGetSet('Minutes', false);

	// FORMATTING

	addFormatToken('s', ['ss', 2], 0, 'second');

	// ALIASES

	addUnitAlias('second', 's');

	// PRIORITY

	addUnitPriority('second', 15);

	// PARSING

	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);

	// MOMENTS

	var getSetSecond = makeGetSet('Seconds', false);

	// FORMATTING

	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});

	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});

	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});


	// ALIASES

	addUnitAlias('millisecond', 'ms');

	// PRIORITY

	addUnitPriority('millisecond', 16);

	// PARSING

	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);

	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}

	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}

	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS

	var getSetMillisecond = makeGetSet('Milliseconds', false);

	// FORMATTING

	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');

	// MOMENTS

	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}

	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}

	var proto = Moment.prototype;

	proto.add               = add;
	proto.calendar          = calendar$1;
	proto.clone             = clone;
	proto.diff              = diff;
	proto.endOf             = endOf;
	proto.format            = format;
	proto.from              = from;
	proto.fromNow           = fromNow;
	proto.to                = to;
	proto.toNow             = toNow;
	proto.get               = stringGet;
	proto.invalidAt         = invalidAt;
	proto.isAfter           = isAfter;
	proto.isBefore          = isBefore;
	proto.isBetween         = isBetween;
	proto.isSame            = isSame;
	proto.isSameOrAfter     = isSameOrAfter;
	proto.isSameOrBefore    = isSameOrBefore;
	proto.isValid           = isValid$1;
	proto.lang              = lang;
	proto.locale            = locale;
	proto.localeData        = localeData;
	proto.max               = prototypeMax;
	proto.min               = prototypeMin;
	proto.parsingFlags      = parsingFlags;
	proto.set               = stringSet;
	proto.startOf           = startOf;
	proto.subtract          = subtract;
	proto.toArray           = toArray;
	proto.toObject          = toObject;
	proto.toDate            = toDate;
	proto.toISOString       = toISOString;
	proto.inspect           = inspect;
	proto.toJSON            = toJSON;
	proto.toString          = toString;
	proto.unix              = unix;
	proto.valueOf           = valueOf;
	proto.creationData      = creationData;

	// Year
	proto.year       = getSetYear;
	proto.isLeapYear = getIsLeapYear;

	// Week Year
	proto.weekYear    = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;

	// Quarter
	proto.quarter = proto.quarters = getSetQuarter;

	// Month
	proto.month       = getSetMonth;
	proto.daysInMonth = getDaysInMonth;

	// Week
	proto.week           = proto.weeks        = getSetWeek;
	proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	proto.weeksInYear    = getWeeksInYear;
	proto.isoWeeksInYear = getISOWeeksInYear;

	// Day
	proto.date       = getSetDayOfMonth;
	proto.day        = proto.days             = getSetDayOfWeek;
	proto.weekday    = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear  = getSetDayOfYear;

	// Hour
	proto.hour = proto.hours = getSetHour;

	// Minute
	proto.minute = proto.minutes = getSetMinute;

	// Second
	proto.second = proto.seconds = getSetSecond;

	// Millisecond
	proto.millisecond = proto.milliseconds = getSetMillisecond;

	// Offset
	proto.utcOffset            = getSetOffset;
	proto.utc                  = setOffsetToUTC;
	proto.local                = setOffsetToLocal;
	proto.parseZone            = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST                = isDaylightSavingTime;
	proto.isLocal              = isLocal;
	proto.isUtcOffset          = isUtcOffset;
	proto.isUtc                = isUtc;
	proto.isUTC                = isUtc;

	// Timezone
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;

	// Deprecations
	proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	function createUnix (input) {
	    return createLocal(input * 1000);
	}

	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}

	function preParsePostFormat (string) {
	    return string;
	}

	var proto$1 = Locale.prototype;

	proto$1.calendar        = calendar;
	proto$1.longDateFormat  = longDateFormat;
	proto$1.invalidDate     = invalidDate;
	proto$1.ordinal         = ordinal;
	proto$1.preparse        = preParsePostFormat;
	proto$1.postformat      = preParsePostFormat;
	proto$1.relativeTime    = relativeTime;
	proto$1.pastFuture      = pastFuture;
	proto$1.set             = set;

	// Month
	proto$1.months            =        localeMonths;
	proto$1.monthsShort       =        localeMonthsShort;
	proto$1.monthsParse       =        localeMonthsParse;
	proto$1.monthsRegex       = monthsRegex;
	proto$1.monthsShortRegex  = monthsShortRegex;

	// Week
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	// Day of Week
	proto$1.weekdays       =        localeWeekdays;
	proto$1.weekdaysMin    =        localeWeekdaysMin;
	proto$1.weekdaysShort  =        localeWeekdaysShort;
	proto$1.weekdaysParse  =        localeWeekdaysParse;

	proto$1.weekdaysRegex       =        weekdaysRegex;
	proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

	// Hours
	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;

	function get$1 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}

	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }

	    format = format || '';

	    if (index != null) {
	        return get$1(format, index, field, 'month');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$1(format, i, field, 'month');
	    }
	    return out;
	}

	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;

	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    }

	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;

	    if (index != null) {
	        return get$1(format, (index + shift) % 7, field, 'day');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$1(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}

	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}

	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}

	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}

	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}

	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}

	getSetGlobalLocale('en', {
	    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});

	// Side effect imports
	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

	var mathAbs = Math.abs;

	function abs () {
	    var data           = this._data;

	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);

	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);

	    return this;
	}

	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);

	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;

	    return duration._bubble();
	}

	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}

	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}

	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}

	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;

	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }

	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;

	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;

	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;

	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;

	    days += absFloor(hours / 24);

	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));

	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;

	    data.days   = days;
	    data.months = months;
	    data.years  = years;

	    return this;
	}

	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}

	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}

	function as (units) {
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;

	    units = normalizeUnits(units);

	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}

	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}

	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}

	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');

	function get$2 (units) {
	    units = normalizeUnits(units);
	    return this[units + 's']();
	}

	function makeGetter(name) {
	    return function () {
	        return this._data[name];
	    };
	}

	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');

	function weeks () {
	    return absFloor(this.days() / 7);
	}

	var round = Math.round;
	var thresholds = {
	    s: 45,  // seconds to minute
	    m: 45,  // minutes to hour
	    h: 22,  // hours to day
	    d: 26,  // days to month
	    M: 11   // months to year
	};

	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}

	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));

	    var a = seconds < thresholds.s && ['s', seconds]  ||
	            minutes <= 1           && ['m']           ||
	            minutes < thresholds.m && ['mm', minutes] ||
	            hours   <= 1           && ['h']           ||
	            hours   < thresholds.h && ['hh', hours]   ||
	            days    <= 1           && ['d']           ||
	            days    < thresholds.d && ['dd', days]    ||
	            months  <= 1           && ['M']           ||
	            months  < thresholds.M && ['MM', months]  ||
	            years   <= 1           && ['y']           || ['yy', years];

	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}

	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}

	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    return true;
	}

	function humanize (withSuffix) {
	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);

	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }

	    return locale.postformat(output);
	}

	var abs$1 = Math.abs;

	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    var seconds = abs$1(this._milliseconds) / 1000;
	    var days         = abs$1(this._days);
	    var months       = abs$1(this._months);
	    var minutes, hours, years;

	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;

	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;


	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds;
	    var total = this.asSeconds();

	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }

	    return (total < 0 ? '-' : '') +
	        'P' +
	        (Y ? Y + 'Y' : '') +
	        (M ? M + 'M' : '') +
	        (D ? D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? h + 'H' : '') +
	        (m ? m + 'M' : '') +
	        (s ? s + 'S' : '');
	}

	var proto$2 = Duration.prototype;

	proto$2.abs            = abs;
	proto$2.add            = add$1;
	proto$2.subtract       = subtract$1;
	proto$2.as             = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds      = asSeconds;
	proto$2.asMinutes      = asMinutes;
	proto$2.asHours        = asHours;
	proto$2.asDays         = asDays;
	proto$2.asWeeks        = asWeeks;
	proto$2.asMonths       = asMonths;
	proto$2.asYears        = asYears;
	proto$2.valueOf        = valueOf$1;
	proto$2._bubble        = bubble;
	proto$2.get            = get$2;
	proto$2.milliseconds   = milliseconds;
	proto$2.seconds        = seconds;
	proto$2.minutes        = minutes;
	proto$2.hours          = hours;
	proto$2.days           = days;
	proto$2.weeks          = weeks;
	proto$2.months         = months;
	proto$2.years          = years;
	proto$2.humanize       = humanize;
	proto$2.toISOString    = toISOString$1;
	proto$2.toString       = toISOString$1;
	proto$2.toJSON         = toISOString$1;
	proto$2.locale         = locale;
	proto$2.localeData     = localeData;

	// Deprecations
	proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$2.lang = lang;

	// Side effect imports

	// FORMATTING

	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');

	// PARSING

	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});

	// Side effect imports


	hooks.version = '2.16.0';

	setHookCallback(createLocal);

	hooks.fn                    = proto;
	hooks.min                   = min;
	hooks.max                   = max;
	hooks.now                   = now;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto;

	return hooks;

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(47)(module)))

/***/ },
/* 64 */
/***/ function(module, exports) {

	/* ========================================================================
	 * bootstrap-switch - v3.3.2
	 * http://www.bootstrap-switch.org
	 * ========================================================================
	 * Copyright 2012-2013 Mattia Larentis
	 *
	 * ========================================================================
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 * ========================================================================
	 */

	(function() {
	  var __slice = [].slice;

	  (function($, window) {
	    "use strict";
	    var BootstrapSwitch;
	    BootstrapSwitch = (function() {
	      function BootstrapSwitch(element, options) {
	        if (options == null) {
	          options = {};
	        }
	        this.$element = $(element);
	        this.options = $.extend({}, $.fn.bootstrapSwitch.defaults, {
	          state: this.$element.is(":checked"),
	          size: this.$element.data("size"),
	          animate: this.$element.data("animate"),
	          disabled: this.$element.is(":disabled"),
	          readonly: this.$element.is("[readonly]"),
	          indeterminate: this.$element.data("indeterminate"),
	          inverse: this.$element.data("inverse"),
	          radioAllOff: this.$element.data("radio-all-off"),
	          onColor: this.$element.data("on-color"),
	          offColor: this.$element.data("off-color"),
	          onText: this.$element.data("on-text"),
	          offText: this.$element.data("off-text"),
	          labelText: this.$element.data("label-text"),
	          handleWidth: this.$element.data("handle-width"),
	          labelWidth: this.$element.data("label-width"),
	          baseClass: this.$element.data("base-class"),
	          wrapperClass: this.$element.data("wrapper-class")
	        }, options);
	        this.$wrapper = $("<div>", {
	          "class": (function(_this) {
	            return function() {
	              var classes;
	              classes = ["" + _this.options.baseClass].concat(_this._getClasses(_this.options.wrapperClass));
	              classes.push(_this.options.state ? "" + _this.options.baseClass + "-on" : "" + _this.options.baseClass + "-off");
	              if (_this.options.size != null) {
	                classes.push("" + _this.options.baseClass + "-" + _this.options.size);
	              }
	              if (_this.options.disabled) {
	                classes.push("" + _this.options.baseClass + "-disabled");
	              }
	              if (_this.options.readonly) {
	                classes.push("" + _this.options.baseClass + "-readonly");
	              }
	              if (_this.options.indeterminate) {
	                classes.push("" + _this.options.baseClass + "-indeterminate");
	              }
	              if (_this.options.inverse) {
	                classes.push("" + _this.options.baseClass + "-inverse");
	              }
	              if (_this.$element.attr("id")) {
	                classes.push("" + _this.options.baseClass + "-id-" + (_this.$element.attr("id")));
	              }
	              return classes.join(" ");
	            };
	          })(this)()
	        });
	        this.$container = $("<div>", {
	          "class": "" + this.options.baseClass + "-container"
	        });
	        this.$on = $("<span>", {
	          html: this.options.onText,
	          "class": "" + this.options.baseClass + "-handle-on " + this.options.baseClass + "-" + this.options.onColor
	        });
	        this.$off = $("<span>", {
	          html: this.options.offText,
	          "class": "" + this.options.baseClass + "-handle-off " + this.options.baseClass + "-" + this.options.offColor
	        });
	        this.$label = $("<span>", {
	          html: this.options.labelText,
	          "class": "" + this.options.baseClass + "-label"
	        });
	        this.$element.on("init.bootstrapSwitch", (function(_this) {
	          return function() {
	            return _this.options.onInit.apply(element, arguments);
	          };
	        })(this));
	        this.$element.on("switchChange.bootstrapSwitch", (function(_this) {
	          return function() {
	            return _this.options.onSwitchChange.apply(element, arguments);
	          };
	        })(this));
	        this.$container = this.$element.wrap(this.$container).parent();
	        this.$wrapper = this.$container.wrap(this.$wrapper).parent();
	        this.$element.before(this.options.inverse ? this.$off : this.$on).before(this.$label).before(this.options.inverse ? this.$on : this.$off);
	        if (this.options.indeterminate) {
	          this.$element.prop("indeterminate", true);
	        }
	        this._init();
	        this._elementHandlers();
	        this._handleHandlers();
	        this._labelHandlers();
	        this._formHandler();
	        this._externalLabelHandler();
	        this.$element.trigger("init.bootstrapSwitch");
	      }

	      BootstrapSwitch.prototype._constructor = BootstrapSwitch;

	      BootstrapSwitch.prototype.state = function(value, skip) {
	        if (typeof value === "undefined") {
	          return this.options.state;
	        }
	        if (this.options.disabled || this.options.readonly) {
	          return this.$element;
	        }
	        if (this.options.state && !this.options.radioAllOff && this.$element.is(":radio")) {
	          return this.$element;
	        }
	        if (this.options.indeterminate) {
	          this.indeterminate(false);
	        }
	        value = !!value;
	        this.$element.prop("checked", value).trigger("change.bootstrapSwitch", skip);
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.toggleState = function(skip) {
	        if (this.options.disabled || this.options.readonly) {
	          return this.$element;
	        }
	        if (this.options.indeterminate) {
	          this.indeterminate(false);
	          return this.state(true);
	        } else {
	          return this.$element.prop("checked", !this.options.state).trigger("change.bootstrapSwitch", skip);
	        }
	      };

	      BootstrapSwitch.prototype.size = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.size;
	        }
	        if (this.options.size != null) {
	          this.$wrapper.removeClass("" + this.options.baseClass + "-" + this.options.size);
	        }
	        if (value) {
	          this.$wrapper.addClass("" + this.options.baseClass + "-" + value);
	        }
	        this._width();
	        this._containerPosition();
	        this.options.size = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.animate = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.animate;
	        }
	        value = !!value;
	        if (value === this.options.animate) {
	          return this.$element;
	        }
	        return this.toggleAnimate();
	      };

	      BootstrapSwitch.prototype.toggleAnimate = function() {
	        this.options.animate = !this.options.animate;
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-animate");
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.disabled = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.disabled;
	        }
	        value = !!value;
	        if (value === this.options.disabled) {
	          return this.$element;
	        }
	        return this.toggleDisabled();
	      };

	      BootstrapSwitch.prototype.toggleDisabled = function() {
	        this.options.disabled = !this.options.disabled;
	        this.$element.prop("disabled", this.options.disabled);
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-disabled");
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.readonly = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.readonly;
	        }
	        value = !!value;
	        if (value === this.options.readonly) {
	          return this.$element;
	        }
	        return this.toggleReadonly();
	      };

	      BootstrapSwitch.prototype.toggleReadonly = function() {
	        this.options.readonly = !this.options.readonly;
	        this.$element.prop("readonly", this.options.readonly);
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-readonly");
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.indeterminate = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.indeterminate;
	        }
	        value = !!value;
	        if (value === this.options.indeterminate) {
	          return this.$element;
	        }
	        return this.toggleIndeterminate();
	      };

	      BootstrapSwitch.prototype.toggleIndeterminate = function() {
	        this.options.indeterminate = !this.options.indeterminate;
	        this.$element.prop("indeterminate", this.options.indeterminate);
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-indeterminate");
	        this._containerPosition();
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.inverse = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.inverse;
	        }
	        value = !!value;
	        if (value === this.options.inverse) {
	          return this.$element;
	        }
	        return this.toggleInverse();
	      };

	      BootstrapSwitch.prototype.toggleInverse = function() {
	        var $off, $on;
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-inverse");
	        $on = this.$on.clone(true);
	        $off = this.$off.clone(true);
	        this.$on.replaceWith($off);
	        this.$off.replaceWith($on);
	        this.$on = $off;
	        this.$off = $on;
	        this.options.inverse = !this.options.inverse;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.onColor = function(value) {
	        var color;
	        color = this.options.onColor;
	        if (typeof value === "undefined") {
	          return color;
	        }
	        if (color != null) {
	          this.$on.removeClass("" + this.options.baseClass + "-" + color);
	        }
	        this.$on.addClass("" + this.options.baseClass + "-" + value);
	        this.options.onColor = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.offColor = function(value) {
	        var color;
	        color = this.options.offColor;
	        if (typeof value === "undefined") {
	          return color;
	        }
	        if (color != null) {
	          this.$off.removeClass("" + this.options.baseClass + "-" + color);
	        }
	        this.$off.addClass("" + this.options.baseClass + "-" + value);
	        this.options.offColor = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.onText = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.onText;
	        }
	        this.$on.html(value);
	        this._width();
	        this._containerPosition();
	        this.options.onText = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.offText = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.offText;
	        }
	        this.$off.html(value);
	        this._width();
	        this._containerPosition();
	        this.options.offText = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.labelText = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.labelText;
	        }
	        this.$label.html(value);
	        this._width();
	        this.options.labelText = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.handleWidth = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.handleWidth;
	        }
	        this.options.handleWidth = value;
	        this._width();
	        this._containerPosition();
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.labelWidth = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.labelWidth;
	        }
	        this.options.labelWidth = value;
	        this._width();
	        this._containerPosition();
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.baseClass = function(value) {
	        return this.options.baseClass;
	      };

	      BootstrapSwitch.prototype.wrapperClass = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.wrapperClass;
	        }
	        if (!value) {
	          value = $.fn.bootstrapSwitch.defaults.wrapperClass;
	        }
	        this.$wrapper.removeClass(this._getClasses(this.options.wrapperClass).join(" "));
	        this.$wrapper.addClass(this._getClasses(value).join(" "));
	        this.options.wrapperClass = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.radioAllOff = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.radioAllOff;
	        }
	        value = !!value;
	        if (value === this.options.radioAllOff) {
	          return this.$element;
	        }
	        this.options.radioAllOff = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.onInit = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.onInit;
	        }
	        if (!value) {
	          value = $.fn.bootstrapSwitch.defaults.onInit;
	        }
	        this.options.onInit = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.onSwitchChange = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.onSwitchChange;
	        }
	        if (!value) {
	          value = $.fn.bootstrapSwitch.defaults.onSwitchChange;
	        }
	        this.options.onSwitchChange = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.destroy = function() {
	        var $form;
	        $form = this.$element.closest("form");
	        if ($form.length) {
	          $form.off("reset.bootstrapSwitch").removeData("bootstrap-switch");
	        }
	        this.$container.children().not(this.$element).remove();
	        this.$element.unwrap().unwrap().off(".bootstrapSwitch").removeData("bootstrap-switch");
	        return this.$element;
	      };

	      BootstrapSwitch.prototype._width = function() {
	        var $handles, handleWidth;
	        $handles = this.$on.add(this.$off);
	        $handles.add(this.$label).css("width", "");
	        handleWidth = this.options.handleWidth === "auto" ? Math.max(this.$on.width(), this.$off.width()) : this.options.handleWidth;
	        $handles.width(handleWidth);
	        this.$label.width((function(_this) {
	          return function(index, width) {
	            if (_this.options.labelWidth !== "auto") {
	              return _this.options.labelWidth;
	            }
	            if (width < handleWidth) {
	              return handleWidth;
	            } else {
	              return width;
	            }
	          };
	        })(this));
	        this._handleWidth = this.$on.outerWidth();
	        this._labelWidth = this.$label.outerWidth();
	        this.$container.width((this._handleWidth * 2) + this._labelWidth);
	        return this.$wrapper.width(this._handleWidth + this._labelWidth);
	      };

	      BootstrapSwitch.prototype._containerPosition = function(state, callback) {
	        if (state == null) {
	          state = this.options.state;
	        }
	        this.$container.css("margin-left", (function(_this) {
	          return function() {
	            var values;
	            values = [0, "-" + _this._handleWidth + "px"];
	            if (_this.options.indeterminate) {
	              return "-" + (_this._handleWidth / 2) + "px";
	            }
	            if (state) {
	              if (_this.options.inverse) {
	                return values[1];
	              } else {
	                return values[0];
	              }
	            } else {
	              if (_this.options.inverse) {
	                return values[0];
	              } else {
	                return values[1];
	              }
	            }
	          };
	        })(this));
	        if (!callback) {
	          return;
	        }
	        return setTimeout(function() {
	          return callback();
	        }, 50);
	      };

	      BootstrapSwitch.prototype._init = function() {
	        var init, initInterval;
	        init = (function(_this) {
	          return function() {
	            _this._width();
	            return _this._containerPosition(null, function() {
	              if (_this.options.animate) {
	                return _this.$wrapper.addClass("" + _this.options.baseClass + "-animate");
	              }
	            });
	          };
	        })(this);
	        if (this.$wrapper.is(":visible")) {
	          return init();
	        }
	        return initInterval = window.setInterval((function(_this) {
	          return function() {
	            if (_this.$wrapper.is(":visible")) {
	              init();
	              return window.clearInterval(initInterval);
	            }
	          };
	        })(this), 50);
	      };

	      BootstrapSwitch.prototype._elementHandlers = function() {
	        return this.$element.on({
	          "change.bootstrapSwitch": (function(_this) {
	            return function(e, skip) {
	              var state;
	              e.preventDefault();
	              e.stopImmediatePropagation();
	              state = _this.$element.is(":checked");
	              _this._containerPosition(state);
	              if (state === _this.options.state) {
	                return;
	              }
	              _this.options.state = state;
	              _this.$wrapper.toggleClass("" + _this.options.baseClass + "-off").toggleClass("" + _this.options.baseClass + "-on");
	              if (!skip) {
	                if (_this.$element.is(":radio")) {
	                  $("[name='" + (_this.$element.attr('name')) + "']").not(_this.$element).prop("checked", false).trigger("change.bootstrapSwitch", true);
	                }
	                return _this.$element.trigger("switchChange.bootstrapSwitch", [state]);
	              }
	            };
	          })(this),
	          "focus.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              e.preventDefault();
	              return _this.$wrapper.addClass("" + _this.options.baseClass + "-focused");
	            };
	          })(this),
	          "blur.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              e.preventDefault();
	              return _this.$wrapper.removeClass("" + _this.options.baseClass + "-focused");
	            };
	          })(this),
	          "keydown.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              if (!e.which || _this.options.disabled || _this.options.readonly) {
	                return;
	              }
	              switch (e.which) {
	                case 37:
	                  e.preventDefault();
	                  e.stopImmediatePropagation();
	                  return _this.state(false);
	                case 39:
	                  e.preventDefault();
	                  e.stopImmediatePropagation();
	                  return _this.state(true);
	              }
	            };
	          })(this)
	        });
	      };

	      BootstrapSwitch.prototype._handleHandlers = function() {
	        this.$on.on("click.bootstrapSwitch", (function(_this) {
	          return function(event) {
	            event.preventDefault();
	            event.stopPropagation();
	            _this.state(false);
	            return _this.$element.trigger("focus.bootstrapSwitch");
	          };
	        })(this));
	        return this.$off.on("click.bootstrapSwitch", (function(_this) {
	          return function(event) {
	            event.preventDefault();
	            event.stopPropagation();
	            _this.state(true);
	            return _this.$element.trigger("focus.bootstrapSwitch");
	          };
	        })(this));
	      };

	      BootstrapSwitch.prototype._labelHandlers = function() {
	        return this.$label.on({
	          "mousedown.bootstrapSwitch touchstart.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              if (_this._dragStart || _this.options.disabled || _this.options.readonly) {
	                return;
	              }
	              e.preventDefault();
	              e.stopPropagation();
	              _this._dragStart = (e.pageX || e.originalEvent.touches[0].pageX) - parseInt(_this.$container.css("margin-left"), 10);
	              if (_this.options.animate) {
	                _this.$wrapper.removeClass("" + _this.options.baseClass + "-animate");
	              }
	              return _this.$element.trigger("focus.bootstrapSwitch");
	            };
	          })(this),
	          "mousemove.bootstrapSwitch touchmove.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              var difference;
	              if (_this._dragStart == null) {
	                return;
	              }
	              e.preventDefault();
	              difference = (e.pageX || e.originalEvent.touches[0].pageX) - _this._dragStart;
	              if (difference < -_this._handleWidth || difference > 0) {
	                return;
	              }
	              _this._dragEnd = difference;
	              return _this.$container.css("margin-left", "" + _this._dragEnd + "px");
	            };
	          })(this),
	          "mouseup.bootstrapSwitch touchend.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              var state;
	              if (!_this._dragStart) {
	                return;
	              }
	              e.preventDefault();
	              if (_this.options.animate) {
	                _this.$wrapper.addClass("" + _this.options.baseClass + "-animate");
	              }
	              if (_this._dragEnd) {
	                state = _this._dragEnd > -(_this._handleWidth / 2);
	                _this._dragEnd = false;
	                _this.state(_this.options.inverse ? !state : state);
	              } else {
	                _this.state(!_this.options.state);
	              }
	              return _this._dragStart = false;
	            };
	          })(this),
	          "mouseleave.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              return _this.$label.trigger("mouseup.bootstrapSwitch");
	            };
	          })(this)
	        });
	      };

	      BootstrapSwitch.prototype._externalLabelHandler = function() {
	        var $externalLabel;
	        $externalLabel = this.$element.closest("label");
	        return $externalLabel.on("click", (function(_this) {
	          return function(event) {
	            event.preventDefault();
	            event.stopImmediatePropagation();
	            if (event.target === $externalLabel[0]) {
	              return _this.toggleState();
	            }
	          };
	        })(this));
	      };

	      BootstrapSwitch.prototype._formHandler = function() {
	        var $form;
	        $form = this.$element.closest("form");
	        if ($form.data("bootstrap-switch")) {
	          return;
	        }
	        return $form.on("reset.bootstrapSwitch", function() {
	          return window.setTimeout(function() {
	            return $form.find("input").filter(function() {
	              return $(this).data("bootstrap-switch");
	            }).each(function() {
	              return $(this).bootstrapSwitch("state", this.checked);
	            });
	          }, 1);
	        }).data("bootstrap-switch", true);
	      };

	      BootstrapSwitch.prototype._getClasses = function(classes) {
	        var c, cls, _i, _len;
	        if (!$.isArray(classes)) {
	          return ["" + this.options.baseClass + "-" + classes];
	        }
	        cls = [];
	        for (_i = 0, _len = classes.length; _i < _len; _i++) {
	          c = classes[_i];
	          cls.push("" + this.options.baseClass + "-" + c);
	        }
	        return cls;
	      };

	      return BootstrapSwitch;

	    })();
	    $.fn.bootstrapSwitch = function() {
	      var args, option, ret;
	      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
	      ret = this;
	      this.each(function() {
	        var $this, data;
	        $this = $(this);
	        data = $this.data("bootstrap-switch");
	        if (!data) {
	          $this.data("bootstrap-switch", data = new BootstrapSwitch(this, option));
	        }
	        if (typeof option === "string") {
	          return ret = data[option].apply(data, args);
	        }
	      });
	      return ret;
	    };
	    $.fn.bootstrapSwitch.Constructor = BootstrapSwitch;
	    return $.fn.bootstrapSwitch.defaults = {
	      state: true,
	      size: null,
	      animate: true,
	      disabled: false,
	      readonly: false,
	      indeterminate: false,
	      inverse: false,
	      radioAllOff: false,
	      onColor: "primary",
	      offColor: "default",
	      onText: "ON",
	      offText: "OFF",
	      labelText: "&nbsp;",
	      handleWidth: "auto",
	      labelWidth: "auto",
	      baseClass: "bootstrap-switch",
	      wrapperClass: "wrapper",
	      onInit: function() {},
	      onSwitchChange: function() {}
	    };
	  })(window.jQuery, window);

	}).call(this);


/***/ }
/******/ ]);